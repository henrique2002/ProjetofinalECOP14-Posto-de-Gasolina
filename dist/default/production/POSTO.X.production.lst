

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Dec 17 16:44:42 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    52                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    53  0000                     
    54                           ; Version 2.20
    55                           ; Generated 12/02/2020 GMT
    56                           ; 
    57                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001FD0                     __pidataCOMRAM:
    91                           	callstack 0
    92                           
    93                           ;initializer for _Flag
    94  001FD0  01                 	db	1
    95                           
    96                           ;initializer for _LED
    97  001FD1  FF                 	db	255
    98                           
    99                           	psect	smallconst
   100  000600                     __psmallconst:
   101                           	callstack 0
   102  000600  00                 	db	0
   103  000601                     _valor:
   104                           	callstack 0
   105  000601  3F                 	db	63
   106  000602  06                 	db	6
   107  000603  5B                 	db	91
   108  000604  4F                 	db	79
   109  000605  66                 	db	102
   110  000606  6D                 	db	109
   111  000607  7D                 	db	125
   112  000608  07                 	db	7
   113  000609  7F                 	db	127
   114  00060A  6F                 	db	111
   115  00060B  77                 	db	119
   116  00060C  7C                 	db	124
   117  00060D  39                 	db	57
   118  00060E  5E                 	db	94
   119  00060F  79                 	db	121
   120  000610  71                 	db	113
   121  000611                     __end_of_valor:
   122                           	callstack 0
   123  000611                     _charKey:
   124                           	callstack 0
   125  000611  55                 	db	85
   126  000612  4C                 	db	76
   127  000613  44                 	db	68
   128  000614  52                 	db	82
   129  000615  53                 	db	83
   130  000616  58                 	db	88
   131  000617  41                 	db	65
   132  000618  42                 	db	66
   133  000619  59                 	db	89
   134  00061A  73                 	db	115
   135  00061B                     __end_of_charKey:
   136                           	callstack 0
   137  0000                     _T0CON	set	4053
   138  0000                     _TMR0L	set	4054
   139  0000                     _TMR0H	set	4055
   140  0000                     _INTCON	set	4082
   141  0000                     _T2CON	set	4042
   142  0000                     _CCP2CON	set	4026
   143  0000                     _CCPR2L	set	4027
   144  0000                     _PR2	set	4043
   145  0000                     _TRISE	set	3990
   146  0000                     _TRISD	set	3989
   147  0000                     _TRISC	set	3988
   148  0000                     _TRISB	set	3987
   149  0000                     _TRISA	set	3986
   150  0000                     _PORTE	set	3972
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTB	set	3969
   153  0000                     _PORTA	set	3968
   154  0000                     _ADRESL	set	4035
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADCON2	set	4032
   157  0000                     _ADCON1	set	4033
   158  0000                     _ADCON0	set	4034
   159  0000                     _PORTD	set	3971
   160  00061B                     STR_5:
   161  00061B  41                 	db	65	;'A'
   162  00061C  62                 	db	98	;'b'
   163  00061D  61                 	db	97	;'a'
   164  00061E  73                 	db	115	;'s'
   165  00061F  74                 	db	116	;'t'
   166  000620  65                 	db	101	;'e'
   167  000621  63                 	db	99	;'c'
   168  000622  65                 	db	101	;'e'
   169  000623  6E                 	db	110	;'n'
   170  000624  64                 	db	100	;'d'
   171  000625  6F                 	db	111	;'o'
   172  000626  2E                 	db	46
   173  000627  2E                 	db	46
   174  000628  2E                 	db	46
   175  000629  2E                 	db	46
   176  00062A  00                 	db	0
   177  00062B                     STR_9:
   178  00062B  51                 	db	81	;'Q'
   179  00062C  55                 	db	85	;'U'
   180  00062D  41                 	db	65	;'A'
   181  00062E  4E                 	db	78	;'N'
   182  00062F  54                 	db	84	;'T'
   183  000630  4F                 	db	79	;'O'
   184  000631  53                 	db	83	;'S'
   185  000632  20                 	db	32
   186  000633  4C                 	db	76	;'L'
   187  000634  49                 	db	73	;'I'
   188  000635  54                 	db	84	;'T'
   189  000636  52                 	db	82	;'R'
   190  000637  4F                 	db	79	;'O'
   191  000638  53                 	db	83	;'S'
   192  000639  3F                 	db	63	;'?'
   193  00063A  00                 	db	0
   194  00063B                     STR_4:
   195  00063B  41                 	db	65	;'A'
   196  00063C  47                 	db	71	;'G'
   197  00063D  55                 	db	85	;'U'
   198  00063E  41                 	db	65	;'A'
   199  00063F  52                 	db	82	;'R'
   200  000640  44                 	db	68	;'D'
   201  000641  45                 	db	69	;'E'
   202  000642  2E                 	db	46
   203  000643  2E                 	db	46
   204  000644  2E                 	db	46
   205  000645  2E                 	db	46
   206  000646  2E                 	db	46
   207  000647  2E                 	db	46
   208  000648  00                 	db	0
   209  000649                     STR_2:
   210  000649  51                 	db	81	;'Q'
   211  00064A  55                 	db	85	;'U'
   212  00064B  41                 	db	65	;'A'
   213  00064C  4C                 	db	76	;'L'
   214  00064D  20                 	db	32
   215  00064E  4F                 	db	79	;'O'
   216  00064F  20                 	db	32
   217  000650  56                 	db	86	;'V'
   218  000651  41                 	db	65	;'A'
   219  000652  4C                 	db	76	;'L'
   220  000653  4F                 	db	79	;'O'
   221  000654  52                 	db	82	;'R'
   222  000655  3F                 	db	63	;'?'
   223  000656  00                 	db	0
   224  000657                     STR_7:
   225  000657  41                 	db	65	;'A'
   226  000658  42                 	db	66	;'B'
   227  000659  41                 	db	65	;'A'
   228  00065A  53                 	db	83	;'S'
   229  00065B  54                 	db	84	;'T'
   230  00065C  45                 	db	69	;'E'
   231  00065D  43                 	db	67	;'C'
   232  00065E  49                 	db	73	;'I'
   233  00065F  44                 	db	68	;'D'
   234  000660  4F                 	db	79	;'O'
   235  000661  00                 	db	0
   236  000662                     STR_22:
   237  000662  42                 	db	66	;'B'
   238  000663  45                 	db	69	;'E'
   239  000664  4D                 	db	77	;'M'
   240  000665  20                 	db	32
   241  000666  56                 	db	86	;'V'
   242  000667  49                 	db	73	;'I'
   243  000668  4E                 	db	78	;'N'
   244  000669  44                 	db	68	;'D'
   245  00066A  4F                 	db	79	;'O'
   246  00066B  53                 	db	83	;'S'
   247  00066C  00                 	db	0
   248  00066D                     STR_23:
   249  00066D  50                 	db	80	;'P'
   250  00066E  4F                 	db	79	;'O'
   251  00066F  53                 	db	83	;'S'
   252  000670  54                 	db	84	;'T'
   253  000671  4F                 	db	79	;'O'
   254  000672  20                 	db	32
   255  000673  36                 	db	54	;'6'
   256  000674  39                 	db	57	;'9'
   257  000675  20                 	db	32
   258  000676  00                 	db	0
   259  000677                     STR_6:
   260  000677  56                 	db	86	;'V'
   261  000678  45                 	db	69	;'E'
   262  000679  49                 	db	73	;'I'
   263  00067A  43                 	db	67	;'C'
   264  00067B  55                 	db	85	;'U'
   265  00067C  4C                 	db	76	;'L'
   266  00067D  4F                 	db	79	;'O'
   267  00067E  20                 	db	32
   268  00067F  00                 	db	0
   269  000680                     STR_1:
   270  000680  47                 	db	71	;'G'
   271  000681  41                 	db	65	;'A'
   272  000682  53                 	db	83	;'S'
   273  000683  4F                 	db	79	;'O'
   274  000684  4C                 	db	76	;'L'
   275  000685  49                 	db	73	;'I'
   276  000686  4E                 	db	78	;'N'
   277  000687  41                 	db	65	;'A'
   278  000688  00                 	db	0
   279  000689                     STR_15:
   280  000689  44                 	db	68	;'D'
   281  00068A  49                 	db	73	;'I'
   282  00068B  45                 	db	69	;'E'
   283  00068C  53                 	db	83	;'S'
   284  00068D  45                 	db	69	;'E'
   285  00068E  4C                 	db	76	;'L'
   286  00068F  00                 	db	0
   287  000690                     STR_8:
   288  000690  41                 	db	65	;'A'
   289  000691  4C                 	db	76	;'L'
   290  000692  43                 	db	67	;'C'
   291  000693  4F                 	db	79	;'O'
   292  000694  4F                 	db	79	;'O'
   293  000695  4C                 	db	76	;'L'
   294  000696  00                 	db	0
   295  000697                     STR_3:
   296  000697  52                 	db	82	;'R'
   297  000698  24                 	db	36
   298  000699  00                 	db	0
   299  00069A  00                 	db	0	; dummy byte at the end
   300  0000                     
   301                           ; #config settings
   302                           
   303                           	psect	cinit
   304  001E42                     __pcinit:
   305                           	callstack 0
   306  001E42                     start_initialization:
   307                           	callstack 0
   308  001E42                     __initialization:
   309                           	callstack 0
   310                           
   311                           ; Initialize objects allocated to COMRAM (2 bytes)
   312                           ; load TBLPTR registers with __pidataCOMRAM
   313  001E42  0ED0               	movlw	low __pidataCOMRAM
   314  001E44  6EF6               	movwf	tblptrl,c
   315  001E46  0E1F               	movlw	high __pidataCOMRAM
   316  001E48  6EF7               	movwf	tblptrh,c
   317  001E4A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   318  001E4C  6EF8               	movwf	tblptru,c
   319  001E4E  0009               	tblrd		*+	;fetch initializer
   320  001E50  CFF5 F033          	movff	tablat,__pdataCOMRAM
   321  001E54  0009               	tblrd		*+	;fetch initializer
   322  001E56  CFF5 F034          	movff	tablat,__pdataCOMRAM+1
   323                           
   324                           ; Clear objects allocated to COMRAM (23 bytes)
   325  001E5A  EE00  F01C         	lfsr	0,__pbssCOMRAM
   326  001E5E  0E17               	movlw	23
   327  001E60                     clear_0:
   328  001E60  6AEE               	clrf	postinc0,c
   329  001E62  06E8               	decf	wreg,f,c
   330  001E64  E1FD               	bnz	clear_0
   331  001E66                     end_of_initialization:
   332                           	callstack 0
   333  001E66                     __end_of__initialization:
   334                           	callstack 0
   335  001E66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   336  001E68  6EF8               	movwf	tblptru,c
   337  001E6A  0100               	movlb	0
   338  001E6C  EF70  F00B         	goto	_main	;jump to C main() function
   339                           
   340                           	psect	bssCOMRAM
   341  00001C                     __pbssCOMRAM:
   342                           	callstack 0
   343  00001C                     _v:
   344                           	callstack 0
   345  00001C                     	ds	4
   346  000020                     kpDebounce@oldRead:
   347                           	callstack 0
   348  000020                     	ds	2
   349  000022                     kpDebounce@newRead:
   350                           	callstack 0
   351  000022                     	ds	2
   352  000024                     _keys:
   353                           	callstack 0
   354  000024                     	ds	2
   355  000026                     _con1:
   356                           	callstack 0
   357  000026                     	ds	2
   358  000028                     _ValorAD:
   359                           	callstack 0
   360  000028                     	ds	2
   361  00002A                     _Leitura:
   362                           	callstack 0
   363  00002A                     	ds	2
   364  00002C                     _v3:
   365                           	callstack 0
   366  00002C                     	ds	1
   367  00002D                     _v2:
   368                           	callstack 0
   369  00002D                     	ds	1
   370  00002E                     _v1:
   371                           	callstack 0
   372  00002E                     	ds	1
   373  00002F                     _v0:
   374                           	callstack 0
   375  00002F                     	ds	1
   376  000030                     _display:
   377                           	callstack 0
   378  000030                     	ds	1
   379  000031                     kpDebounce@tempo:
   380                           	callstack 0
   381  000031                     	ds	1
   382  000032                     _tecla:
   383                           	callstack 0
   384  000032                     	ds	1
   385                           
   386                           	psect	dataCOMRAM
   387  000033                     __pdataCOMRAM:
   388                           	callstack 0
   389  000033                     _Flag:
   390                           	callstack 0
   391  000033                     	ds	1
   392  000034                     _LED:
   393                           	callstack 0
   394  000034                     	ds	1
   395                           
   396                           	psect	cstackCOMRAM
   397  000001                     __pcstackCOMRAM:
   398                           	callstack 0
   399  000001                     ??_kpReadKey:
   400  000001                     ?_kpRead:
   401                           	callstack 0
   402  000001                     ?_adcRead:
   403                           	callstack 0
   404  000001                     ?_digitalRead:
   405                           	callstack 0
   406  000001                     ?___wmul:
   407                           	callstack 0
   408  000001                     ?___lwdiv:
   409                           	callstack 0
   410  000001                     ?___lldiv:
   411                           	callstack 0
   412  000001                     ?___aldiv:
   413                           	callstack 0
   414  000001                     adcRead@channel:
   415                           	callstack 0
   416  000001                     digitalWrite@pin:
   417                           	callstack 0
   418  000001                     digitalRead@pin:
   419                           	callstack 0
   420  000001                     pinMode@pin:
   421                           	callstack 0
   422  000001                     delayMicro@a:
   423                           	callstack 0
   424  000001                     delayMili@a:
   425                           	callstack 0
   426  000001                     timerReset@tempo:
   427                           	callstack 0
   428  000001                     atraso_ms@num:
   429                           	callstack 0
   430  000001                     ___wmul@multiplier:
   431                           	callstack 0
   432  000001                     ___lwdiv@dividend:
   433                           	callstack 0
   434  000001                     ___lldiv@dividend:
   435                           	callstack 0
   436  000001                     ___aldiv@dividend:
   437                           	callstack 0
   438                           
   439                           ; 4 bytes @ 0x0
   440  000001                     	ds	2
   441  000003                     ??_digitalRead:
   442  000003                     ??_delayMili:
   443  000003                     adcRead@ADvalor:
   444                           	callstack 0
   445  000003                     digitalWrite@value:
   446                           	callstack 0
   447  000003                     pinMode@type:
   448                           	callstack 0
   449  000003                     timerReset@ciclos:
   450                           	callstack 0
   451  000003                     atraso_ms@i:
   452                           	callstack 0
   453  000003                     ___wmul@multiplicand:
   454                           	callstack 0
   455  000003                     ___lwdiv@divisor:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x2
   459  000003                     	ds	1
   460  000004                     kpReadKey@i:
   461                           	callstack 0
   462  000004                     delayMili@i:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x3
   466  000004                     	ds	1
   467  000005                     ??_pinMode:
   468  000005                     ??_digitalWrite:
   469  000005                     atraso_ms@j:
   470                           	callstack 0
   471  000005                     ___wmul@product:
   472                           	callstack 0
   473  000005                     ___lwdiv@quotient:
   474                           	callstack 0
   475  000005                     ___lldiv@divisor:
   476                           	callstack 0
   477  000005                     ___aldiv@divisor:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0x4
   481  000005                     	ds	1
   482  000006                     atraso_ms@k:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0x5
   486  000006                     	ds	1
   487  000007                     ___lwdiv@counter:
   488                           	callstack 0
   489  000007                     soWrite@value:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x6
   493  000007                     	ds	1
   494  000008                     ??_pwmSet:
   495                           
   496                           ; 1 bytes @ 0x7
   497  000008                     	ds	1
   498  000009                     soWrite@i:
   499                           	callstack 0
   500  000009                     ___aldiv@counter:
   501                           	callstack 0
   502  000009                     ___lldiv@quotient:
   503                           	callstack 0
   504                           
   505                           ; 4 bytes @ 0x8
   506  000009                     	ds	1
   507  00000A                     ??_kpDebounce:
   508  00000A                     pwmSet@porcento:
   509                           	callstack 0
   510  00000A                     ___aldiv@sign:
   511                           	callstack 0
   512  00000A                     pushNibble@rs:
   513                           	callstack 0
   514  00000A                     pushByte@rs:
   515                           	callstack 0
   516                           
   517                           ; 2 bytes @ 0x9
   518  00000A                     	ds	1
   519  00000B                     pwmSet@val:
   520                           	callstack 0
   521  00000B                     ___aldiv@quotient:
   522                           	callstack 0
   523                           
   524                           ; 4 bytes @ 0xA
   525  00000B                     	ds	1
   526  00000C                     ??_pushByte:
   527  00000C                     pushNibble@value:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0xB
   531  00000C                     	ds	1
   532  00000D                     pushByte@value:
   533                           	callstack 0
   534  00000D                     ___lldiv@counter:
   535                           	callstack 0
   536  00000D                     kpDebounce@i:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0xC
   540  00000D                     	ds	1
   541  00000E                     ?___llmod:
   542                           	callstack 0
   543  00000E                     lcdCommand@value:
   544                           	callstack 0
   545  00000E                     lcdChar@value:
   546                           	callstack 0
   547  00000E                     ___llmod@dividend:
   548                           	callstack 0
   549                           
   550                           ; 4 bytes @ 0xD
   551  00000E                     	ds	1
   552  00000F                     lcdPosition@line:
   553                           	callstack 0
   554  00000F                     lcdString@msg:
   555                           	callstack 0
   556  00000F                     pwmFrequency@freq:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0xE
   560  00000F                     	ds	2
   561  000011                     ??_lcdString:
   562  000011                     lcdPosition@col:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x10
   566  000011                     	ds	1
   567  000012                     ___llmod@divisor:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0x11
   571  000012                     	ds	1
   572  000013                     lcdString@i:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x12
   576  000013                     	ds	3
   577  000016                     ___llmod@counter:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x15
   581  000016                     	ds	1
   582  000017                     ??_LeTeclado:
   583                           
   584                           ; 1 bytes @ 0x16
   585  000017                     	ds	2
   586  000019                     ??_main:
   587                           
   588                           ; 1 bytes @ 0x18
   589  000019                     	ds	2
   590  00001B                     main@slot:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x1A
   594  00001B                     	ds	1
   595                           
   596 ;;
   597 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   598 ;;
   599 ;; *************** function _main *****************
   600 ;; Defined at:
   601 ;;		line 184 in file "main.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  slot            1   26[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   615 ;;      Params:         0       0       0       0       0       0       0
   616 ;;      Locals:         1       0       0       0       0       0       0
   617 ;;      Temps:          2       0       0       0       0       0       0
   618 ;;      Totals:         3       0       0       0       0       0       0
   619 ;;Total ram usage:        3 bytes
   620 ;; Hardware stack levels required when called: 7
   621 ;; This function calls:
   622 ;;		_LeTeclado
   623 ;;		_adcInit
   624 ;;		_kpDebounce
   625 ;;		_kpInit
   626 ;;		_kpReadKey
   627 ;;		_lcdCommand
   628 ;;		_lcdInit
   629 ;;		_lcdString
   630 ;;		_pwmInit
   631 ;;		_ssdInit
   632 ;;		_timerInit
   633 ;;		_timerReset
   634 ;;		_timerWait
   635 ;; This function is called by:
   636 ;;		Startup code after reset
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text0
   641  0016E0                     __ptext0:
   642                           	callstack 0
   643  0016E0                     _main:
   644                           	callstack 24
   645  0016E0                     
   646                           ;main.c: 185:     char slot;;main.c: 187:     kpInit();
   647  0016E0  ECF0  F00E         	call	_kpInit	;wreg free
   648                           
   649                           ;main.c: 188:     adcInit();
   650  0016E4  EC6F  F00E         	call	_adcInit	;wreg free
   651                           
   652                           ;main.c: 189:     lcdInit();
   653  0016E8  ECCF  F00B         	call	_lcdInit	;wreg free
   654                           
   655                           ;main.c: 190:     ssdInit();
   656  0016EC  ECCA  F00D         	call	_ssdInit	;wreg free
   657                           
   658                           ;main.c: 191:     timerInit();
   659  0016F0  ECE4  F00F         	call	_timerInit	;wreg free
   660                           
   661                           ;main.c: 192:     pwmInit();
   662  0016F4  ECCA  F00F         	call	_pwmInit	;wreg free
   663                           
   664                           ;main.c: 193:     while (kpReadKey() != 'S') {
   665  0016F8  EF92  F00B         	goto	l80
   666  0016FC                     l2418:
   667                           
   668                           ;main.c: 194:         kpDebounce();
   669  0016FC  EC4F  F00A         	call	_kpDebounce	;wreg free
   670                           
   671                           ;main.c: 196:         lcdCommand(0x80);
   672  001700  0E80               	movlw	128
   673  001702  ECBB  F00F         	call	_lcdCommand
   674  001706                     
   675                           ;main.c: 197:         lcdString("BEM VINDOS");
   676  001706  0E62               	movlw	low STR_22
   677  001708  6E0F               	movwf	lcdString@msg^0,c
   678  00170A  0E06               	movlw	high STR_22
   679  00170C  6E10               	movwf	(lcdString@msg+1)^0,c
   680  00170E  ECF5  F00D         	call	_lcdString	;wreg free
   681  001712                     
   682                           ;main.c: 198:         lcdCommand(0xC0);
   683  001712  0EC0               	movlw	192
   684  001714  ECBB  F00F         	call	_lcdCommand
   685                           
   686                           ;main.c: 199:         lcdString("POSTO 69 ");
   687  001718  0E6D               	movlw	low STR_23
   688  00171A  6E0F               	movwf	lcdString@msg^0,c
   689  00171C  0E06               	movlw	high STR_23
   690  00171E  6E10               	movwf	(lcdString@msg+1)^0,c
   691  001720  ECF5  F00D         	call	_lcdString	;wreg free
   692  001724                     l80:
   693                           
   694                           ;main.c: 193:     while (kpReadKey() != 'S') {
   695  001724  ECBF  F00C         	call	_kpReadKey	;wreg free
   696  001728  0A53               	xorlw	83
   697  00172A  A4D8               	btfss	status,2,c
   698  00172C  EF9A  F00B         	goto	u1911
   699  001730  EF9C  F00B         	goto	u1910
   700  001734                     u1911:
   701  001734  EF7E  F00B         	goto	l2418
   702  001738                     u1910:
   703  001738                     l2424:
   704                           
   705                           ;main.c: 205:         timerReset(5000);
   706  001738  0E13               	movlw	19
   707  00173A  6E02               	movwf	(timerReset@tempo+1)^0,c
   708  00173C  0E88               	movlw	136
   709  00173E  6E01               	movwf	timerReset@tempo^0,c
   710  001740  EC9B  F00F         	call	_timerReset	;wreg free
   711                           
   712                           ;main.c: 208:         switch (slot) {
   713  001744  EFB4  F00B         	goto	l2440
   714  001748                     l2426:
   715                           
   716                           ;main.c: 210:                 LeTeclado();
   717  001748  EC4E  F003         	call	_LeTeclado	;wreg free
   718  00174C                     
   719                           ;main.c: 211:                 slot = 1;
   720  00174C  0E01               	movlw	1
   721  00174E  6E1B               	movwf	main@slot^0,c
   722                           
   723                           ;main.c: 212:                 break;
   724  001750  EFC9  F00B         	goto	l2442
   725  001754                     l2430:
   726                           
   727                           ;main.c: 215:                 kpDebounce();
   728  001754  EC4F  F00A         	call	_kpDebounce	;wreg free
   729  001758                     
   730                           ;main.c: 216:                 slot = 3;
   731  001758  0E03               	movlw	3
   732  00175A  6E1B               	movwf	main@slot^0,c
   733                           
   734                           ;main.c: 217:                 break;
   735  00175C  EFC9  F00B         	goto	l2442
   736  001760                     l2436:
   737                           
   738                           ;main.c: 221:                 slot = 0;
   739  001760  0E00               	movlw	0
   740  001762  6E1B               	movwf	main@slot^0,c
   741                           
   742                           ;main.c: 222:                 break;
   743  001764  EFC9  F00B         	goto	l2442
   744  001768                     l2440:
   745  001768  501B               	movf	main@slot^0,w,c
   746  00176A  6E19               	movwf	??_main^0,c
   747  00176C  6A1A               	clrf	(??_main+1)^0,c
   748                           
   749                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   750                           ; Switch size 1, requested type "simple"
   751                           ; Number of cases is 1, Range of values is 0 to 0
   752                           ; switch strategies available:
   753                           ; Name         Instructions Cycles
   754                           ; simple_byte            4     3 (average)
   755                           ;	Chosen strategy is simple_byte
   756  00176E  501A               	movf	(??_main+1)^0,w,c
   757  001770  0A00               	xorlw	0	; case 0
   758  001772  B4D8               	btfsc	status,2,c
   759  001774  EFBE  F00B         	goto	l2498
   760  001778  EFB0  F00B         	goto	l2436
   761  00177C                     l2498:
   762                           
   763                           ; Switch size 1, requested type "simple"
   764                           ; Number of cases is 2, Range of values is 0 to 1
   765                           ; switch strategies available:
   766                           ; Name         Instructions Cycles
   767                           ; simple_byte            7     4 (average)
   768                           ;	Chosen strategy is simple_byte
   769  00177C  5019               	movf	??_main^0,w,c
   770  00177E  0A00               	xorlw	0	; case 0
   771  001780  B4D8               	btfsc	status,2,c
   772  001782  EFA4  F00B         	goto	l2426
   773  001786  0A01               	xorlw	1	; case 1
   774  001788  B4D8               	btfsc	status,2,c
   775  00178A  EFAA  F00B         	goto	l2430
   776  00178E  EFB0  F00B         	goto	l2436
   777  001792                     l2442:
   778                           
   779                           ;main.c: 225:         timerWait();
   780  001792  ECD7  F00F         	call	_timerWait	;wreg free
   781                           
   782                           ;main.c: 226:     }
   783  001796  EF9C  F00B         	goto	l2424
   784  00179A  EF00  F000         	goto	start
   785  00179E                     __end_of_main:
   786                           	callstack 0
   787                           
   788 ;; *************** function _timerWait *****************
   789 ;; Defined at:
   790 ;;		line 31 in file "timer.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		None
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         0       0       0       0       0       0       0
   805 ;;      Locals:         0       0       0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0
   807 ;;      Totals:         0       0       0       0       0       0       0
   808 ;;Total ram usage:        0 bytes
   809 ;; Hardware stack levels used: 1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text1
   818  001FAE                     __ptext1:
   819                           	callstack 0
   820  001FAE                     _timerWait:
   821                           	callstack 30
   822  001FAE                     l373:
   823  001FAE  A4F2               	btfss	242,2,c	;volatile
   824  001FB0  EFDC  F00F         	goto	u941
   825  001FB4  EFDE  F00F         	goto	u940
   826  001FB8                     u941:
   827  001FB8  EFD7  F00F         	goto	l373
   828  001FBC                     u940:
   829  001FBC  0012               	return		;funcret
   830  001FBE                     __end_of_timerWait:
   831                           	callstack 0
   832                           
   833 ;; *************** function _timerReset *****************
   834 ;; Defined at:
   835 ;;		line 37 in file "timer.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  tempo           2    0[COMRAM] unsigned int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  ciclos          2    2[COMRAM] unsigned int 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   849 ;;      Params:         2       0       0       0       0       0       0
   850 ;;      Locals:         2       0       0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0
   852 ;;      Totals:         4       0       0       0       0       0       0
   853 ;;Total ram usage:        4 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; This function calls:
   856 ;;		Nothing
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text2
   863  001F36                     __ptext2:
   864                           	callstack 0
   865  001F36                     _timerReset:
   866                           	callstack 30
   867  001F36                     
   868                           ;timer.c: 37: void timerReset(unsigned int tempo);timer.c: 38: {;timer.c: 39:     unsign
      +                          ed int ciclos;;timer.c: 42:     ciclos = tempo * 2;
   869  001F36  90D8               	bcf	status,0,c
   870  001F38  3401               	rlcf	timerReset@tempo^0,w,c
   871  001F3A  6E03               	movwf	timerReset@ciclos^0,c
   872  001F3C  3402               	rlcf	(timerReset@tempo+1)^0,w,c
   873  001F3E  6E04               	movwf	(timerReset@ciclos+1)^0,c
   874  001F40                     
   875                           ;timer.c: 44:  ciclos = 65535 - ciclos;
   876  001F40  1E03               	comf	timerReset@ciclos^0,f,c
   877  001F42  1E04               	comf	(timerReset@ciclos+1)^0,f,c
   878  001F44                     
   879                           ;timer.c: 47:     ciclos -=50;
   880  001F44  0E32               	movlw	50
   881  001F46  5E03               	subwf	timerReset@ciclos^0,f,c
   882  001F48  0E00               	movlw	0
   883  001F4A  5A04               	subwfb	(timerReset@ciclos+1)^0,f,c
   884  001F4C                     
   885                           ;timer.c: 49:  TMR0H = (ciclos >> 8);
   886  001F4C  5004               	movf	(timerReset@ciclos+1)^0,w,c
   887  001F4E  6ED7               	movwf	215,c	;volatile
   888  001F50                     
   889                           ;timer.c: 50:  TMR0L = (ciclos & 0x00FF);
   890  001F50  C003  FFD6         	movff	timerReset@ciclos,4054	;volatile
   891  001F54                     
   892                           ;timer.c: 52:  ((INTCON) &= ~(1<<(2)));
   893  001F54  94F2               	bcf	242,2,c	;volatile
   894  001F56  0012               	return		;funcret
   895  001F58                     __end_of_timerReset:
   896                           	callstack 0
   897                           
   898 ;; *************** function _timerInit *****************
   899 ;; Defined at:
   900 ;;		line 55 in file "timer.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   914 ;;      Params:         0       0       0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0
   917 ;;      Totals:         0       0       0       0       0       0       0
   918 ;;Total ram usage:        0 bytes
   919 ;; Hardware stack levels used: 1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_main
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text3
   928  001FC8                     __ptext3:
   929                           	callstack 0
   930  001FC8                     _timerInit:
   931                           	callstack 30
   932  001FC8                     
   933                           ;timer.c: 57:  T0CON = 0b00001000;
   934  001FC8  0E08               	movlw	8
   935  001FCA  6ED5               	movwf	213,c	;volatile
   936  001FCC                     
   937                           ;timer.c: 58:  ((T0CON) |= (1<<(7)));
   938  001FCC  8ED5               	bsf	213,7,c	;volatile
   939  001FCE  0012               	return		;funcret
   940  001FD0                     __end_of_timerInit:
   941                           	callstack 0
   942                           
   943 ;; *************** function _lcdInit *****************
   944 ;; Defined at:
   945 ;;		line 72 in file "lcd.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   959 ;;      Params:         0       0       0       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0
   962 ;;      Totals:         0       0       0       0       0       0       0
   963 ;;Total ram usage:        0 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; Hardware stack levels required when called: 5
   966 ;; This function calls:
   967 ;;		_delayMicro
   968 ;;		_delayMili
   969 ;;		_lcdCommand
   970 ;;		_pinMode
   971 ;;		_pushNibble
   972 ;;		_soInit
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text4
   979  00179E                     __ptext4:
   980                           	callstack 0
   981  00179E                     _lcdInit:
   982                           	callstack 25
   983  00179E                     
   984                           ;lcd.c: 73:  pinMode(PIN_D4, 0);
   985  00179E  0E00               	movlw	0
   986  0017A0  6E02               	movwf	(pinMode@pin+1)^0,c
   987  0017A2  0E1C               	movlw	28
   988  0017A4  6E01               	movwf	pinMode@pin^0,c
   989  0017A6  0E00               	movlw	0
   990  0017A8  6E04               	movwf	(pinMode@type+1)^0,c
   991  0017AA  0E00               	movlw	0
   992  0017AC  6E03               	movwf	pinMode@type^0,c
   993  0017AE  EC4C  F007         	call	_pinMode	;wreg free
   994                           
   995                           ;lcd.c: 74:  pinMode(PIN_D5, 0);
   996  0017B2  0E00               	movlw	0
   997  0017B4  6E02               	movwf	(pinMode@pin+1)^0,c
   998  0017B6  0E1D               	movlw	29
   999  0017B8  6E01               	movwf	pinMode@pin^0,c
  1000  0017BA  0E00               	movlw	0
  1001  0017BC  6E04               	movwf	(pinMode@type+1)^0,c
  1002  0017BE  0E00               	movlw	0
  1003  0017C0  6E03               	movwf	pinMode@type^0,c
  1004  0017C2  EC4C  F007         	call	_pinMode	;wreg free
  1005                           
  1006                           ;lcd.c: 75:  soInit();
  1007  0017C6  ECB4  F00E         	call	_soInit	;wreg free
  1008                           
  1009                           ;lcd.c: 76:  delayMili(15);
  1010  0017CA  0E00               	movlw	0
  1011  0017CC  6E02               	movwf	(delayMili@a+1)^0,c
  1012  0017CE  0E0F               	movlw	15
  1013  0017D0  6E01               	movwf	delayMili@a^0,c
  1014  0017D2  EC09  F00F         	call	_delayMili	;wreg free
  1015                           
  1016                           ;lcd.c: 78:  pushNibble(0x03, 0);
  1017  0017D6  0E00               	movlw	0
  1018  0017D8  6E0B               	movwf	(pushNibble@rs+1)^0,c
  1019  0017DA  0E00               	movlw	0
  1020  0017DC  6E0A               	movwf	pushNibble@rs^0,c
  1021  0017DE  0E03               	movlw	3
  1022  0017E0  EC62  F00F         	call	_pushNibble
  1023                           
  1024                           ;lcd.c: 79:  delayMili(5);
  1025  0017E4  0E00               	movlw	0
  1026  0017E6  6E02               	movwf	(delayMili@a+1)^0,c
  1027  0017E8  0E05               	movlw	5
  1028  0017EA  6E01               	movwf	delayMili@a^0,c
  1029  0017EC  EC09  F00F         	call	_delayMili	;wreg free
  1030                           
  1031                           ;lcd.c: 80:  pushNibble(0x03, 0);
  1032  0017F0  0E00               	movlw	0
  1033  0017F2  6E0B               	movwf	(pushNibble@rs+1)^0,c
  1034  0017F4  0E00               	movlw	0
  1035  0017F6  6E0A               	movwf	pushNibble@rs^0,c
  1036  0017F8  0E03               	movlw	3
  1037  0017FA  EC62  F00F         	call	_pushNibble
  1038  0017FE                     
  1039                           ;lcd.c: 81:  delayMicro(160);
  1040  0017FE  0E00               	movlw	0
  1041  001800  6E02               	movwf	(delayMicro@a+1)^0,c
  1042  001802  0EA0               	movlw	160
  1043  001804  6E01               	movwf	delayMicro@a^0,c
  1044  001806  ECE9  F00F         	call	_delayMicro	;wreg free
  1045  00180A                     
  1046                           ;lcd.c: 82:  pushNibble(0x03, 0);
  1047  00180A  0E00               	movlw	0
  1048  00180C  6E0B               	movwf	(pushNibble@rs+1)^0,c
  1049  00180E  0E00               	movlw	0
  1050  001810  6E0A               	movwf	pushNibble@rs^0,c
  1051  001812  0E03               	movlw	3
  1052  001814  EC62  F00F         	call	_pushNibble
  1053                           
  1054                           ;lcd.c: 83:  delayMicro(160);
  1055  001818  0E00               	movlw	0
  1056  00181A  6E02               	movwf	(delayMicro@a+1)^0,c
  1057  00181C  0EA0               	movlw	160
  1058  00181E  6E01               	movwf	delayMicro@a^0,c
  1059  001820  ECE9  F00F         	call	_delayMicro	;wreg free
  1060  001824                     
  1061                           ;lcd.c: 85:  pushNibble(0x02, 0);
  1062  001824  0E00               	movlw	0
  1063  001826  6E0B               	movwf	(pushNibble@rs+1)^0,c
  1064  001828  0E00               	movlw	0
  1065  00182A  6E0A               	movwf	pushNibble@rs^0,c
  1066  00182C  0E02               	movlw	2
  1067  00182E  EC62  F00F         	call	_pushNibble
  1068  001832                     
  1069                           ;lcd.c: 86:  delayMili(10);
  1070  001832  0E00               	movlw	0
  1071  001834  6E02               	movwf	(delayMili@a+1)^0,c
  1072  001836  0E0A               	movlw	10
  1073  001838  6E01               	movwf	delayMili@a^0,c
  1074  00183A  EC09  F00F         	call	_delayMili	;wreg free
  1075  00183E                     
  1076                           ;lcd.c: 88:  lcdCommand(0x28);
  1077  00183E  0E28               	movlw	40
  1078  001840  ECBB  F00F         	call	_lcdCommand
  1079  001844                     
  1080                           ;lcd.c: 89:  lcdCommand(0x08 + 0x04);
  1081  001844  0E0C               	movlw	12
  1082  001846  ECBB  F00F         	call	_lcdCommand
  1083  00184A                     
  1084                           ;lcd.c: 90:  lcdCommand(0x01);
  1085  00184A  0E01               	movlw	1
  1086  00184C  ECBB  F00F         	call	_lcdCommand
  1087  001850  0012               	return		;funcret
  1088  001852                     __end_of_lcdInit:
  1089                           	callstack 0
  1090                           
  1091 ;; *************** function _pushNibble *****************
  1092 ;; Defined at:
  1093 ;;		line 25 in file "lcd.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  value           1    wreg     unsigned char 
  1096 ;;  rs              2    9[COMRAM] int 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  value           1   11[COMRAM] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1108 ;;      Params:         2       0       0       0       0       0       0
  1109 ;;      Locals:         1       0       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0
  1111 ;;      Totals:         3       0       0       0       0       0       0
  1112 ;;Total ram usage:        3 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; Hardware stack levels required when called: 3
  1115 ;; This function calls:
  1116 ;;		_digitalWrite
  1117 ;;		_pulseEnablePin
  1118 ;;		_soWrite
  1119 ;; This function is called by:
  1120 ;;		_lcdInit
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text5
  1125  001EC4                     __ptext5:
  1126                           	callstack 0
  1127  001EC4                     _pushNibble:
  1128                           	callstack 26
  1129                           
  1130                           ;incstack = 0
  1131                           ;pushNibble@value stored from wreg
  1132  001EC4  6E0C               	movwf	pushNibble@value^0,c
  1133  001EC6                     
  1134                           ;lcd.c: 26:  soWrite(value);
  1135  001EC6  C00C  F007         	movff	pushNibble@value,soWrite@value
  1136  001ECA  6A08               	clrf	(soWrite@value+1)^0,c
  1137  001ECC  EC48  F00E         	call	_soWrite	;wreg free
  1138                           
  1139                           ;lcd.c: 27:  digitalWrite(PIN_D5, rs);
  1140  001ED0  0E00               	movlw	0
  1141  001ED2  6E02               	movwf	(digitalWrite@pin+1)^0,c
  1142  001ED4  0E1D               	movlw	29
  1143  001ED6  6E01               	movwf	digitalWrite@pin^0,c
  1144  001ED8  C00A  F003         	movff	pushNibble@rs,digitalWrite@value
  1145  001EDC  C00B  F004         	movff	pushNibble@rs+1,digitalWrite@value+1
  1146  001EE0  EC73  F008         	call	_digitalWrite	;wreg free
  1147                           
  1148                           ;lcd.c: 28:  pulseEnablePin();
  1149  001EE4  EC93  F00E         	call	_pulseEnablePin	;wreg free
  1150  001EE8  0012               	return		;funcret
  1151  001EEA                     __end_of_pushNibble:
  1152                           	callstack 0
  1153                           
  1154 ;; *************** function _kpInit *****************
  1155 ;; Defined at:
  1156 ;;		line 54 in file "keypad.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1170 ;;      Params:         0       0       0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0
  1173 ;;      Totals:         0       0       0       0       0       0       0
  1174 ;;Total ram usage:        0 bytes
  1175 ;; Hardware stack levels used: 1
  1176 ;; Hardware stack levels required when called: 2
  1177 ;; This function calls:
  1178 ;;		_pinMode
  1179 ;;		_soInit
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text6
  1186  001DE0                     __ptext6:
  1187                           	callstack 0
  1188  001DE0                     _kpInit:
  1189                           	callstack 28
  1190  001DE0                     
  1191                           ;keypad.c: 55:   soInit();
  1192  001DE0  ECB4  F00E         	call	_soInit	;wreg free
  1193                           
  1194                           ;keypad.c: 56:   pinMode(PIN_B2, 1);
  1195  001DE4  0E00               	movlw	0
  1196  001DE6  6E02               	movwf	(pinMode@pin+1)^0,c
  1197  001DE8  0E0A               	movlw	10
  1198  001DEA  6E01               	movwf	pinMode@pin^0,c
  1199  001DEC  0E00               	movlw	0
  1200  001DEE  6E04               	movwf	(pinMode@type+1)^0,c
  1201  001DF0  0E01               	movlw	1
  1202  001DF2  6E03               	movwf	pinMode@type^0,c
  1203  001DF4  EC4C  F007         	call	_pinMode	;wreg free
  1204                           
  1205                           ;keypad.c: 57:   pinMode(PIN_B1, 1);
  1206  001DF8  0E00               	movlw	0
  1207  001DFA  6E02               	movwf	(pinMode@pin+1)^0,c
  1208  001DFC  0E09               	movlw	9
  1209  001DFE  6E01               	movwf	pinMode@pin^0,c
  1210  001E00  0E00               	movlw	0
  1211  001E02  6E04               	movwf	(pinMode@type+1)^0,c
  1212  001E04  0E01               	movlw	1
  1213  001E06  6E03               	movwf	pinMode@type^0,c
  1214  001E08  EC4C  F007         	call	_pinMode	;wreg free
  1215  001E0C                     
  1216                           ;keypad.c: 58:   ADCON1 = 0b00001100;
  1217  001E0C  0E0C               	movlw	12
  1218  001E0E  6EC1               	movwf	193,c	;volatile
  1219  001E10  0012               	return		;funcret
  1220  001E12                     __end_of_kpInit:
  1221                           	callstack 0
  1222                           
  1223 ;; *************** function _adcInit *****************
  1224 ;; Defined at:
  1225 ;;		line 25 in file "adc.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1239 ;;      Params:         0       0       0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0       0
  1242 ;;      Totals:         0       0       0       0       0       0       0
  1243 ;;Total ram usage:        0 bytes
  1244 ;; Hardware stack levels used: 1
  1245 ;; Hardware stack levels required when called: 1
  1246 ;; This function calls:
  1247 ;;		_pinMode
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text7
  1254  001CDE                     __ptext7:
  1255                           	callstack 0
  1256  001CDE                     _adcInit:
  1257                           	callstack 29
  1258  001CDE                     
  1259                           ;adc.c: 27:     pinMode(PIN_A0, 1);
  1260  001CDE  0E00               	movlw	0
  1261  001CE0  6E02               	movwf	(pinMode@pin+1)^0,c
  1262  001CE2  0E00               	movlw	0
  1263  001CE4  6E01               	movwf	pinMode@pin^0,c
  1264  001CE6  0E00               	movlw	0
  1265  001CE8  6E04               	movwf	(pinMode@type+1)^0,c
  1266  001CEA  0E01               	movlw	1
  1267  001CEC  6E03               	movwf	pinMode@type^0,c
  1268  001CEE  EC4C  F007         	call	_pinMode	;wreg free
  1269                           
  1270                           ;adc.c: 28:     pinMode(PIN_A1, 1);
  1271  001CF2  0E00               	movlw	0
  1272  001CF4  6E02               	movwf	(pinMode@pin+1)^0,c
  1273  001CF6  0E01               	movlw	1
  1274  001CF8  6E01               	movwf	pinMode@pin^0,c
  1275  001CFA  0E00               	movlw	0
  1276  001CFC  6E04               	movwf	(pinMode@type+1)^0,c
  1277  001CFE  0E01               	movlw	1
  1278  001D00  6E03               	movwf	pinMode@type^0,c
  1279  001D02  EC4C  F007         	call	_pinMode	;wreg free
  1280                           
  1281                           ;adc.c: 29:     pinMode(PIN_A2, 1);
  1282  001D06  0E00               	movlw	0
  1283  001D08  6E02               	movwf	(pinMode@pin+1)^0,c
  1284  001D0A  0E02               	movlw	2
  1285  001D0C  6E01               	movwf	pinMode@pin^0,c
  1286  001D0E  0E00               	movlw	0
  1287  001D10  6E04               	movwf	(pinMode@type+1)^0,c
  1288  001D12  0E01               	movlw	1
  1289  001D14  6E03               	movwf	pinMode@type^0,c
  1290  001D16  EC4C  F007         	call	_pinMode	;wreg free
  1291  001D1A                     
  1292                           ;adc.c: 31:     ((ADCON0) |= (1<<(0)));
  1293  001D1A  80C2               	bsf	194,0,c	;volatile
  1294  001D1C                     
  1295                           ;adc.c: 33:     ADCON1 = 0b00001100;
  1296  001D1C  0E0C               	movlw	12
  1297  001D1E  6EC1               	movwf	193,c	;volatile
  1298  001D20                     
  1299                           ;adc.c: 34:     ADCON2 = 0b10101010;
  1300  001D20  0EAA               	movlw	170
  1301  001D22  6EC0               	movwf	192,c	;volatile
  1302  001D24  0012               	return		;funcret
  1303  001D26                     __end_of_adcInit:
  1304                           	callstack 0
  1305                           
  1306 ;; *************** function _LeTeclado *****************
  1307 ;; Defined at:
  1308 ;;		line 24 in file "main.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1322 ;;      Params:         0       0       0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0
  1324 ;;      Temps:          2       0       0       0       0       0       0
  1325 ;;      Totals:         2       0       0       0       0       0       0
  1326 ;;Total ram usage:        2 bytes
  1327 ;; Hardware stack levels used: 1
  1328 ;; Hardware stack levels required when called: 6
  1329 ;; This function calls:
  1330 ;;		___lldiv
  1331 ;;		___llmod
  1332 ;;		_adcRead
  1333 ;;		_atraso_ms
  1334 ;;		_kpDebounce
  1335 ;;		_kpRead
  1336 ;;		_kpReadKey
  1337 ;;		_lcdChar
  1338 ;;		_lcdCommand
  1339 ;;		_lcdPosition
  1340 ;;		_lcdString
  1341 ;;		_pwmInit
  1342 ;;		_pwmSet
  1343 ;;		_ssdInit
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text8
  1350  00069C                     __ptext8:
  1351                           	callstack 0
  1352  00069C                     _LeTeclado:
  1353                           	callstack 24
  1354  00069C                     
  1355                           ;main.c: 28:     if (kpRead() != Leitura) {
  1356  00069C  ECDF  F00F         	call	_kpRead	;wreg free
  1357  0006A0  502A               	movf	_Leitura^0,w,c
  1358  0006A2  1801               	xorwf	?_kpRead^0,w,c
  1359  0006A4  E109               	bnz	u1840
  1360  0006A6  502B               	movf	(_Leitura+1)^0,w,c
  1361  0006A8  1802               	xorwf	(?_kpRead+1)^0,w,c
  1362  0006AA  B4D8               	btfsc	status,2,c
  1363  0006AC  EF5A  F003         	goto	u1841
  1364  0006B0  EF5C  F003         	goto	u1840
  1365  0006B4                     u1841:
  1366  0006B4  EF4B  F007         	goto	l75
  1367  0006B8                     u1840:
  1368  0006B8                     
  1369                           ;main.c: 29:         Leitura = kpRead();
  1370  0006B8  ECDF  F00F         	call	_kpRead	;wreg free
  1371  0006BC  C001  F02A         	movff	?_kpRead,_Leitura
  1372  0006C0  C002  F02B         	movff	?_kpRead+1,_Leitura+1
  1373  0006C4                     
  1374                           ;main.c: 30:         pwmInit();
  1375  0006C4  ECCA  F00F         	call	_pwmInit	;wreg free
  1376  0006C8                     
  1377                           ;main.c: 31:         ssdInit();
  1378  0006C8  ECCA  F00D         	call	_ssdInit	;wreg free
  1379                           
  1380                           ;main.c: 33:         switch (kpReadKey()) {
  1381  0006CC  EF2D  F007         	goto	l2370
  1382  0006D0                     l2198:
  1383                           
  1384                           ;main.c: 35:                 lcdCommand(0x80);
  1385  0006D0  0E80               	movlw	128
  1386  0006D2  ECBB  F00F         	call	_lcdCommand
  1387  0006D6                     
  1388                           ;main.c: 36:                 lcdString("GASOLINA");
  1389  0006D6  0E80               	movlw	low STR_1
  1390  0006D8  6E0F               	movwf	lcdString@msg^0,c
  1391  0006DA  0E06               	movlw	high STR_1
  1392  0006DC  6E10               	movwf	(lcdString@msg+1)^0,c
  1393  0006DE  ECF5  F00D         	call	_lcdString	;wreg free
  1394  0006E2                     
  1395                           ;main.c: 37:                 atraso_ms(1000);
  1396  0006E2  0E03               	movlw	3
  1397  0006E4  6E02               	movwf	(atraso_ms@num+1)^0,c
  1398  0006E6  0EE8               	movlw	232
  1399  0006E8  6E01               	movwf	atraso_ms@num^0,c
  1400  0006EA  EC6B  F00D         	call	_atraso_ms	;wreg free
  1401  0006EE                     
  1402                           ;main.c: 38:                 lcdCommand(0xC0);
  1403  0006EE  0EC0               	movlw	192
  1404  0006F0  ECBB  F00F         	call	_lcdCommand
  1405  0006F4                     
  1406                           ;main.c: 39:                 lcdString("QUAL O VALOR?");
  1407  0006F4  0E49               	movlw	low STR_2
  1408  0006F6  6E0F               	movwf	lcdString@msg^0,c
  1409  0006F8  0E06               	movlw	high STR_2
  1410  0006FA  6E10               	movwf	(lcdString@msg+1)^0,c
  1411  0006FC  ECF5  F00D         	call	_lcdString	;wreg free
  1412                           
  1413                           ;main.c: 40:                 atraso_ms(1000);
  1414  000700  0E03               	movlw	3
  1415  000702  6E02               	movwf	(atraso_ms@num+1)^0,c
  1416  000704  0EE8               	movlw	232
  1417  000706  6E01               	movwf	atraso_ms@num^0,c
  1418  000708  EC6B  F00D         	call	_atraso_ms	;wreg free
  1419                           
  1420                           ;main.c: 41:                 lcdCommand(0x01);
  1421  00070C  0E01               	movlw	1
  1422  00070E  ECBB  F00F         	call	_lcdCommand
  1423  000712                     l58:
  1424                           
  1425                           ;main.c: 45:                     v = adcRead(0);
  1426  000712  0E00               	movlw	0
  1427  000714  6E02               	movwf	(adcRead@channel+1)^0,c
  1428  000716  0E00               	movlw	0
  1429  000718  6E01               	movwf	adcRead@channel^0,c
  1430  00071A  EC20  F00E         	call	_adcRead	;wreg free
  1431  00071E  C001  F01C         	movff	?_adcRead,_v
  1432  000722  C002  F01D         	movff	?_adcRead+1,_v+1
  1433  000726  0E00               	movlw	0
  1434  000728  BE1D               	btfsc	(_v+1)^0,7,c
  1435  00072A  0EFF               	movlw	-1
  1436  00072C  6E1E               	movwf	(_v+2)^0,c
  1437  00072E  6E1F               	movwf	(_v+3)^0,c
  1438                           
  1439                           ;main.c: 46:                     lcdCommand(0x80);
  1440  000730  0E80               	movlw	128
  1441  000732  ECBB  F00F         	call	_lcdCommand
  1442  000736                     
  1443                           ;main.c: 47:                     lcdString("R$");
  1444  000736  0E97               	movlw	low STR_3
  1445  000738  6E0F               	movwf	lcdString@msg^0,c
  1446  00073A  0E06               	movlw	high STR_3
  1447  00073C  6E10               	movwf	(lcdString@msg+1)^0,c
  1448  00073E  ECF5  F00D         	call	_lcdString	;wreg free
  1449  000742                     
  1450                           ;main.c: 48:                     lcdChar((v / 1000) % 10 + 48);
  1451  000742  0EE8               	movlw	232
  1452  000744  6E05               	movwf	___lldiv@divisor^0,c
  1453  000746  0E03               	movlw	3
  1454  000748  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1455  00074A  0E00               	movlw	0
  1456  00074C  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1457  00074E  0E00               	movlw	0
  1458  000750  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1459  000752  C01C  F001         	movff	_v,___lldiv@dividend
  1460  000756  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1461  00075A  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1462  00075E  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1463  000762  EC29  F00C         	call	___lldiv	;wreg free
  1464  000766  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1465  00076A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1466  00076E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1467  000772  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1468  000776  0E0A               	movlw	10
  1469  000778  6E12               	movwf	___llmod@divisor^0,c
  1470  00077A  0E00               	movlw	0
  1471  00077C  6E13               	movwf	(___llmod@divisor+1)^0,c
  1472  00077E  0E00               	movlw	0
  1473  000780  6E14               	movwf	(___llmod@divisor+2)^0,c
  1474  000782  0E00               	movlw	0
  1475  000784  6E15               	movwf	(___llmod@divisor+3)^0,c
  1476  000786  EC7B  F00C         	call	___llmod	;wreg free
  1477  00078A  500E               	movf	?___llmod^0,w,c
  1478  00078C  0F30               	addlw	48
  1479  00078E  ECAC  F00F         	call	_lcdChar
  1480  000792                     
  1481                           ;main.c: 49:                     lcdChar((v / 100) % 10 + 48);
  1482  000792  0E64               	movlw	100
  1483  000794  6E05               	movwf	___lldiv@divisor^0,c
  1484  000796  0E00               	movlw	0
  1485  000798  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1486  00079A  0E00               	movlw	0
  1487  00079C  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1488  00079E  0E00               	movlw	0
  1489  0007A0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1490  0007A2  C01C  F001         	movff	_v,___lldiv@dividend
  1491  0007A6  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1492  0007AA  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1493  0007AE  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1494  0007B2  EC29  F00C         	call	___lldiv	;wreg free
  1495  0007B6  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1496  0007BA  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1497  0007BE  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1498  0007C2  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1499  0007C6  0E0A               	movlw	10
  1500  0007C8  6E12               	movwf	___llmod@divisor^0,c
  1501  0007CA  0E00               	movlw	0
  1502  0007CC  6E13               	movwf	(___llmod@divisor+1)^0,c
  1503  0007CE  0E00               	movlw	0
  1504  0007D0  6E14               	movwf	(___llmod@divisor+2)^0,c
  1505  0007D2  0E00               	movlw	0
  1506  0007D4  6E15               	movwf	(___llmod@divisor+3)^0,c
  1507  0007D6  EC7B  F00C         	call	___llmod	;wreg free
  1508  0007DA  500E               	movf	?___llmod^0,w,c
  1509  0007DC  0F30               	addlw	48
  1510  0007DE  ECAC  F00F         	call	_lcdChar
  1511  0007E2                     
  1512                           ;main.c: 50:                     lcdChar((v / 10) % 10 + 48);
  1513  0007E2  0E0A               	movlw	10
  1514  0007E4  6E05               	movwf	___lldiv@divisor^0,c
  1515  0007E6  0E00               	movlw	0
  1516  0007E8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1517  0007EA  0E00               	movlw	0
  1518  0007EC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1519  0007EE  0E00               	movlw	0
  1520  0007F0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1521  0007F2  C01C  F001         	movff	_v,___lldiv@dividend
  1522  0007F6  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1523  0007FA  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1524  0007FE  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1525  000802  EC29  F00C         	call	___lldiv	;wreg free
  1526  000806  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1527  00080A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1528  00080E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1529  000812  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1530  000816  0E0A               	movlw	10
  1531  000818  6E12               	movwf	___llmod@divisor^0,c
  1532  00081A  0E00               	movlw	0
  1533  00081C  6E13               	movwf	(___llmod@divisor+1)^0,c
  1534  00081E  0E00               	movlw	0
  1535  000820  6E14               	movwf	(___llmod@divisor+2)^0,c
  1536  000822  0E00               	movlw	0
  1537  000824  6E15               	movwf	(___llmod@divisor+3)^0,c
  1538  000826  EC7B  F00C         	call	___llmod	;wreg free
  1539  00082A  500E               	movf	?___llmod^0,w,c
  1540  00082C  0F30               	addlw	48
  1541  00082E  ECAC  F00F         	call	_lcdChar
  1542  000832                     
  1543                           ;main.c: 51:                     lcdChar(v % 10 + 48);
  1544  000832  C01C  F00E         	movff	_v,___llmod@dividend
  1545  000836  C01D  F00F         	movff	_v+1,___llmod@dividend+1
  1546  00083A  C01E  F010         	movff	_v+2,___llmod@dividend+2
  1547  00083E  C01F  F011         	movff	_v+3,___llmod@dividend+3
  1548  000842  0E0A               	movlw	10
  1549  000844  6E12               	movwf	___llmod@divisor^0,c
  1550  000846  0E00               	movlw	0
  1551  000848  6E13               	movwf	(___llmod@divisor+1)^0,c
  1552  00084A  0E00               	movlw	0
  1553  00084C  6E14               	movwf	(___llmod@divisor+2)^0,c
  1554  00084E  0E00               	movlw	0
  1555  000850  6E15               	movwf	(___llmod@divisor+3)^0,c
  1556  000852  EC7B  F00C         	call	___llmod	;wreg free
  1557  000856  500E               	movf	?___llmod^0,w,c
  1558  000858  0F30               	addlw	48
  1559  00085A  ECAC  F00F         	call	_lcdChar
  1560  00085E                     
  1561                           ;main.c: 52:                     lcdPosition(1, 0);
  1562  00085E  0E00               	movlw	0
  1563  000860  6E10               	movwf	(lcdPosition@line+1)^0,c
  1564  000862  0E01               	movlw	1
  1565  000864  6E0F               	movwf	lcdPosition@line^0,c
  1566  000866  0E00               	movlw	0
  1567  000868  6E12               	movwf	(lcdPosition@col+1)^0,c
  1568  00086A  0E00               	movlw	0
  1569  00086C  6E11               	movwf	lcdPosition@col^0,c
  1570  00086E  ECD3  F00E         	call	_lcdPosition	;wreg free
  1571  000872                     
  1572                           ;main.c: 54:                     if (kpRead() != tecla)
  1573  000872  5032               	movf	_tecla^0,w,c
  1574  000874  6E17               	movwf	??_LeTeclado^0,c
  1575  000876  6A18               	clrf	(??_LeTeclado+1)^0,c
  1576  000878  ECDF  F00F         	call	_kpRead	;wreg free
  1577  00087C  5017               	movf	??_LeTeclado^0,w,c
  1578  00087E  1801               	xorwf	?_kpRead^0,w,c
  1579  000880  E109               	bnz	u1850
  1580  000882  5018               	movf	(??_LeTeclado+1)^0,w,c
  1581  000884  1802               	xorwf	(?_kpRead+1)^0,w,c
  1582  000886  B4D8               	btfsc	status,2,c
  1583  000888  EF48  F004         	goto	u1851
  1584  00088C  EF4A  F004         	goto	u1850
  1585  000890                     u1851:
  1586  000890  EF4E  F004         	goto	l2224
  1587  000894                     u1850:
  1588  000894                     
  1589                           ;main.c: 55:                         tecla = kpRead();
  1590  000894  ECDF  F00F         	call	_kpRead	;wreg free
  1591  000898  5001               	movf	?_kpRead^0,w,c
  1592  00089A  6E32               	movwf	_tecla^0,c
  1593  00089C                     l2224:
  1594                           
  1595                           ;main.c: 56:                     if (((tecla) & (1<<(6)))) {
  1596  00089C  AC32               	btfss	_tecla^0,6,c
  1597  00089E  EF53  F004         	goto	u1861
  1598  0008A2  EF55  F004         	goto	u1860
  1599  0008A6                     u1861:
  1600  0008A6  EF57  F004         	goto	l2228
  1601  0008AA                     u1860:
  1602  0008AA  EF5B  F004         	goto	l2230
  1603  0008AE                     l2228:
  1604                           
  1605                           ;main.c: 60:                     kpDebounce();
  1606  0008AE  EC4F  F00A         	call	_kpDebounce	;wreg free
  1607                           
  1608                           ;main.c: 62:                 }
  1609  0008B2  EF89  F003         	goto	l58
  1610  0008B6                     l2230:
  1611                           
  1612                           ;main.c: 63:                 lcdCommand(0x01);
  1613  0008B6  0E01               	movlw	1
  1614  0008B8  ECBB  F00F         	call	_lcdCommand
  1615  0008BC                     
  1616                           ;main.c: 64:                 lcdString("AGUARDE......");
  1617  0008BC  0E3B               	movlw	low STR_4
  1618  0008BE  6E0F               	movwf	lcdString@msg^0,c
  1619  0008C0  0E06               	movlw	high STR_4
  1620  0008C2  6E10               	movwf	(lcdString@msg+1)^0,c
  1621  0008C4  ECF5  F00D         	call	_lcdString	;wreg free
  1622  0008C8                     
  1623                           ;main.c: 65:                 atraso_ms(2000);
  1624  0008C8  0E07               	movlw	7
  1625  0008CA  6E02               	movwf	(atraso_ms@num+1)^0,c
  1626  0008CC  0ED0               	movlw	208
  1627  0008CE  6E01               	movwf	atraso_ms@num^0,c
  1628  0008D0  EC6B  F00D         	call	_atraso_ms	;wreg free
  1629  0008D4                     
  1630                           ;main.c: 66:                 lcdCommand(0x01);
  1631  0008D4  0E01               	movlw	1
  1632  0008D6  ECBB  F00F         	call	_lcdCommand
  1633  0008DA                     
  1634                           ;main.c: 67:                 lcdString("Abastecendo....");
  1635  0008DA  0E1B               	movlw	low STR_5
  1636  0008DC  6E0F               	movwf	lcdString@msg^0,c
  1637  0008DE  0E06               	movlw	high STR_5
  1638  0008E0  6E10               	movwf	(lcdString@msg+1)^0,c
  1639  0008E2  ECF5  F00D         	call	_lcdString	;wreg free
  1640                           
  1641                           ;main.c: 68:                 atraso_ms(2000);
  1642  0008E6  0E07               	movlw	7
  1643  0008E8  6E02               	movwf	(atraso_ms@num+1)^0,c
  1644  0008EA  0ED0               	movlw	208
  1645  0008EC  6E01               	movwf	atraso_ms@num^0,c
  1646  0008EE  EC6B  F00D         	call	_atraso_ms	;wreg free
  1647                           
  1648                           ;main.c: 69:                 lcdCommand(0x01);
  1649  0008F2  0E01               	movlw	1
  1650  0008F4  ECBB  F00F         	call	_lcdCommand
  1651  0008F8                     
  1652                           ;main.c: 70:                 lcdString("VEICULO ");
  1653  0008F8  0E77               	movlw	low STR_6
  1654  0008FA  6E0F               	movwf	lcdString@msg^0,c
  1655  0008FC  0E06               	movlw	high STR_6
  1656  0008FE  6E10               	movwf	(lcdString@msg+1)^0,c
  1657  000900  ECF5  F00D         	call	_lcdString	;wreg free
  1658  000904                     
  1659                           ;main.c: 71:                 lcdPosition(1,0);
  1660  000904  0E00               	movlw	0
  1661  000906  6E10               	movwf	(lcdPosition@line+1)^0,c
  1662  000908  0E01               	movlw	1
  1663  00090A  6E0F               	movwf	lcdPosition@line^0,c
  1664  00090C  0E00               	movlw	0
  1665  00090E  6E12               	movwf	(lcdPosition@col+1)^0,c
  1666  000910  0E00               	movlw	0
  1667  000912  6E11               	movwf	lcdPosition@col^0,c
  1668  000914  ECD3  F00E         	call	_lcdPosition	;wreg free
  1669                           
  1670                           ;main.c: 72:                 lcdString("ABASTECIDO");
  1671  000918  0E57               	movlw	low STR_7
  1672  00091A  6E0F               	movwf	lcdString@msg^0,c
  1673  00091C  0E06               	movlw	high STR_7
  1674  00091E  6E10               	movwf	(lcdString@msg+1)^0,c
  1675  000920  ECF5  F00D         	call	_lcdString	;wreg free
  1676  000924                     
  1677                           ;main.c: 73:                 PORTD = LED;
  1678  000924  0E34               	movlw	low (low _LED)
  1679  000926  6E83               	movwf	131,c	;volatile
  1680  000928                     
  1681                           ;main.c: 74:                 pwmSet(100);
  1682  000928  0E64               	movlw	100
  1683  00092A  EC35  F00D         	call	_pwmSet
  1684  00092E                     
  1685                           ;main.c: 75:                 atraso_ms(1500);
  1686  00092E  0E05               	movlw	5
  1687  000930  6E02               	movwf	(atraso_ms@num+1)^0,c
  1688  000932  0EDC               	movlw	220
  1689  000934  6E01               	movwf	atraso_ms@num^0,c
  1690  000936  EC6B  F00D         	call	_atraso_ms	;wreg free
  1691  00093A                     
  1692                           ;main.c: 76:                 pwmSet(0);
  1693  00093A  0E00               	movlw	0
  1694  00093C  EC35  F00D         	call	_pwmSet
  1695  000940                     
  1696                           ;main.c: 77:                 lcdCommand(0x01);
  1697  000940  0E01               	movlw	1
  1698  000942  ECBB  F00F         	call	_lcdCommand
  1699                           
  1700                           ;main.c: 78:                 break;
  1701  000946  EF4B  F007         	goto	l75
  1702  00094A                     l2254:
  1703                           
  1704                           ;main.c: 80:                 lcdCommand(0x01);
  1705  00094A  0E01               	movlw	1
  1706  00094C  ECBB  F00F         	call	_lcdCommand
  1707                           
  1708                           ;main.c: 81:                 lcdCommand(0x80);
  1709  000950  0E80               	movlw	128
  1710  000952  ECBB  F00F         	call	_lcdCommand
  1711  000956                     
  1712                           ;main.c: 82:                 lcdString("ALCOOL");
  1713  000956  0E90               	movlw	low STR_8
  1714  000958  6E0F               	movwf	lcdString@msg^0,c
  1715  00095A  0E06               	movlw	high STR_8
  1716  00095C  6E10               	movwf	(lcdString@msg+1)^0,c
  1717  00095E  ECF5  F00D         	call	_lcdString	;wreg free
  1718  000962                     
  1719                           ;main.c: 83:                 atraso_ms(1000);
  1720  000962  0E03               	movlw	3
  1721  000964  6E02               	movwf	(atraso_ms@num+1)^0,c
  1722  000966  0EE8               	movlw	232
  1723  000968  6E01               	movwf	atraso_ms@num^0,c
  1724  00096A  EC6B  F00D         	call	_atraso_ms	;wreg free
  1725  00096E                     
  1726                           ;main.c: 84:                 lcdCommand(0xC0);
  1727  00096E  0EC0               	movlw	192
  1728  000970  ECBB  F00F         	call	_lcdCommand
  1729  000974                     
  1730                           ;main.c: 85:                 lcdString("QUANTOS LITROS?");
  1731  000974  0E2B               	movlw	low STR_9
  1732  000976  6E0F               	movwf	lcdString@msg^0,c
  1733  000978  0E06               	movlw	high STR_9
  1734  00097A  6E10               	movwf	(lcdString@msg+1)^0,c
  1735  00097C  ECF5  F00D         	call	_lcdString	;wreg free
  1736                           
  1737                           ;main.c: 86:                 atraso_ms(1500);
  1738  000980  0E05               	movlw	5
  1739  000982  6E02               	movwf	(atraso_ms@num+1)^0,c
  1740  000984  0EDC               	movlw	220
  1741  000986  6E01               	movwf	atraso_ms@num^0,c
  1742  000988  EC6B  F00D         	call	_atraso_ms	;wreg free
  1743                           
  1744                           ;main.c: 87:                 lcdCommand(0x01);
  1745  00098C  0E01               	movlw	1
  1746  00098E  ECBB  F00F         	call	_lcdCommand
  1747  000992                     l64:
  1748                           
  1749                           ;main.c: 90:                     v = adcRead(0);
  1750  000992  0E00               	movlw	0
  1751  000994  6E02               	movwf	(adcRead@channel+1)^0,c
  1752  000996  0E00               	movlw	0
  1753  000998  6E01               	movwf	adcRead@channel^0,c
  1754  00099A  EC20  F00E         	call	_adcRead	;wreg free
  1755  00099E  C001  F01C         	movff	?_adcRead,_v
  1756  0009A2  C002  F01D         	movff	?_adcRead+1,_v+1
  1757  0009A6  0E00               	movlw	0
  1758  0009A8  BE1D               	btfsc	(_v+1)^0,7,c
  1759  0009AA  0EFF               	movlw	-1
  1760  0009AC  6E1E               	movwf	(_v+2)^0,c
  1761  0009AE  6E1F               	movwf	(_v+3)^0,c
  1762                           
  1763                           ;main.c: 91:                     lcdCommand(0x80);
  1764  0009B0  0E80               	movlw	128
  1765  0009B2  ECBB  F00F         	call	_lcdCommand
  1766  0009B6                     
  1767                           ;main.c: 92:                     lcdString("R$");
  1768  0009B6  0E97               	movlw	low STR_3
  1769  0009B8  6E0F               	movwf	lcdString@msg^0,c
  1770  0009BA  0E06               	movlw	high STR_3
  1771  0009BC  6E10               	movwf	(lcdString@msg+1)^0,c
  1772  0009BE  ECF5  F00D         	call	_lcdString	;wreg free
  1773  0009C2                     
  1774                           ;main.c: 93:                     lcdChar((v / 1000) % 10 + 48);
  1775  0009C2  0EE8               	movlw	232
  1776  0009C4  6E05               	movwf	___lldiv@divisor^0,c
  1777  0009C6  0E03               	movlw	3
  1778  0009C8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1779  0009CA  0E00               	movlw	0
  1780  0009CC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1781  0009CE  0E00               	movlw	0
  1782  0009D0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1783  0009D2  C01C  F001         	movff	_v,___lldiv@dividend
  1784  0009D6  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1785  0009DA  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1786  0009DE  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1787  0009E2  EC29  F00C         	call	___lldiv	;wreg free
  1788  0009E6  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1789  0009EA  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1790  0009EE  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1791  0009F2  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1792  0009F6  0E0A               	movlw	10
  1793  0009F8  6E12               	movwf	___llmod@divisor^0,c
  1794  0009FA  0E00               	movlw	0
  1795  0009FC  6E13               	movwf	(___llmod@divisor+1)^0,c
  1796  0009FE  0E00               	movlw	0
  1797  000A00  6E14               	movwf	(___llmod@divisor+2)^0,c
  1798  000A02  0E00               	movlw	0
  1799  000A04  6E15               	movwf	(___llmod@divisor+3)^0,c
  1800  000A06  EC7B  F00C         	call	___llmod	;wreg free
  1801  000A0A  500E               	movf	?___llmod^0,w,c
  1802  000A0C  0F30               	addlw	48
  1803  000A0E  ECAC  F00F         	call	_lcdChar
  1804  000A12                     
  1805                           ;main.c: 94:                     lcdChar((v / 100) % 10 + 48);
  1806  000A12  0E64               	movlw	100
  1807  000A14  6E05               	movwf	___lldiv@divisor^0,c
  1808  000A16  0E00               	movlw	0
  1809  000A18  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1810  000A1A  0E00               	movlw	0
  1811  000A1C  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1812  000A1E  0E00               	movlw	0
  1813  000A20  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1814  000A22  C01C  F001         	movff	_v,___lldiv@dividend
  1815  000A26  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1816  000A2A  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1817  000A2E  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1818  000A32  EC29  F00C         	call	___lldiv	;wreg free
  1819  000A36  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1820  000A3A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1821  000A3E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1822  000A42  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1823  000A46  0E0A               	movlw	10
  1824  000A48  6E12               	movwf	___llmod@divisor^0,c
  1825  000A4A  0E00               	movlw	0
  1826  000A4C  6E13               	movwf	(___llmod@divisor+1)^0,c
  1827  000A4E  0E00               	movlw	0
  1828  000A50  6E14               	movwf	(___llmod@divisor+2)^0,c
  1829  000A52  0E00               	movlw	0
  1830  000A54  6E15               	movwf	(___llmod@divisor+3)^0,c
  1831  000A56  EC7B  F00C         	call	___llmod	;wreg free
  1832  000A5A  500E               	movf	?___llmod^0,w,c
  1833  000A5C  0F30               	addlw	48
  1834  000A5E  ECAC  F00F         	call	_lcdChar
  1835  000A62                     
  1836                           ;main.c: 95:                     lcdChar((v / 10) % 10 + 48);
  1837  000A62  0E0A               	movlw	10
  1838  000A64  6E05               	movwf	___lldiv@divisor^0,c
  1839  000A66  0E00               	movlw	0
  1840  000A68  6E06               	movwf	(___lldiv@divisor+1)^0,c
  1841  000A6A  0E00               	movlw	0
  1842  000A6C  6E07               	movwf	(___lldiv@divisor+2)^0,c
  1843  000A6E  0E00               	movlw	0
  1844  000A70  6E08               	movwf	(___lldiv@divisor+3)^0,c
  1845  000A72  C01C  F001         	movff	_v,___lldiv@dividend
  1846  000A76  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  1847  000A7A  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  1848  000A7E  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  1849  000A82  EC29  F00C         	call	___lldiv	;wreg free
  1850  000A86  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1851  000A8A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1852  000A8E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1853  000A92  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1854  000A96  0E0A               	movlw	10
  1855  000A98  6E12               	movwf	___llmod@divisor^0,c
  1856  000A9A  0E00               	movlw	0
  1857  000A9C  6E13               	movwf	(___llmod@divisor+1)^0,c
  1858  000A9E  0E00               	movlw	0
  1859  000AA0  6E14               	movwf	(___llmod@divisor+2)^0,c
  1860  000AA2  0E00               	movlw	0
  1861  000AA4  6E15               	movwf	(___llmod@divisor+3)^0,c
  1862  000AA6  EC7B  F00C         	call	___llmod	;wreg free
  1863  000AAA  500E               	movf	?___llmod^0,w,c
  1864  000AAC  0F30               	addlw	48
  1865  000AAE  ECAC  F00F         	call	_lcdChar
  1866  000AB2                     
  1867                           ;main.c: 96:                     lcdChar(v % 10 + 48);
  1868  000AB2  C01C  F00E         	movff	_v,___llmod@dividend
  1869  000AB6  C01D  F00F         	movff	_v+1,___llmod@dividend+1
  1870  000ABA  C01E  F010         	movff	_v+2,___llmod@dividend+2
  1871  000ABE  C01F  F011         	movff	_v+3,___llmod@dividend+3
  1872  000AC2  0E0A               	movlw	10
  1873  000AC4  6E12               	movwf	___llmod@divisor^0,c
  1874  000AC6  0E00               	movlw	0
  1875  000AC8  6E13               	movwf	(___llmod@divisor+1)^0,c
  1876  000ACA  0E00               	movlw	0
  1877  000ACC  6E14               	movwf	(___llmod@divisor+2)^0,c
  1878  000ACE  0E00               	movlw	0
  1879  000AD0  6E15               	movwf	(___llmod@divisor+3)^0,c
  1880  000AD2  EC7B  F00C         	call	___llmod	;wreg free
  1881  000AD6  500E               	movf	?___llmod^0,w,c
  1882  000AD8  0F30               	addlw	48
  1883  000ADA  ECAC  F00F         	call	_lcdChar
  1884  000ADE                     
  1885                           ;main.c: 97:                     lcdPosition(1, 0);
  1886  000ADE  0E00               	movlw	0
  1887  000AE0  6E10               	movwf	(lcdPosition@line+1)^0,c
  1888  000AE2  0E01               	movlw	1
  1889  000AE4  6E0F               	movwf	lcdPosition@line^0,c
  1890  000AE6  0E00               	movlw	0
  1891  000AE8  6E12               	movwf	(lcdPosition@col+1)^0,c
  1892  000AEA  0E00               	movlw	0
  1893  000AEC  6E11               	movwf	lcdPosition@col^0,c
  1894  000AEE  ECD3  F00E         	call	_lcdPosition	;wreg free
  1895  000AF2                     
  1896                           ;main.c: 99:                     if (kpRead() != tecla)
  1897  000AF2  5032               	movf	_tecla^0,w,c
  1898  000AF4  6E17               	movwf	??_LeTeclado^0,c
  1899  000AF6  6A18               	clrf	(??_LeTeclado+1)^0,c
  1900  000AF8  ECDF  F00F         	call	_kpRead	;wreg free
  1901  000AFC  5017               	movf	??_LeTeclado^0,w,c
  1902  000AFE  1801               	xorwf	?_kpRead^0,w,c
  1903  000B00  E109               	bnz	u1870
  1904  000B02  5018               	movf	(??_LeTeclado+1)^0,w,c
  1905  000B04  1802               	xorwf	(?_kpRead+1)^0,w,c
  1906  000B06  B4D8               	btfsc	status,2,c
  1907  000B08  EF88  F005         	goto	u1871
  1908  000B0C  EF8A  F005         	goto	u1870
  1909  000B10                     u1871:
  1910  000B10  EF8E  F005         	goto	l2280
  1911  000B14                     u1870:
  1912  000B14                     
  1913                           ;main.c: 100:                         tecla = kpRead();
  1914  000B14  ECDF  F00F         	call	_kpRead	;wreg free
  1915  000B18  5001               	movf	?_kpRead^0,w,c
  1916  000B1A  6E32               	movwf	_tecla^0,c
  1917  000B1C                     l2280:
  1918                           
  1919                           ;main.c: 101:                     if (((tecla) & (1<<(6)))) {
  1920  000B1C  AC32               	btfss	_tecla^0,6,c
  1921  000B1E  EF93  F005         	goto	u1881
  1922  000B22  EF95  F005         	goto	u1880
  1923  000B26                     u1881:
  1924  000B26  EF97  F005         	goto	l2284
  1925  000B2A                     u1880:
  1926  000B2A  EF9B  F005         	goto	l2286
  1927  000B2E                     l2284:
  1928                           
  1929                           ;main.c: 105:                     kpDebounce();
  1930  000B2E  EC4F  F00A         	call	_kpDebounce	;wreg free
  1931                           
  1932                           ;main.c: 107:                 }
  1933  000B32  EFC9  F004         	goto	l64
  1934  000B36                     l2286:
  1935                           
  1936                           ;main.c: 108:                 lcdCommand(0x01);
  1937  000B36  0E01               	movlw	1
  1938  000B38  ECBB  F00F         	call	_lcdCommand
  1939  000B3C                     
  1940                           ;main.c: 109:                 lcdString("AGUARDE......");
  1941  000B3C  0E3B               	movlw	low STR_4
  1942  000B3E  6E0F               	movwf	lcdString@msg^0,c
  1943  000B40  0E06               	movlw	high STR_4
  1944  000B42  6E10               	movwf	(lcdString@msg+1)^0,c
  1945  000B44  ECF5  F00D         	call	_lcdString	;wreg free
  1946  000B48                     
  1947                           ;main.c: 110:                atraso_ms(2000);
  1948  000B48  0E07               	movlw	7
  1949  000B4A  6E02               	movwf	(atraso_ms@num+1)^0,c
  1950  000B4C  0ED0               	movlw	208
  1951  000B4E  6E01               	movwf	atraso_ms@num^0,c
  1952  000B50  EC6B  F00D         	call	_atraso_ms	;wreg free
  1953  000B54                     
  1954                           ;main.c: 111:                 lcdCommand(0x01);
  1955  000B54  0E01               	movlw	1
  1956  000B56  ECBB  F00F         	call	_lcdCommand
  1957  000B5A                     
  1958                           ;main.c: 112:                 lcdString("Abastecendo....");
  1959  000B5A  0E1B               	movlw	low STR_5
  1960  000B5C  6E0F               	movwf	lcdString@msg^0,c
  1961  000B5E  0E06               	movlw	high STR_5
  1962  000B60  6E10               	movwf	(lcdString@msg+1)^0,c
  1963  000B62  ECF5  F00D         	call	_lcdString	;wreg free
  1964                           
  1965                           ;main.c: 113:                 atraso_ms(2000);
  1966  000B66  0E07               	movlw	7
  1967  000B68  6E02               	movwf	(atraso_ms@num+1)^0,c
  1968  000B6A  0ED0               	movlw	208
  1969  000B6C  6E01               	movwf	atraso_ms@num^0,c
  1970  000B6E  EC6B  F00D         	call	_atraso_ms	;wreg free
  1971                           
  1972                           ;main.c: 114:                 lcdCommand(0x01);
  1973  000B72  0E01               	movlw	1
  1974  000B74  ECBB  F00F         	call	_lcdCommand
  1975  000B78                     
  1976                           ;main.c: 115:                 lcdString("VEICULO ");
  1977  000B78  0E77               	movlw	low STR_6
  1978  000B7A  6E0F               	movwf	lcdString@msg^0,c
  1979  000B7C  0E06               	movlw	high STR_6
  1980  000B7E  6E10               	movwf	(lcdString@msg+1)^0,c
  1981  000B80  ECF5  F00D         	call	_lcdString	;wreg free
  1982  000B84                     
  1983                           ;main.c: 116:                 lcdPosition(1,0);
  1984  000B84  0E00               	movlw	0
  1985  000B86  6E10               	movwf	(lcdPosition@line+1)^0,c
  1986  000B88  0E01               	movlw	1
  1987  000B8A  6E0F               	movwf	lcdPosition@line^0,c
  1988  000B8C  0E00               	movlw	0
  1989  000B8E  6E12               	movwf	(lcdPosition@col+1)^0,c
  1990  000B90  0E00               	movlw	0
  1991  000B92  6E11               	movwf	lcdPosition@col^0,c
  1992  000B94  ECD3  F00E         	call	_lcdPosition	;wreg free
  1993                           
  1994                           ;main.c: 117:                 lcdString("ABASTECIDO");
  1995  000B98  0E57               	movlw	low STR_7
  1996  000B9A  6E0F               	movwf	lcdString@msg^0,c
  1997  000B9C  0E06               	movlw	high STR_7
  1998  000B9E  6E10               	movwf	(lcdString@msg+1)^0,c
  1999  000BA0  ECF5  F00D         	call	_lcdString	;wreg free
  2000  000BA4                     
  2001                           ;main.c: 118:                 PORTD = LED;
  2002  000BA4  0E34               	movlw	low (low _LED)
  2003  000BA6  6E83               	movwf	131,c	;volatile
  2004  000BA8                     
  2005                           ;main.c: 119:                 pwmSet(100);
  2006  000BA8  0E64               	movlw	100
  2007  000BAA  EC35  F00D         	call	_pwmSet
  2008  000BAE                     
  2009                           ;main.c: 120:                 atraso_ms(1500);
  2010  000BAE  0E05               	movlw	5
  2011  000BB0  6E02               	movwf	(atraso_ms@num+1)^0,c
  2012  000BB2  0EDC               	movlw	220
  2013  000BB4  6E01               	movwf	atraso_ms@num^0,c
  2014  000BB6  EC6B  F00D         	call	_atraso_ms	;wreg free
  2015  000BBA                     
  2016                           ;main.c: 121:                 pwmSet(0);
  2017  000BBA  0E00               	movlw	0
  2018  000BBC  EC35  F00D         	call	_pwmSet
  2019  000BC0                     
  2020                           ;main.c: 122:                 lcdCommand(0x01);
  2021  000BC0  0E01               	movlw	1
  2022  000BC2  ECBB  F00F         	call	_lcdCommand
  2023                           
  2024                           ;main.c: 125:                 break;
  2025  000BC6  EF4B  F007         	goto	l75
  2026  000BCA                     l2310:
  2027                           
  2028                           ;main.c: 127:                 lcdCommand(0x01);
  2029  000BCA  0E01               	movlw	1
  2030  000BCC  ECBB  F00F         	call	_lcdCommand
  2031                           
  2032                           ;main.c: 128:                 lcdCommand(0x80);
  2033  000BD0  0E80               	movlw	128
  2034  000BD2  ECBB  F00F         	call	_lcdCommand
  2035  000BD6                     
  2036                           ;main.c: 129:                 lcdString("DIESEL");
  2037  000BD6  0E89               	movlw	low STR_15
  2038  000BD8  6E0F               	movwf	lcdString@msg^0,c
  2039  000BDA  0E06               	movlw	high STR_15
  2040  000BDC  6E10               	movwf	(lcdString@msg+1)^0,c
  2041  000BDE  ECF5  F00D         	call	_lcdString	;wreg free
  2042  000BE2                     
  2043                           ;main.c: 130:                 atraso_ms(1000);
  2044  000BE2  0E03               	movlw	3
  2045  000BE4  6E02               	movwf	(atraso_ms@num+1)^0,c
  2046  000BE6  0EE8               	movlw	232
  2047  000BE8  6E01               	movwf	atraso_ms@num^0,c
  2048  000BEA  EC6B  F00D         	call	_atraso_ms	;wreg free
  2049  000BEE                     
  2050                           ;main.c: 131:                 lcdCommand(0xC0);
  2051  000BEE  0EC0               	movlw	192
  2052  000BF0  ECBB  F00F         	call	_lcdCommand
  2053  000BF4                     
  2054                           ;main.c: 132:                 lcdString("QUANTOS LITROS?");
  2055  000BF4  0E2B               	movlw	low STR_9
  2056  000BF6  6E0F               	movwf	lcdString@msg^0,c
  2057  000BF8  0E06               	movlw	high STR_9
  2058  000BFA  6E10               	movwf	(lcdString@msg+1)^0,c
  2059  000BFC  ECF5  F00D         	call	_lcdString	;wreg free
  2060                           
  2061                           ;main.c: 133:                 atraso_ms(1000);
  2062  000C00  0E03               	movlw	3
  2063  000C02  6E02               	movwf	(atraso_ms@num+1)^0,c
  2064  000C04  0EE8               	movlw	232
  2065  000C06  6E01               	movwf	atraso_ms@num^0,c
  2066  000C08  EC6B  F00D         	call	_atraso_ms	;wreg free
  2067                           
  2068                           ;main.c: 134:                 lcdCommand(0x01);
  2069  000C0C  0E01               	movlw	1
  2070  000C0E  ECBB  F00F         	call	_lcdCommand
  2071                           
  2072                           ;main.c: 135:                 lcdCommand(0xC0);
  2073  000C12  0EC0               	movlw	192
  2074  000C14  ECBB  F00F         	call	_lcdCommand
  2075  000C18                     l69:
  2076                           
  2077                           ;main.c: 138:                     v = adcRead(0);
  2078  000C18  0E00               	movlw	0
  2079  000C1A  6E02               	movwf	(adcRead@channel+1)^0,c
  2080  000C1C  0E00               	movlw	0
  2081  000C1E  6E01               	movwf	adcRead@channel^0,c
  2082  000C20  EC20  F00E         	call	_adcRead	;wreg free
  2083  000C24  C001  F01C         	movff	?_adcRead,_v
  2084  000C28  C002  F01D         	movff	?_adcRead+1,_v+1
  2085  000C2C  0E00               	movlw	0
  2086  000C2E  BE1D               	btfsc	(_v+1)^0,7,c
  2087  000C30  0EFF               	movlw	-1
  2088  000C32  6E1E               	movwf	(_v+2)^0,c
  2089  000C34  6E1F               	movwf	(_v+3)^0,c
  2090                           
  2091                           ;main.c: 139:                     lcdCommand(0x80);
  2092  000C36  0E80               	movlw	128
  2093  000C38  ECBB  F00F         	call	_lcdCommand
  2094  000C3C                     
  2095                           ;main.c: 140:                     lcdString("R$");
  2096  000C3C  0E97               	movlw	low STR_3
  2097  000C3E  6E0F               	movwf	lcdString@msg^0,c
  2098  000C40  0E06               	movlw	high STR_3
  2099  000C42  6E10               	movwf	(lcdString@msg+1)^0,c
  2100  000C44  ECF5  F00D         	call	_lcdString	;wreg free
  2101  000C48                     
  2102                           ;main.c: 141:                     lcdChar((v / 1000) % 10 + 48);
  2103  000C48  0EE8               	movlw	232
  2104  000C4A  6E05               	movwf	___lldiv@divisor^0,c
  2105  000C4C  0E03               	movlw	3
  2106  000C4E  6E06               	movwf	(___lldiv@divisor+1)^0,c
  2107  000C50  0E00               	movlw	0
  2108  000C52  6E07               	movwf	(___lldiv@divisor+2)^0,c
  2109  000C54  0E00               	movlw	0
  2110  000C56  6E08               	movwf	(___lldiv@divisor+3)^0,c
  2111  000C58  C01C  F001         	movff	_v,___lldiv@dividend
  2112  000C5C  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  2113  000C60  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  2114  000C64  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  2115  000C68  EC29  F00C         	call	___lldiv	;wreg free
  2116  000C6C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2117  000C70  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2118  000C74  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2119  000C78  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2120  000C7C  0E0A               	movlw	10
  2121  000C7E  6E12               	movwf	___llmod@divisor^0,c
  2122  000C80  0E00               	movlw	0
  2123  000C82  6E13               	movwf	(___llmod@divisor+1)^0,c
  2124  000C84  0E00               	movlw	0
  2125  000C86  6E14               	movwf	(___llmod@divisor+2)^0,c
  2126  000C88  0E00               	movlw	0
  2127  000C8A  6E15               	movwf	(___llmod@divisor+3)^0,c
  2128  000C8C  EC7B  F00C         	call	___llmod	;wreg free
  2129  000C90  500E               	movf	?___llmod^0,w,c
  2130  000C92  0F30               	addlw	48
  2131  000C94  ECAC  F00F         	call	_lcdChar
  2132  000C98                     
  2133                           ;main.c: 142:                     lcdChar((v / 100) % 10 + 48);
  2134  000C98  0E64               	movlw	100
  2135  000C9A  6E05               	movwf	___lldiv@divisor^0,c
  2136  000C9C  0E00               	movlw	0
  2137  000C9E  6E06               	movwf	(___lldiv@divisor+1)^0,c
  2138  000CA0  0E00               	movlw	0
  2139  000CA2  6E07               	movwf	(___lldiv@divisor+2)^0,c
  2140  000CA4  0E00               	movlw	0
  2141  000CA6  6E08               	movwf	(___lldiv@divisor+3)^0,c
  2142  000CA8  C01C  F001         	movff	_v,___lldiv@dividend
  2143  000CAC  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  2144  000CB0  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  2145  000CB4  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  2146  000CB8  EC29  F00C         	call	___lldiv	;wreg free
  2147  000CBC  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2148  000CC0  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2149  000CC4  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2150  000CC8  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2151  000CCC  0E0A               	movlw	10
  2152  000CCE  6E12               	movwf	___llmod@divisor^0,c
  2153  000CD0  0E00               	movlw	0
  2154  000CD2  6E13               	movwf	(___llmod@divisor+1)^0,c
  2155  000CD4  0E00               	movlw	0
  2156  000CD6  6E14               	movwf	(___llmod@divisor+2)^0,c
  2157  000CD8  0E00               	movlw	0
  2158  000CDA  6E15               	movwf	(___llmod@divisor+3)^0,c
  2159  000CDC  EC7B  F00C         	call	___llmod	;wreg free
  2160  000CE0  500E               	movf	?___llmod^0,w,c
  2161  000CE2  0F30               	addlw	48
  2162  000CE4  ECAC  F00F         	call	_lcdChar
  2163  000CE8                     
  2164                           ;main.c: 143:                     lcdChar((v / 10) % 10 + 48);
  2165  000CE8  0E0A               	movlw	10
  2166  000CEA  6E05               	movwf	___lldiv@divisor^0,c
  2167  000CEC  0E00               	movlw	0
  2168  000CEE  6E06               	movwf	(___lldiv@divisor+1)^0,c
  2169  000CF0  0E00               	movlw	0
  2170  000CF2  6E07               	movwf	(___lldiv@divisor+2)^0,c
  2171  000CF4  0E00               	movlw	0
  2172  000CF6  6E08               	movwf	(___lldiv@divisor+3)^0,c
  2173  000CF8  C01C  F001         	movff	_v,___lldiv@dividend
  2174  000CFC  C01D  F002         	movff	_v+1,___lldiv@dividend+1
  2175  000D00  C01E  F003         	movff	_v+2,___lldiv@dividend+2
  2176  000D04  C01F  F004         	movff	_v+3,___lldiv@dividend+3
  2177  000D08  EC29  F00C         	call	___lldiv	;wreg free
  2178  000D0C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2179  000D10  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2180  000D14  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2181  000D18  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2182  000D1C  0E0A               	movlw	10
  2183  000D1E  6E12               	movwf	___llmod@divisor^0,c
  2184  000D20  0E00               	movlw	0
  2185  000D22  6E13               	movwf	(___llmod@divisor+1)^0,c
  2186  000D24  0E00               	movlw	0
  2187  000D26  6E14               	movwf	(___llmod@divisor+2)^0,c
  2188  000D28  0E00               	movlw	0
  2189  000D2A  6E15               	movwf	(___llmod@divisor+3)^0,c
  2190  000D2C  EC7B  F00C         	call	___llmod	;wreg free
  2191  000D30  500E               	movf	?___llmod^0,w,c
  2192  000D32  0F30               	addlw	48
  2193  000D34  ECAC  F00F         	call	_lcdChar
  2194  000D38                     
  2195                           ;main.c: 144:                     lcdChar(v % 10 + 48);
  2196  000D38  C01C  F00E         	movff	_v,___llmod@dividend
  2197  000D3C  C01D  F00F         	movff	_v+1,___llmod@dividend+1
  2198  000D40  C01E  F010         	movff	_v+2,___llmod@dividend+2
  2199  000D44  C01F  F011         	movff	_v+3,___llmod@dividend+3
  2200  000D48  0E0A               	movlw	10
  2201  000D4A  6E12               	movwf	___llmod@divisor^0,c
  2202  000D4C  0E00               	movlw	0
  2203  000D4E  6E13               	movwf	(___llmod@divisor+1)^0,c
  2204  000D50  0E00               	movlw	0
  2205  000D52  6E14               	movwf	(___llmod@divisor+2)^0,c
  2206  000D54  0E00               	movlw	0
  2207  000D56  6E15               	movwf	(___llmod@divisor+3)^0,c
  2208  000D58  EC7B  F00C         	call	___llmod	;wreg free
  2209  000D5C  500E               	movf	?___llmod^0,w,c
  2210  000D5E  0F30               	addlw	48
  2211  000D60  ECAC  F00F         	call	_lcdChar
  2212  000D64                     
  2213                           ;main.c: 145:                     lcdPosition(1, 0);
  2214  000D64  0E00               	movlw	0
  2215  000D66  6E10               	movwf	(lcdPosition@line+1)^0,c
  2216  000D68  0E01               	movlw	1
  2217  000D6A  6E0F               	movwf	lcdPosition@line^0,c
  2218  000D6C  0E00               	movlw	0
  2219  000D6E  6E12               	movwf	(lcdPosition@col+1)^0,c
  2220  000D70  0E00               	movlw	0
  2221  000D72  6E11               	movwf	lcdPosition@col^0,c
  2222  000D74  ECD3  F00E         	call	_lcdPosition	;wreg free
  2223  000D78                     
  2224                           ;main.c: 147:                     if (kpRead() != tecla)
  2225  000D78  5032               	movf	_tecla^0,w,c
  2226  000D7A  6E17               	movwf	??_LeTeclado^0,c
  2227  000D7C  6A18               	clrf	(??_LeTeclado+1)^0,c
  2228  000D7E  ECDF  F00F         	call	_kpRead	;wreg free
  2229  000D82  5017               	movf	??_LeTeclado^0,w,c
  2230  000D84  1801               	xorwf	?_kpRead^0,w,c
  2231  000D86  E109               	bnz	u1890
  2232  000D88  5018               	movf	(??_LeTeclado+1)^0,w,c
  2233  000D8A  1802               	xorwf	(?_kpRead+1)^0,w,c
  2234  000D8C  B4D8               	btfsc	status,2,c
  2235  000D8E  EFCB  F006         	goto	u1891
  2236  000D92  EFCD  F006         	goto	u1890
  2237  000D96                     u1891:
  2238  000D96  EFD1  F006         	goto	l2336
  2239  000D9A                     u1890:
  2240  000D9A                     
  2241                           ;main.c: 148:                         tecla = kpRead();
  2242  000D9A  ECDF  F00F         	call	_kpRead	;wreg free
  2243  000D9E  5001               	movf	?_kpRead^0,w,c
  2244  000DA0  6E32               	movwf	_tecla^0,c
  2245  000DA2                     l2336:
  2246                           
  2247                           ;main.c: 149:                     if (((tecla) & (1<<(6)))) {
  2248  000DA2  AC32               	btfss	_tecla^0,6,c
  2249  000DA4  EFD6  F006         	goto	u1901
  2250  000DA8  EFD8  F006         	goto	u1900
  2251  000DAC                     u1901:
  2252  000DAC  EFDA  F006         	goto	l2340
  2253  000DB0                     u1900:
  2254  000DB0  EFDE  F006         	goto	l2342
  2255  000DB4                     l2340:
  2256                           
  2257                           ;main.c: 153:                     kpDebounce();
  2258  000DB4  EC4F  F00A         	call	_kpDebounce	;wreg free
  2259                           
  2260                           ;main.c: 155:                 }
  2261  000DB8  EF0C  F006         	goto	l69
  2262  000DBC                     l2342:
  2263                           
  2264                           ;main.c: 156:                 lcdCommand(0x01);
  2265  000DBC  0E01               	movlw	1
  2266  000DBE  ECBB  F00F         	call	_lcdCommand
  2267  000DC2                     
  2268                           ;main.c: 157:                 lcdString("AGUARDE......");
  2269  000DC2  0E3B               	movlw	low STR_4
  2270  000DC4  6E0F               	movwf	lcdString@msg^0,c
  2271  000DC6  0E06               	movlw	high STR_4
  2272  000DC8  6E10               	movwf	(lcdString@msg+1)^0,c
  2273  000DCA  ECF5  F00D         	call	_lcdString	;wreg free
  2274  000DCE                     
  2275                           ;main.c: 158:                atraso_ms(2000);
  2276  000DCE  0E07               	movlw	7
  2277  000DD0  6E02               	movwf	(atraso_ms@num+1)^0,c
  2278  000DD2  0ED0               	movlw	208
  2279  000DD4  6E01               	movwf	atraso_ms@num^0,c
  2280  000DD6  EC6B  F00D         	call	_atraso_ms	;wreg free
  2281  000DDA                     
  2282                           ;main.c: 159:                 lcdCommand(0x01);
  2283  000DDA  0E01               	movlw	1
  2284  000DDC  ECBB  F00F         	call	_lcdCommand
  2285  000DE0                     
  2286                           ;main.c: 160:                 lcdString("Abastecendo....");
  2287  000DE0  0E1B               	movlw	low STR_5
  2288  000DE2  6E0F               	movwf	lcdString@msg^0,c
  2289  000DE4  0E06               	movlw	high STR_5
  2290  000DE6  6E10               	movwf	(lcdString@msg+1)^0,c
  2291  000DE8  ECF5  F00D         	call	_lcdString	;wreg free
  2292                           
  2293                           ;main.c: 161:                 atraso_ms(2000);
  2294  000DEC  0E07               	movlw	7
  2295  000DEE  6E02               	movwf	(atraso_ms@num+1)^0,c
  2296  000DF0  0ED0               	movlw	208
  2297  000DF2  6E01               	movwf	atraso_ms@num^0,c
  2298  000DF4  EC6B  F00D         	call	_atraso_ms	;wreg free
  2299                           
  2300                           ;main.c: 162:                 lcdCommand(0x01);
  2301  000DF8  0E01               	movlw	1
  2302  000DFA  ECBB  F00F         	call	_lcdCommand
  2303  000DFE                     
  2304                           ;main.c: 163:                 lcdString("VEICULO ");
  2305  000DFE  0E77               	movlw	low STR_6
  2306  000E00  6E0F               	movwf	lcdString@msg^0,c
  2307  000E02  0E06               	movlw	high STR_6
  2308  000E04  6E10               	movwf	(lcdString@msg+1)^0,c
  2309  000E06  ECF5  F00D         	call	_lcdString	;wreg free
  2310  000E0A                     
  2311                           ;main.c: 164:                 lcdPosition(1,0);
  2312  000E0A  0E00               	movlw	0
  2313  000E0C  6E10               	movwf	(lcdPosition@line+1)^0,c
  2314  000E0E  0E01               	movlw	1
  2315  000E10  6E0F               	movwf	lcdPosition@line^0,c
  2316  000E12  0E00               	movlw	0
  2317  000E14  6E12               	movwf	(lcdPosition@col+1)^0,c
  2318  000E16  0E00               	movlw	0
  2319  000E18  6E11               	movwf	lcdPosition@col^0,c
  2320  000E1A  ECD3  F00E         	call	_lcdPosition	;wreg free
  2321                           
  2322                           ;main.c: 165:                 lcdString("ABASTECIDO");
  2323  000E1E  0E57               	movlw	low STR_7
  2324  000E20  6E0F               	movwf	lcdString@msg^0,c
  2325  000E22  0E06               	movlw	high STR_7
  2326  000E24  6E10               	movwf	(lcdString@msg+1)^0,c
  2327  000E26  ECF5  F00D         	call	_lcdString	;wreg free
  2328  000E2A                     
  2329                           ;main.c: 166:                 PORTD = LED;
  2330  000E2A  0E34               	movlw	low (low _LED)
  2331  000E2C  6E83               	movwf	131,c	;volatile
  2332  000E2E                     
  2333                           ;main.c: 167:                 pwmSet(100);
  2334  000E2E  0E64               	movlw	100
  2335  000E30  EC35  F00D         	call	_pwmSet
  2336  000E34                     
  2337                           ;main.c: 168:                 atraso_ms(1500);
  2338  000E34  0E05               	movlw	5
  2339  000E36  6E02               	movwf	(atraso_ms@num+1)^0,c
  2340  000E38  0EDC               	movlw	220
  2341  000E3A  6E01               	movwf	atraso_ms@num^0,c
  2342  000E3C  EC6B  F00D         	call	_atraso_ms	;wreg free
  2343  000E40                     
  2344                           ;main.c: 169:                 pwmSet(0);
  2345  000E40  0E00               	movlw	0
  2346  000E42  EC35  F00D         	call	_pwmSet
  2347  000E46                     
  2348                           ;main.c: 170:                 lcdCommand(0x01);
  2349  000E46  0E01               	movlw	1
  2350  000E48  ECBB  F00F         	call	_lcdCommand
  2351                           
  2352                           ;main.c: 172:                 break;
  2353  000E4C  EF4B  F007         	goto	l75
  2354  000E50                     l2366:
  2355                           
  2356                           ;main.c: 175:                 lcdCommand(0x01);
  2357  000E50  0E01               	movlw	1
  2358  000E52  ECBB  F00F         	call	_lcdCommand
  2359                           
  2360                           ;main.c: 176:                 break;
  2361  000E56  EF4B  F007         	goto	l75
  2362  000E5A                     l2370:
  2363  000E5A  ECBF  F00C         	call	_kpReadKey	;wreg free
  2364  000E5E  6E17               	movwf	??_LeTeclado^0,c
  2365  000E60  6A18               	clrf	(??_LeTeclado+1)^0,c
  2366                           
  2367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2368                           ; Switch size 1, requested type "simple"
  2369                           ; Number of cases is 1, Range of values is 0 to 0
  2370                           ; switch strategies available:
  2371                           ; Name         Instructions Cycles
  2372                           ; simple_byte            4     3 (average)
  2373                           ;	Chosen strategy is simple_byte
  2374  000E62  5018               	movf	(??_LeTeclado+1)^0,w,c
  2375  000E64  0A00               	xorlw	0	; case 0
  2376  000E66  B4D8               	btfsc	status,2,c
  2377  000E68  EF38  F007         	goto	l2500
  2378  000E6C  EF4B  F007         	goto	l75
  2379  000E70                     l2500:
  2380                           
  2381                           ; Switch size 1, requested type "simple"
  2382                           ; Number of cases is 4, Range of values is 68 to 85
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte           13     7 (average)
  2386                           ;	Chosen strategy is simple_byte
  2387  000E70  5017               	movf	??_LeTeclado^0,w,c
  2388  000E72  0A44               	xorlw	68	; case 68
  2389  000E74  B4D8               	btfsc	status,2,c
  2390  000E76  EFE5  F005         	goto	l2310
  2391  000E7A  0A08               	xorlw	8	; case 76
  2392  000E7C  B4D8               	btfsc	status,2,c
  2393  000E7E  EFA5  F004         	goto	l2254
  2394  000E82  0A1F               	xorlw	31	; case 83
  2395  000E84  B4D8               	btfsc	status,2,c
  2396  000E86  EF28  F007         	goto	l2366
  2397  000E8A  0A06               	xorlw	6	; case 85
  2398  000E8C  B4D8               	btfsc	status,2,c
  2399  000E8E  EF68  F003         	goto	l2198
  2400  000E92  EF4B  F007         	goto	l75
  2401  000E96                     l75:
  2402  000E96  0012               	return		;funcret
  2403  000E98                     __end_of_LeTeclado:
  2404                           	callstack 0
  2405                           
  2406 ;; *************** function _ssdInit *****************
  2407 ;; Defined at:
  2408 ;;		line 94 in file "ssd.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2422 ;;      Params:         0       0       0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0       0       0
  2424 ;;      Temps:          0       0       0       0       0       0       0
  2425 ;;      Totals:         0       0       0       0       0       0       0
  2426 ;;Total ram usage:        0 bytes
  2427 ;; Hardware stack levels used: 1
  2428 ;; Hardware stack levels required when called: 2
  2429 ;; This function calls:
  2430 ;;		_pinMode
  2431 ;;		_soInit
  2432 ;; This function is called by:
  2433 ;;		_LeTeclado
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text9
  2439  001B94                     __ptext9:
  2440                           	callstack 0
  2441  001B94                     _ssdInit:
  2442                           	callstack 28
  2443  001B94                     
  2444                           ;ssd.c: 96:     pinMode(PIN_D0, 0);
  2445  001B94  0E00               	movlw	0
  2446  001B96  6E02               	movwf	(pinMode@pin+1)^0,c
  2447  001B98  0E18               	movlw	24
  2448  001B9A  6E01               	movwf	pinMode@pin^0,c
  2449  001B9C  0E00               	movlw	0
  2450  001B9E  6E04               	movwf	(pinMode@type+1)^0,c
  2451  001BA0  0E00               	movlw	0
  2452  001BA2  6E03               	movwf	pinMode@type^0,c
  2453  001BA4  EC4C  F007         	call	_pinMode	;wreg free
  2454                           
  2455                           ;ssd.c: 97:     pinMode(PIN_D1, 0);
  2456  001BA8  0E00               	movlw	0
  2457  001BAA  6E02               	movwf	(pinMode@pin+1)^0,c
  2458  001BAC  0E19               	movlw	25
  2459  001BAE  6E01               	movwf	pinMode@pin^0,c
  2460  001BB0  0E00               	movlw	0
  2461  001BB2  6E04               	movwf	(pinMode@type+1)^0,c
  2462  001BB4  0E00               	movlw	0
  2463  001BB6  6E03               	movwf	pinMode@type^0,c
  2464  001BB8  EC4C  F007         	call	_pinMode	;wreg free
  2465                           
  2466                           ;ssd.c: 98:     pinMode(PIN_D2, 0);
  2467  001BBC  0E00               	movlw	0
  2468  001BBE  6E02               	movwf	(pinMode@pin+1)^0,c
  2469  001BC0  0E1A               	movlw	26
  2470  001BC2  6E01               	movwf	pinMode@pin^0,c
  2471  001BC4  0E00               	movlw	0
  2472  001BC6  6E04               	movwf	(pinMode@type+1)^0,c
  2473  001BC8  0E00               	movlw	0
  2474  001BCA  6E03               	movwf	pinMode@type^0,c
  2475  001BCC  EC4C  F007         	call	_pinMode	;wreg free
  2476                           
  2477                           ;ssd.c: 99:     pinMode(PIN_D3, 0);
  2478  001BD0  0E00               	movlw	0
  2479  001BD2  6E02               	movwf	(pinMode@pin+1)^0,c
  2480  001BD4  0E1B               	movlw	27
  2481  001BD6  6E01               	movwf	pinMode@pin^0,c
  2482  001BD8  0E00               	movlw	0
  2483  001BDA  6E04               	movwf	(pinMode@type+1)^0,c
  2484  001BDC  0E00               	movlw	0
  2485  001BDE  6E03               	movwf	pinMode@type^0,c
  2486  001BE0  EC4C  F007         	call	_pinMode	;wreg free
  2487                           
  2488                           ;ssd.c: 102:     soInit();
  2489  001BE4  ECB4  F00E         	call	_soInit	;wreg free
  2490  001BE8  0012               	return		;funcret
  2491  001BEA                     __end_of_ssdInit:
  2492                           	callstack 0
  2493                           
  2494 ;; *************** function _soInit *****************
  2495 ;; Defined at:
  2496 ;;		line 3 in file "so.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2510 ;;      Params:         0       0       0       0       0       0       0
  2511 ;;      Locals:         0       0       0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0       0       0
  2513 ;;      Totals:         0       0       0       0       0       0       0
  2514 ;;Total ram usage:        0 bytes
  2515 ;; Hardware stack levels used: 1
  2516 ;; Hardware stack levels required when called: 1
  2517 ;; This function calls:
  2518 ;;		_pinMode
  2519 ;; This function is called by:
  2520 ;;		_kpInit
  2521 ;;		_lcdInit
  2522 ;;		_ssdInit
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text10
  2527  001D68                     __ptext10:
  2528                           	callstack 0
  2529  001D68                     _soInit:
  2530                           	callstack 28
  2531  001D68                     
  2532                           ;so.c: 4:  pinMode(PIN_D7, 0);
  2533  001D68  0E00               	movlw	0
  2534  001D6A  6E02               	movwf	(pinMode@pin+1)^0,c
  2535  001D6C  0E1F               	movlw	31
  2536  001D6E  6E01               	movwf	pinMode@pin^0,c
  2537  001D70  0E00               	movlw	0
  2538  001D72  6E04               	movwf	(pinMode@type+1)^0,c
  2539  001D74  0E00               	movlw	0
  2540  001D76  6E03               	movwf	pinMode@type^0,c
  2541  001D78  EC4C  F007         	call	_pinMode	;wreg free
  2542                           
  2543                           ;so.c: 5:  pinMode(PIN_B0, 0);
  2544  001D7C  0E00               	movlw	0
  2545  001D7E  6E02               	movwf	(pinMode@pin+1)^0,c
  2546  001D80  0E08               	movlw	8
  2547  001D82  6E01               	movwf	pinMode@pin^0,c
  2548  001D84  0E00               	movlw	0
  2549  001D86  6E04               	movwf	(pinMode@type+1)^0,c
  2550  001D88  0E00               	movlw	0
  2551  001D8A  6E03               	movwf	pinMode@type^0,c
  2552  001D8C  EC4C  F007         	call	_pinMode	;wreg free
  2553                           
  2554                           ;so.c: 6:  pinMode(PIN_D6, 0);
  2555  001D90  0E00               	movlw	0
  2556  001D92  6E02               	movwf	(pinMode@pin+1)^0,c
  2557  001D94  0E1E               	movlw	30
  2558  001D96  6E01               	movwf	pinMode@pin^0,c
  2559  001D98  0E00               	movlw	0
  2560  001D9A  6E04               	movwf	(pinMode@type+1)^0,c
  2561  001D9C  0E00               	movlw	0
  2562  001D9E  6E03               	movwf	pinMode@type^0,c
  2563  001DA0  EC4C  F007         	call	_pinMode	;wreg free
  2564  001DA4  0012               	return		;funcret
  2565  001DA6                     __end_of_soInit:
  2566                           	callstack 0
  2567                           
  2568 ;; *************** function _pinMode *****************
  2569 ;; Defined at:
  2570 ;;		line 54 in file "io.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  pin             2    0[COMRAM] int 
  2573 ;;  type            2    2[COMRAM] int 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2585 ;;      Params:         4       0       0       0       0       0       0
  2586 ;;      Locals:         0       0       0       0       0       0       0
  2587 ;;      Temps:          2       0       0       0       0       0       0
  2588 ;;      Totals:         6       0       0       0       0       0       0
  2589 ;;Total ram usage:        6 bytes
  2590 ;; Hardware stack levels used: 1
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_adcInit
  2595 ;;		_kpInit
  2596 ;;		_lcdInit
  2597 ;;		_soInit
  2598 ;;		_ssdInit
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text11
  2603  000E98                     __ptext11:
  2604                           	callstack 0
  2605  000E98                     _pinMode:
  2606                           	callstack 28
  2607  000E98                     
  2608                           ;io.c: 56:     if(pin <8){
  2609  000E98  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2610  000E9A  EF5A  F007         	goto	u1220
  2611  000E9E  5002               	movf	(pinMode@pin+1)^0,w,c
  2612  000EA0  E107               	bnz	u1221
  2613  000EA2  0E08               	movlw	8
  2614  000EA4  5C01               	subwf	pinMode@pin^0,w,c
  2615  000EA6  B0D8               	btfsc	status,0,c
  2616  000EA8  EF58  F007         	goto	u1221
  2617  000EAC  EF5A  F007         	goto	u1220
  2618  000EB0                     u1221:
  2619  000EB0  EF84  F007         	goto	l1882
  2620  000EB4                     u1220:
  2621  000EB4                     
  2622                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  2623  000EB4  5003               	movf	pinMode@type^0,w,c
  2624  000EB6  1004               	iorwf	(pinMode@type+1)^0,w,c
  2625  000EB8  B4D8               	btfsc	status,2,c
  2626  000EBA  EF61  F007         	goto	u1231
  2627  000EBE  EF63  F007         	goto	u1230
  2628  000EC2                     u1231:
  2629  000EC2  EF73  F007         	goto	l1880
  2630  000EC6                     u1230:
  2631  000EC6  C001  F005         	movff	pinMode@pin,??_pinMode
  2632  000ECA  0E01               	movlw	1
  2633  000ECC  6E06               	movwf	(??_pinMode+1)^0,c
  2634  000ECE  2A05               	incf	??_pinMode^0,f,c
  2635  000ED0  EF6C  F007         	goto	u1244
  2636  000ED4                     u1245:
  2637  000ED4  90D8               	bcf	status,0,c
  2638  000ED6  3606               	rlcf	(??_pinMode+1)^0,f,c
  2639  000ED8                     u1244:
  2640  000ED8  2E05               	decfsz	??_pinMode^0,f,c
  2641  000EDA  EF6A  F007         	goto	u1245
  2642  000EDE  5006               	movf	(??_pinMode+1)^0,w,c
  2643  000EE0  1292               	iorwf	146,f,c	;volatile
  2644  000EE2  EF72  F008         	goto	l188
  2645  000EE6                     l1880:
  2646  000EE6  C001  F005         	movff	pinMode@pin,??_pinMode
  2647  000EEA  0E01               	movlw	1
  2648  000EEC  6E06               	movwf	(??_pinMode+1)^0,c
  2649  000EEE  2A05               	incf	??_pinMode^0,f,c
  2650  000EF0  EF7C  F007         	goto	u1254
  2651  000EF4                     u1255:
  2652  000EF4  90D8               	bcf	status,0,c
  2653  000EF6  3606               	rlcf	(??_pinMode+1)^0,f,c
  2654  000EF8                     u1254:
  2655  000EF8  2E05               	decfsz	??_pinMode^0,f,c
  2656  000EFA  EF7A  F007         	goto	u1255
  2657  000EFE  5006               	movf	(??_pinMode+1)^0,w,c
  2658  000F00  0AFF               	xorlw	255
  2659  000F02  1692               	andwf	146,f,c	;volatile
  2660  000F04  EF72  F008         	goto	l188
  2661  000F08                     l1882:
  2662  000F08  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2663  000F0A  EF92  F007         	goto	u1260
  2664  000F0E  5002               	movf	(pinMode@pin+1)^0,w,c
  2665  000F10  E107               	bnz	u1261
  2666  000F12  0E10               	movlw	16
  2667  000F14  5C01               	subwf	pinMode@pin^0,w,c
  2668  000F16  B0D8               	btfsc	status,0,c
  2669  000F18  EF90  F007         	goto	u1261
  2670  000F1C  EF92  F007         	goto	u1260
  2671  000F20                     u1261:
  2672  000F20  EFC0  F007         	goto	l1890
  2673  000F24                     u1260:
  2674  000F24                     
  2675                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  2676  000F24  5003               	movf	pinMode@type^0,w,c
  2677  000F26  1004               	iorwf	(pinMode@type+1)^0,w,c
  2678  000F28  B4D8               	btfsc	status,2,c
  2679  000F2A  EF99  F007         	goto	u1271
  2680  000F2E  EF9B  F007         	goto	u1270
  2681  000F32                     u1271:
  2682  000F32  EFAD  F007         	goto	l1888
  2683  000F36                     u1270:
  2684  000F36  C001  F005         	movff	pinMode@pin,??_pinMode
  2685  000F3A  0EF8               	movlw	-8
  2686  000F3C  2605               	addwf	??_pinMode^0,f,c
  2687  000F3E  0E01               	movlw	1
  2688  000F40  6E06               	movwf	(??_pinMode+1)^0,c
  2689  000F42  2A05               	incf	??_pinMode^0,f,c
  2690  000F44  EFA6  F007         	goto	u1284
  2691  000F48                     u1285:
  2692  000F48  90D8               	bcf	status,0,c
  2693  000F4A  3606               	rlcf	(??_pinMode+1)^0,f,c
  2694  000F4C                     u1284:
  2695  000F4C  2E05               	decfsz	??_pinMode^0,f,c
  2696  000F4E  EFA4  F007         	goto	u1285
  2697  000F52  5006               	movf	(??_pinMode+1)^0,w,c
  2698  000F54  1293               	iorwf	147,f,c	;volatile
  2699  000F56  EF72  F008         	goto	l188
  2700  000F5A                     l1888:
  2701  000F5A  C001  F005         	movff	pinMode@pin,??_pinMode
  2702  000F5E  0EF8               	movlw	-8
  2703  000F60  2605               	addwf	??_pinMode^0,f,c
  2704  000F62  0E01               	movlw	1
  2705  000F64  6E06               	movwf	(??_pinMode+1)^0,c
  2706  000F66  2A05               	incf	??_pinMode^0,f,c
  2707  000F68  EFB8  F007         	goto	u1294
  2708  000F6C                     u1295:
  2709  000F6C  90D8               	bcf	status,0,c
  2710  000F6E  3606               	rlcf	(??_pinMode+1)^0,f,c
  2711  000F70                     u1294:
  2712  000F70  2E05               	decfsz	??_pinMode^0,f,c
  2713  000F72  EFB6  F007         	goto	u1295
  2714  000F76  5006               	movf	(??_pinMode+1)^0,w,c
  2715  000F78  0AFF               	xorlw	255
  2716  000F7A  1693               	andwf	147,f,c	;volatile
  2717  000F7C  EF72  F008         	goto	l188
  2718  000F80                     l1890:
  2719  000F80  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2720  000F82  EFCE  F007         	goto	u1300
  2721  000F86  5002               	movf	(pinMode@pin+1)^0,w,c
  2722  000F88  E107               	bnz	u1301
  2723  000F8A  0E18               	movlw	24
  2724  000F8C  5C01               	subwf	pinMode@pin^0,w,c
  2725  000F8E  B0D8               	btfsc	status,0,c
  2726  000F90  EFCC  F007         	goto	u1301
  2727  000F94  EFCE  F007         	goto	u1300
  2728  000F98                     u1301:
  2729  000F98  EFFC  F007         	goto	l1898
  2730  000F9C                     u1300:
  2731  000F9C                     
  2732                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  2733  000F9C  5003               	movf	pinMode@type^0,w,c
  2734  000F9E  1004               	iorwf	(pinMode@type+1)^0,w,c
  2735  000FA0  B4D8               	btfsc	status,2,c
  2736  000FA2  EFD5  F007         	goto	u1311
  2737  000FA6  EFD7  F007         	goto	u1310
  2738  000FAA                     u1311:
  2739  000FAA  EFE9  F007         	goto	l1896
  2740  000FAE                     u1310:
  2741  000FAE  C001  F005         	movff	pinMode@pin,??_pinMode
  2742  000FB2  0EF0               	movlw	-16
  2743  000FB4  2605               	addwf	??_pinMode^0,f,c
  2744  000FB6  0E01               	movlw	1
  2745  000FB8  6E06               	movwf	(??_pinMode+1)^0,c
  2746  000FBA  2A05               	incf	??_pinMode^0,f,c
  2747  000FBC  EFE2  F007         	goto	u1324
  2748  000FC0                     u1325:
  2749  000FC0  90D8               	bcf	status,0,c
  2750  000FC2  3606               	rlcf	(??_pinMode+1)^0,f,c
  2751  000FC4                     u1324:
  2752  000FC4  2E05               	decfsz	??_pinMode^0,f,c
  2753  000FC6  EFE0  F007         	goto	u1325
  2754  000FCA  5006               	movf	(??_pinMode+1)^0,w,c
  2755  000FCC  1294               	iorwf	148,f,c	;volatile
  2756  000FCE  EF72  F008         	goto	l188
  2757  000FD2                     l1896:
  2758  000FD2  C001  F005         	movff	pinMode@pin,??_pinMode
  2759  000FD6  0EF0               	movlw	-16
  2760  000FD8  2605               	addwf	??_pinMode^0,f,c
  2761  000FDA  0E01               	movlw	1
  2762  000FDC  6E06               	movwf	(??_pinMode+1)^0,c
  2763  000FDE  2A05               	incf	??_pinMode^0,f,c
  2764  000FE0  EFF4  F007         	goto	u1334
  2765  000FE4                     u1335:
  2766  000FE4  90D8               	bcf	status,0,c
  2767  000FE6  3606               	rlcf	(??_pinMode+1)^0,f,c
  2768  000FE8                     u1334:
  2769  000FE8  2E05               	decfsz	??_pinMode^0,f,c
  2770  000FEA  EFF2  F007         	goto	u1335
  2771  000FEE  5006               	movf	(??_pinMode+1)^0,w,c
  2772  000FF0  0AFF               	xorlw	255
  2773  000FF2  1694               	andwf	148,f,c	;volatile
  2774  000FF4  EF72  F008         	goto	l188
  2775  000FF8                     l1898:
  2776  000FF8  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2777  000FFA  EF0A  F008         	goto	u1340
  2778  000FFE  5002               	movf	(pinMode@pin+1)^0,w,c
  2779  001000  E107               	bnz	u1341
  2780  001002  0E20               	movlw	32
  2781  001004  5C01               	subwf	pinMode@pin^0,w,c
  2782  001006  B0D8               	btfsc	status,0,c
  2783  001008  EF08  F008         	goto	u1341
  2784  00100C  EF0A  F008         	goto	u1340
  2785  001010                     u1341:
  2786  001010  EF38  F008         	goto	l1906
  2787  001014                     u1340:
  2788  001014                     
  2789                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  2790  001014  5003               	movf	pinMode@type^0,w,c
  2791  001016  1004               	iorwf	(pinMode@type+1)^0,w,c
  2792  001018  B4D8               	btfsc	status,2,c
  2793  00101A  EF11  F008         	goto	u1351
  2794  00101E  EF13  F008         	goto	u1350
  2795  001022                     u1351:
  2796  001022  EF25  F008         	goto	l1904
  2797  001026                     u1350:
  2798  001026  C001  F005         	movff	pinMode@pin,??_pinMode
  2799  00102A  0EE8               	movlw	-24
  2800  00102C  2605               	addwf	??_pinMode^0,f,c
  2801  00102E  0E01               	movlw	1
  2802  001030  6E06               	movwf	(??_pinMode+1)^0,c
  2803  001032  2A05               	incf	??_pinMode^0,f,c
  2804  001034  EF1E  F008         	goto	u1364
  2805  001038                     u1365:
  2806  001038  90D8               	bcf	status,0,c
  2807  00103A  3606               	rlcf	(??_pinMode+1)^0,f,c
  2808  00103C                     u1364:
  2809  00103C  2E05               	decfsz	??_pinMode^0,f,c
  2810  00103E  EF1C  F008         	goto	u1365
  2811  001042  5006               	movf	(??_pinMode+1)^0,w,c
  2812  001044  1295               	iorwf	149,f,c	;volatile
  2813  001046  EF72  F008         	goto	l188
  2814  00104A                     l1904:
  2815  00104A  C001  F005         	movff	pinMode@pin,??_pinMode
  2816  00104E  0EE8               	movlw	-24
  2817  001050  2605               	addwf	??_pinMode^0,f,c
  2818  001052  0E01               	movlw	1
  2819  001054  6E06               	movwf	(??_pinMode+1)^0,c
  2820  001056  2A05               	incf	??_pinMode^0,f,c
  2821  001058  EF30  F008         	goto	u1374
  2822  00105C                     u1375:
  2823  00105C  90D8               	bcf	status,0,c
  2824  00105E  3606               	rlcf	(??_pinMode+1)^0,f,c
  2825  001060                     u1374:
  2826  001060  2E05               	decfsz	??_pinMode^0,f,c
  2827  001062  EF2E  F008         	goto	u1375
  2828  001066  5006               	movf	(??_pinMode+1)^0,w,c
  2829  001068  0AFF               	xorlw	255
  2830  00106A  1695               	andwf	149,f,c	;volatile
  2831  00106C  EF72  F008         	goto	l188
  2832  001070                     l1906:
  2833  001070  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  2834  001072  EF46  F008         	goto	u1380
  2835  001076  5002               	movf	(pinMode@pin+1)^0,w,c
  2836  001078  E107               	bnz	u1381
  2837  00107A  0E28               	movlw	40
  2838  00107C  5C01               	subwf	pinMode@pin^0,w,c
  2839  00107E  B0D8               	btfsc	status,0,c
  2840  001080  EF44  F008         	goto	u1381
  2841  001084  EF46  F008         	goto	u1380
  2842  001088                     u1381:
  2843  001088  EF72  F008         	goto	l188
  2844  00108C                     u1380:
  2845  00108C                     
  2846                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  2847  00108C  5003               	movf	pinMode@type^0,w,c
  2848  00108E  1004               	iorwf	(pinMode@type+1)^0,w,c
  2849  001090  B4D8               	btfsc	status,2,c
  2850  001092  EF4D  F008         	goto	u1391
  2851  001096  EF4F  F008         	goto	u1390
  2852  00109A                     u1391:
  2853  00109A  EF61  F008         	goto	l1912
  2854  00109E                     u1390:
  2855  00109E  C001  F005         	movff	pinMode@pin,??_pinMode
  2856  0010A2  0EE0               	movlw	-32
  2857  0010A4  2605               	addwf	??_pinMode^0,f,c
  2858  0010A6  0E01               	movlw	1
  2859  0010A8  6E06               	movwf	(??_pinMode+1)^0,c
  2860  0010AA  2A05               	incf	??_pinMode^0,f,c
  2861  0010AC  EF5A  F008         	goto	u1404
  2862  0010B0                     u1405:
  2863  0010B0  90D8               	bcf	status,0,c
  2864  0010B2  3606               	rlcf	(??_pinMode+1)^0,f,c
  2865  0010B4                     u1404:
  2866  0010B4  2E05               	decfsz	??_pinMode^0,f,c
  2867  0010B6  EF58  F008         	goto	u1405
  2868  0010BA  5006               	movf	(??_pinMode+1)^0,w,c
  2869  0010BC  1296               	iorwf	150,f,c	;volatile
  2870  0010BE  EF72  F008         	goto	l188
  2871  0010C2                     l1912:
  2872  0010C2  C001  F005         	movff	pinMode@pin,??_pinMode
  2873  0010C6  0EE0               	movlw	-32
  2874  0010C8  2605               	addwf	??_pinMode^0,f,c
  2875  0010CA  0E01               	movlw	1
  2876  0010CC  6E06               	movwf	(??_pinMode+1)^0,c
  2877  0010CE  2A05               	incf	??_pinMode^0,f,c
  2878  0010D0  EF6C  F008         	goto	u1414
  2879  0010D4                     u1415:
  2880  0010D4  90D8               	bcf	status,0,c
  2881  0010D6  3606               	rlcf	(??_pinMode+1)^0,f,c
  2882  0010D8                     u1414:
  2883  0010D8  2E05               	decfsz	??_pinMode^0,f,c
  2884  0010DA  EF6A  F008         	goto	u1415
  2885  0010DE  5006               	movf	(??_pinMode+1)^0,w,c
  2886  0010E0  0AFF               	xorlw	255
  2887  0010E2  1696               	andwf	150,f,c	;volatile
  2888  0010E4                     l188:
  2889  0010E4  0012               	return		;funcret
  2890  0010E6                     __end_of_pinMode:
  2891                           	callstack 0
  2892                           
  2893 ;; *************** function _pwmSet *****************
  2894 ;; Defined at:
  2895 ;;		line 24 in file "pwm.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  porcento        1    wreg     unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  porcento        1    9[COMRAM] unsigned char 
  2900 ;;  val             2   10[COMRAM] unsigned int 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       0       0       0       0       0       0
  2911 ;;      Locals:         3       0       0       0       0       0       0
  2912 ;;      Temps:          2       0       0       0       0       0       0
  2913 ;;      Totals:         5       0       0       0       0       0       0
  2914 ;;Total ram usage:        5 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; Hardware stack levels required when called: 1
  2917 ;; This function calls:
  2918 ;;		___lwdiv
  2919 ;;		___wmul
  2920 ;; This function is called by:
  2921 ;;		_LeTeclado
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text12
  2926  001A6A                     __ptext12:
  2927                           	callstack 0
  2928  001A6A                     _pwmSet:
  2929                           	callstack 28
  2930                           
  2931                           ;incstack = 0
  2932                           ;pwmSet@porcento stored from wreg
  2933  001A6A  6E0A               	movwf	pwmSet@porcento^0,c
  2934  001A6C                     
  2935                           ;pwm.c: 24: void pwmSet(unsigned char porcento);pwm.c: 25: {;pwm.c: 31:  unsigned int va
      +                          l = ((unsigned int)porcento) *(PR2+1);
  2936  001A6C  0E01               	movlw	1
  2937  001A6E  24CB               	addwf	203,w,c	;volatile
  2938  001A70  6E01               	movwf	___wmul@multiplier^0,c
  2939  001A72  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2940  001A74  0E00               	movlw	0
  2941  001A76  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  2942  001A78  C00A  F003         	movff	pwmSet@porcento,___wmul@multiplicand
  2943  001A7C  6A04               	clrf	(___wmul@multiplicand+1)^0,c
  2944  001A7E  EC75  F00F         	call	___wmul	;wreg free
  2945  001A82  C001  F00B         	movff	?___wmul,pwmSet@val
  2946  001A86  C002  F00C         	movff	?___wmul+1,pwmSet@val+1
  2947  001A8A                     
  2948                           ;pwm.c: 33:     val = val / 25;
  2949  001A8A  C00B  F001         	movff	pwmSet@val,___lwdiv@dividend
  2950  001A8E  C00C  F002         	movff	pwmSet@val+1,___lwdiv@dividend+1
  2951  001A92  0E00               	movlw	0
  2952  001A94  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2953  001A96  0E19               	movlw	25
  2954  001A98  6E03               	movwf	___lwdiv@divisor^0,c
  2955  001A9A  ECFB  F00C         	call	___lwdiv	;wreg free
  2956  001A9E  C001  F00B         	movff	?___lwdiv,pwmSet@val
  2957  001AA2  C002  F00C         	movff	?___lwdiv+1,pwmSet@val+1
  2958  001AA6                     
  2959                           ;pwm.c: 35:  val &= 0x03ff;
  2960  001AA6  0EFF               	movlw	255
  2961  001AA8  160B               	andwf	pwmSet@val^0,f,c
  2962  001AAA  0E03               	movlw	3
  2963  001AAC  160C               	andwf	(pwmSet@val+1)^0,f,c
  2964  001AAE                     
  2965                           ;pwm.c: 37:  CCPR2L = val >> 2;
  2966  001AAE  C00B  F008         	movff	pwmSet@val,??_pwmSet
  2967  001AB2  C00C  F009         	movff	pwmSet@val+1,??_pwmSet+1
  2968  001AB6  90D8               	bcf	status,0,c
  2969  001AB8  3209               	rrcf	(??_pwmSet+1)^0,f,c
  2970  001ABA  3208               	rrcf	??_pwmSet^0,f,c
  2971  001ABC  90D8               	bcf	status,0,c
  2972  001ABE  3209               	rrcf	(??_pwmSet+1)^0,f,c
  2973  001AC0  3208               	rrcf	??_pwmSet^0,f,c
  2974  001AC2  5008               	movf	??_pwmSet^0,w,c
  2975  001AC4  6EBB               	movwf	187,c	;volatile
  2976  001AC6                     
  2977                           ;pwm.c: 39:  CCP2CON |= (val & 0x0003) << 4;
  2978  001AC6  C00B  F008         	movff	pwmSet@val,??_pwmSet	;volatile
  2979  001ACA  0E03               	movlw	3
  2980  001ACC  1608               	andwf	??_pwmSet^0,f,c
  2981  001ACE  3808               	swapf	??_pwmSet^0,w,c
  2982  001AD0  0BF0               	andlw	240
  2983  001AD2  12BA               	iorwf	186,f,c	;volatile
  2984  001AD4  0012               	return		;funcret
  2985  001AD6                     __end_of_pwmSet:
  2986                           	callstack 0
  2987                           
  2988 ;; *************** function ___wmul *****************
  2989 ;; Defined at:
  2990 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  multiplier      2    0[COMRAM] unsigned int 
  2993 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  product         2    4[COMRAM] unsigned int 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  2    0[COMRAM] unsigned int 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, prodl, prodh
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3005 ;;      Params:         4       0       0       0       0       0       0
  3006 ;;      Locals:         2       0       0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0
  3008 ;;      Totals:         6       0       0       0       0       0       0
  3009 ;;Total ram usage:        6 bytes
  3010 ;; Hardware stack levels used: 1
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_pwmSet
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text13
  3019  001EEA                     __ptext13:
  3020                           	callstack 0
  3021  001EEA                     ___wmul:
  3022                           	callstack 28
  3023  001EEA  5001               	movf	___wmul@multiplier^0,w,c
  3024  001EEC  0203               	mulwf	___wmul@multiplicand^0,c
  3025  001EEE  CFF3 F005          	movff	prodl,___wmul@product
  3026  001EF2  CFF4 F006          	movff	prodh,___wmul@product+1
  3027  001EF6  5001               	movf	___wmul@multiplier^0,w,c
  3028  001EF8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3029  001EFA  50F3               	movf	243,w,c
  3030  001EFC  2606               	addwf	(___wmul@product+1)^0,f,c
  3031  001EFE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3032  001F00  0203               	mulwf	___wmul@multiplicand^0,c
  3033  001F02  50F3               	movf	243,w,c
  3034  001F04  2606               	addwf	(___wmul@product+1)^0,f,c
  3035  001F06  C005  F001         	movff	___wmul@product,?___wmul
  3036  001F0A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3037  001F0E  0012               	return		;funcret
  3038  001F10                     __end_of___wmul:
  3039                           	callstack 0
  3040                           
  3041 ;; *************** function ___lwdiv *****************
  3042 ;; Defined at:
  3043 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  dividend        2    0[COMRAM] unsigned int 
  3046 ;;  divisor         2    2[COMRAM] unsigned int 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  quotient        2    4[COMRAM] unsigned int 
  3049 ;;  counter         1    6[COMRAM] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  2    0[COMRAM] unsigned int 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3059 ;;      Params:         4       0       0       0       0       0       0
  3060 ;;      Locals:         3       0       0       0       0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0       0
  3062 ;;      Totals:         7       0       0       0       0       0       0
  3063 ;;Total ram usage:        7 bytes
  3064 ;; Hardware stack levels used: 1
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_pwmSet
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text14
  3073  0019F6                     __ptext14:
  3074                           	callstack 0
  3075  0019F6                     ___lwdiv:
  3076                           	callstack 28
  3077  0019F6  0E00               	movlw	0
  3078  0019F8  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  3079  0019FA  0E00               	movlw	0
  3080  0019FC  6E05               	movwf	___lwdiv@quotient^0,c
  3081  0019FE  5003               	movf	___lwdiv@divisor^0,w,c
  3082  001A00  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3083  001A02  B4D8               	btfsc	status,2,c
  3084  001A04  EF06  F00D         	goto	u1591
  3085  001A08  EF08  F00D         	goto	u1590
  3086  001A0C                     u1591:
  3087  001A0C  EF30  F00D         	goto	l886
  3088  001A10                     u1590:
  3089  001A10  0E01               	movlw	1
  3090  001A12  6E07               	movwf	___lwdiv@counter^0,c
  3091  001A14  EF10  F00D         	goto	l2028
  3092  001A18                     l2026:
  3093  001A18  90D8               	bcf	status,0,c
  3094  001A1A  3603               	rlcf	___lwdiv@divisor^0,f,c
  3095  001A1C  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3096  001A1E  2A07               	incf	___lwdiv@counter^0,f,c
  3097  001A20                     l2028:
  3098  001A20  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  3099  001A22  EF15  F00D         	goto	u1601
  3100  001A26  EF17  F00D         	goto	u1600
  3101  001A2A                     u1601:
  3102  001A2A  EF0C  F00D         	goto	l2026
  3103  001A2E                     u1600:
  3104  001A2E                     l2030:
  3105  001A2E  90D8               	bcf	status,0,c
  3106  001A30  3605               	rlcf	___lwdiv@quotient^0,f,c
  3107  001A32  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3108  001A34  5003               	movf	___lwdiv@divisor^0,w,c
  3109  001A36  5C01               	subwf	___lwdiv@dividend^0,w,c
  3110  001A38  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3111  001A3A  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3112  001A3C  A0D8               	btfss	status,0,c
  3113  001A3E  EF23  F00D         	goto	u1611
  3114  001A42  EF25  F00D         	goto	u1610
  3115  001A46                     u1611:
  3116  001A46  EF2A  F00D         	goto	l2038
  3117  001A4A                     u1610:
  3118  001A4A  5003               	movf	___lwdiv@divisor^0,w,c
  3119  001A4C  5E01               	subwf	___lwdiv@dividend^0,f,c
  3120  001A4E  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3121  001A50  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3122  001A52  8005               	bsf	___lwdiv@quotient^0,0,c
  3123  001A54                     l2038:
  3124  001A54  90D8               	bcf	status,0,c
  3125  001A56  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3126  001A58  3203               	rrcf	___lwdiv@divisor^0,f,c
  3127  001A5A  2E07               	decfsz	___lwdiv@counter^0,f,c
  3128  001A5C  EF17  F00D         	goto	l2030
  3129  001A60                     l886:
  3130  001A60  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3131  001A64  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3132  001A68  0012               	return		;funcret
  3133  001A6A                     __end_of___lwdiv:
  3134                           	callstack 0
  3135                           
  3136 ;; *************** function _pwmInit *****************
  3137 ;; Defined at:
  3138 ;;		line 51 in file "pwm.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3152 ;;      Params:         0       0       0       0       0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0
  3154 ;;      Temps:          0       0       0       0       0       0       0
  3155 ;;      Totals:         0       0       0       0       0       0       0
  3156 ;;Total ram usage:        0 bytes
  3157 ;; Hardware stack levels used: 1
  3158 ;; Hardware stack levels required when called: 2
  3159 ;; This function calls:
  3160 ;;		_pwmFrequency
  3161 ;; This function is called by:
  3162 ;;		_LeTeclado
  3163 ;;		_main
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text15
  3168  001F94                     __ptext15:
  3169                           	callstack 0
  3170  001F94                     _pwmInit:
  3171                           	callstack 28
  3172  001F94                     
  3173                           ;pwm.c: 53:  ((TRISC) &= ~(1<<(1)));
  3174  001F94  9294               	bcf	148,1,c	;volatile
  3175  001F96                     
  3176                           ;pwm.c: 55:  T2CON |= 0b00000011;
  3177  001F96  0E03               	movlw	3
  3178  001F98  12CA               	iorwf	202,f,c	;volatile
  3179  001F9A                     
  3180                           ;pwm.c: 56:  ((T2CON) |= (1<<(2)));
  3181  001F9A  84CA               	bsf	202,2,c	;volatile
  3182  001F9C                     
  3183                           ;pwm.c: 58:  CCP2CON = 0b00001100;
  3184  001F9C  0E0C               	movlw	12
  3185  001F9E  6EBA               	movwf	186,c	;volatile
  3186  001FA0                     
  3187                           ;pwm.c: 60:     pwmFrequency(100);
  3188  001FA0  0E00               	movlw	0
  3189  001FA2  6E10               	movwf	(pwmFrequency@freq+1)^0,c
  3190  001FA4  0E64               	movlw	100
  3191  001FA6  6E0F               	movwf	pwmFrequency@freq^0,c
  3192  001FA8  EC88  F00F         	call	_pwmFrequency	;wreg free
  3193  001FAC  0012               	return		;funcret
  3194  001FAE                     __end_of_pwmInit:
  3195                           	callstack 0
  3196                           
  3197 ;; *************** function _pwmFrequency *****************
  3198 ;; Defined at:
  3199 ;;		line 44 in file "pwm.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  freq            2   14[COMRAM] unsigned int 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3213 ;;      Params:         2       0       0       0       0       0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0
  3216 ;;      Totals:         2       0       0       0       0       0       0
  3217 ;;Total ram usage:        2 bytes
  3218 ;; Hardware stack levels used: 1
  3219 ;; Hardware stack levels required when called: 1
  3220 ;; This function calls:
  3221 ;;		___aldiv
  3222 ;; This function is called by:
  3223 ;;		_pwmInit
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text16
  3228  001F10                     __ptext16:
  3229                           	callstack 0
  3230  001F10                     _pwmFrequency:
  3231                           	callstack 28
  3232  001F10                     
  3233                           ;pwm.c: 44: void pwmFrequency(unsigned int freq);pwm.c: 45: {;pwm.c: 48:  PR2 = (125000l
      +                          /(freq)) - 1;
  3234  001F10  0E48               	movlw	72
  3235  001F12  6E01               	movwf	___aldiv@dividend^0,c
  3236  001F14  0EE8               	movlw	232
  3237  001F16  6E02               	movwf	(___aldiv@dividend+1)^0,c
  3238  001F18  0E01               	movlw	1
  3239  001F1A  6E03               	movwf	(___aldiv@dividend+2)^0,c
  3240  001F1C  0E00               	movlw	0
  3241  001F1E  6E04               	movwf	(___aldiv@dividend+3)^0,c
  3242  001F20  C00F  F005         	movff	pwmFrequency@freq,___aldiv@divisor
  3243  001F24  C010  F006         	movff	pwmFrequency@freq+1,___aldiv@divisor+1
  3244  001F28  6A07               	clrf	(___aldiv@divisor+2)^0,c
  3245  001F2A  6A08               	clrf	(___aldiv@divisor+3)^0,c
  3246  001F2C  ECEA  F00A         	call	___aldiv	;wreg free
  3247  001F30  0401               	decf	?___aldiv^0,w,c
  3248  001F32  6ECB               	movwf	203,c	;volatile
  3249  001F34  0012               	return		;funcret
  3250  001F36                     __end_of_pwmFrequency:
  3251                           	callstack 0
  3252                           
  3253 ;; *************** function ___aldiv *****************
  3254 ;; Defined at:
  3255 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  dividend        4    0[COMRAM] long 
  3258 ;;  divisor         4    4[COMRAM] long 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  quotient        4   10[COMRAM] long 
  3261 ;;  sign            1    9[COMRAM] unsigned char 
  3262 ;;  counter         1    8[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  4    0[COMRAM] long 
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3272 ;;      Params:         8       0       0       0       0       0       0
  3273 ;;      Locals:         6       0       0       0       0       0       0
  3274 ;;      Temps:          0       0       0       0       0       0       0
  3275 ;;      Totals:        14       0       0       0       0       0       0
  3276 ;;Total ram usage:       14 bytes
  3277 ;; Hardware stack levels used: 1
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_pwmFrequency
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text17
  3286  0015D4                     __ptext17:
  3287                           	callstack 0
  3288  0015D4                     ___aldiv:
  3289                           	callstack 28
  3290  0015D4  0E00               	movlw	0
  3291  0015D6  6E0A               	movwf	___aldiv@sign^0,c
  3292  0015D8  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  3293  0015DA  EFF3  F00A         	goto	u1430
  3294  0015DE  EFF1  F00A         	goto	u1431
  3295  0015E2                     u1431:
  3296  0015E2  EFFD  F00A         	goto	l1930
  3297  0015E6                     u1430:
  3298  0015E6  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  3299  0015E8  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  3300  0015EA  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  3301  0015EC  6C05               	negf	___aldiv@divisor^0,c
  3302  0015EE  0E00               	movlw	0
  3303  0015F0  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  3304  0015F2  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  3305  0015F4  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  3306  0015F6  0E01               	movlw	1
  3307  0015F8  6E0A               	movwf	___aldiv@sign^0,c
  3308  0015FA                     l1930:
  3309  0015FA  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  3310  0015FC  EF04  F00B         	goto	u1440
  3311  001600  EF02  F00B         	goto	u1441
  3312  001604                     u1441:
  3313  001604  EF0E  F00B         	goto	l1936
  3314  001608                     u1440:
  3315  001608  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  3316  00160A  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  3317  00160C  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  3318  00160E  6C01               	negf	___aldiv@dividend^0,c
  3319  001610  0E00               	movlw	0
  3320  001612  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  3321  001614  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  3322  001616  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  3323  001618  0E01               	movlw	1
  3324  00161A  1A0A               	xorwf	___aldiv@sign^0,f,c
  3325  00161C                     l1936:
  3326  00161C  0E00               	movlw	0
  3327  00161E  6E0B               	movwf	___aldiv@quotient^0,c
  3328  001620  0E00               	movlw	0
  3329  001622  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  3330  001624  0E00               	movlw	0
  3331  001626  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  3332  001628  0E00               	movlw	0
  3333  00162A  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  3334  00162C  5005               	movf	___aldiv@divisor^0,w,c
  3335  00162E  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  3336  001630  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  3337  001632  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  3338  001634  B4D8               	btfsc	status,2,c
  3339  001636  EF1F  F00B         	goto	u1451
  3340  00163A  EF21  F00B         	goto	u1450
  3341  00163E                     u1451:
  3342  00163E  EF57  F00B         	goto	l1958
  3343  001642                     u1450:
  3344  001642  0E01               	movlw	1
  3345  001644  6E09               	movwf	___aldiv@counter^0,c
  3346  001646  EF2B  F00B         	goto	l1944
  3347  00164A                     l1942:
  3348  00164A  90D8               	bcf	status,0,c
  3349  00164C  3605               	rlcf	___aldiv@divisor^0,f,c
  3350  00164E  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  3351  001650  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  3352  001652  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  3353  001654  2A09               	incf	___aldiv@counter^0,f,c
  3354  001656                     l1944:
  3355  001656  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  3356  001658  EF30  F00B         	goto	u1461
  3357  00165C  EF32  F00B         	goto	u1460
  3358  001660                     u1461:
  3359  001660  EF25  F00B         	goto	l1942
  3360  001664                     u1460:
  3361  001664                     l1946:
  3362  001664  90D8               	bcf	status,0,c
  3363  001666  360B               	rlcf	___aldiv@quotient^0,f,c
  3364  001668  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  3365  00166A  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  3366  00166C  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  3367  00166E  5005               	movf	___aldiv@divisor^0,w,c
  3368  001670  5C01               	subwf	___aldiv@dividend^0,w,c
  3369  001672  5006               	movf	(___aldiv@divisor+1)^0,w,c
  3370  001674  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  3371  001676  5007               	movf	(___aldiv@divisor+2)^0,w,c
  3372  001678  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  3373  00167A  5008               	movf	(___aldiv@divisor+3)^0,w,c
  3374  00167C  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  3375  00167E  A0D8               	btfss	status,0,c
  3376  001680  EF44  F00B         	goto	u1471
  3377  001684  EF46  F00B         	goto	u1470
  3378  001688                     u1471:
  3379  001688  EF4F  F00B         	goto	l1954
  3380  00168C                     u1470:
  3381  00168C  5005               	movf	___aldiv@divisor^0,w,c
  3382  00168E  5E01               	subwf	___aldiv@dividend^0,f,c
  3383  001690  5006               	movf	(___aldiv@divisor+1)^0,w,c
  3384  001692  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  3385  001694  5007               	movf	(___aldiv@divisor+2)^0,w,c
  3386  001696  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  3387  001698  5008               	movf	(___aldiv@divisor+3)^0,w,c
  3388  00169A  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  3389  00169C  800B               	bsf	___aldiv@quotient^0,0,c
  3390  00169E                     l1954:
  3391  00169E  90D8               	bcf	status,0,c
  3392  0016A0  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  3393  0016A2  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  3394  0016A4  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  3395  0016A6  3205               	rrcf	___aldiv@divisor^0,f,c
  3396  0016A8  2E09               	decfsz	___aldiv@counter^0,f,c
  3397  0016AA  EF32  F00B         	goto	l1946
  3398  0016AE                     l1958:
  3399  0016AE  500A               	movf	___aldiv@sign^0,w,c
  3400  0016B0  B4D8               	btfsc	status,2,c
  3401  0016B2  EF5D  F00B         	goto	u1481
  3402  0016B6  EF5F  F00B         	goto	u1480
  3403  0016BA                     u1481:
  3404  0016BA  EF67  F00B         	goto	l1962
  3405  0016BE                     u1480:
  3406  0016BE  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  3407  0016C0  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  3408  0016C2  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  3409  0016C4  6C0B               	negf	___aldiv@quotient^0,c
  3410  0016C6  0E00               	movlw	0
  3411  0016C8  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  3412  0016CA  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  3413  0016CC  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  3414  0016CE                     l1962:
  3415  0016CE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  3416  0016D2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  3417  0016D6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  3418  0016DA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  3419  0016DE  0012               	return		;funcret
  3420  0016E0                     __end_of___aldiv:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _lcdString *****************
  3424 ;; Defined at:
  3425 ;;		line 57 in file "lcd.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  msg             2   14[COMRAM] PTR unsigned char 
  3428 ;;		 -> STR_23(10), STR_22(11), STR_21(11), STR_20(9), 
  3429 ;;		 -> STR_19(16), STR_18(14), STR_17(3), STR_16(16), 
  3430 ;;		 -> STR_15(7), STR_14(11), STR_13(9), STR_12(16), 
  3431 ;;		 -> STR_11(14), STR_10(3), STR_9(16), STR_8(7), 
  3432 ;;		 -> STR_7(11), STR_6(9), STR_5(16), STR_4(14), 
  3433 ;;		 -> STR_3(3), STR_2(14), STR_1(9), 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  i               2   18[COMRAM] int 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         2       0       0       0       0       0       0
  3446 ;;      Locals:         2       0       0       0       0       0       0
  3447 ;;      Temps:          2       0       0       0       0       0       0
  3448 ;;      Totals:         6       0       0       0       0       0       0
  3449 ;;Total ram usage:        6 bytes
  3450 ;; Hardware stack levels used: 1
  3451 ;; Hardware stack levels required when called: 5
  3452 ;; This function calls:
  3453 ;;		_lcdChar
  3454 ;; This function is called by:
  3455 ;;		_LeTeclado
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text18
  3461  001BEA                     __ptext18:
  3462                           	callstack 0
  3463  001BEA                     _lcdString:
  3464                           	callstack 25
  3465  001BEA                     
  3466                           ;lcd.c: 58:  int i = 0;
  3467  001BEA  0E00               	movlw	0
  3468  001BEC  6E14               	movwf	(lcdString@i+1)^0,c
  3469  001BEE  0E00               	movlw	0
  3470  001BF0  6E13               	movwf	lcdString@i^0,c
  3471                           
  3472                           ;lcd.c: 59:  while (msg[i] != 0) {
  3473  001BF2  EF0B  F00E         	goto	l2062
  3474  001BF6                     l2058:
  3475                           
  3476                           ;lcd.c: 60:   lcdChar(msg[i]);
  3477  001BF6  5013               	movf	lcdString@i^0,w,c
  3478  001BF8  240F               	addwf	lcdString@msg^0,w,c
  3479  001BFA  6E11               	movwf	??_lcdString^0,c
  3480  001BFC  5014               	movf	(lcdString@i+1)^0,w,c
  3481  001BFE  2010               	addwfc	(lcdString@msg+1)^0,w,c
  3482  001C00  6E12               	movwf	(??_lcdString+1)^0,c
  3483  001C02  C011  FFF6         	movff	??_lcdString,tblptrl
  3484  001C06  C012  FFF7         	movff	??_lcdString+1,tblptrh
  3485  001C0A                     	if	0	;tblptru may be non-zero
  3486  001C0A                     	endif
  3487  001C0A                     	if	0	;tblptru may be non-zero
  3488  001C0A                     	endif
  3489  001C0A  0008               	tblrd		*
  3490  001C0C  50F5               	movf	tablat,w,c
  3491  001C0E  ECAC  F00F         	call	_lcdChar
  3492  001C12                     
  3493                           ;lcd.c: 61:   i++;
  3494  001C12  4A13               	infsnz	lcdString@i^0,f,c
  3495  001C14  2A14               	incf	(lcdString@i+1)^0,f,c
  3496  001C16                     l2062:
  3497                           
  3498                           ;lcd.c: 59:  while (msg[i] != 0) {
  3499  001C16  5013               	movf	lcdString@i^0,w,c
  3500  001C18  240F               	addwf	lcdString@msg^0,w,c
  3501  001C1A  6E11               	movwf	??_lcdString^0,c
  3502  001C1C  5014               	movf	(lcdString@i+1)^0,w,c
  3503  001C1E  2010               	addwfc	(lcdString@msg+1)^0,w,c
  3504  001C20  6E12               	movwf	(??_lcdString+1)^0,c
  3505  001C22  C011  FFF6         	movff	??_lcdString,tblptrl
  3506  001C26  C012  FFF7         	movff	??_lcdString+1,tblptrh
  3507  001C2A                     	if	0	;tblptru may be non-zero
  3508  001C2A                     	endif
  3509  001C2A                     	if	0	;tblptru may be non-zero
  3510  001C2A                     	endif
  3511  001C2A  0008               	tblrd		*
  3512  001C2C  50F5               	movf	tablat,w,c
  3513  001C2E  0900               	iorlw	0
  3514  001C30  A4D8               	btfss	status,2,c
  3515  001C32  EF1D  F00E         	goto	u1621
  3516  001C36  EF1F  F00E         	goto	u1620
  3517  001C3A                     u1621:
  3518  001C3A  EFFB  F00D         	goto	l2058
  3519  001C3E                     u1620:
  3520  001C3E  0012               	return		;funcret
  3521  001C40                     __end_of_lcdString:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function _lcdChar *****************
  3525 ;; Defined at:
  3526 ;;		line 52 in file "lcd.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  value           1    wreg     unsigned char 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  value           1   13[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3540 ;;      Params:         0       0       0       0       0       0       0
  3541 ;;      Locals:         1       0       0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0
  3543 ;;      Totals:         1       0       0       0       0       0       0
  3544 ;;Total ram usage:        1 bytes
  3545 ;; Hardware stack levels used: 1
  3546 ;; Hardware stack levels required when called: 4
  3547 ;; This function calls:
  3548 ;;		_delayMicro
  3549 ;;		_pushByte
  3550 ;; This function is called by:
  3551 ;;		_LeTeclado
  3552 ;;		_lcdString
  3553 ;;		_lcdNumber
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text19
  3558  001F58                     __ptext19:
  3559                           	callstack 0
  3560  001F58                     _lcdChar:
  3561                           	callstack 25
  3562                           
  3563                           ;incstack = 0
  3564                           ;lcdChar@value stored from wreg
  3565  001F58  6E0E               	movwf	lcdChar@value^0,c
  3566  001F5A                     
  3567                           ;lcd.c: 53:  pushByte(value, 1);
  3568  001F5A  0E00               	movlw	0
  3569  001F5C  6E0B               	movwf	(pushByte@rs+1)^0,c
  3570  001F5E  0E01               	movlw	1
  3571  001F60  6E0A               	movwf	pushByte@rs^0,c
  3572  001F62  500E               	movf	lcdChar@value^0,w,c
  3573  001F64  EC9D  F00D         	call	_pushByte
  3574  001F68                     
  3575                           ;lcd.c: 54:  delayMicro(80);
  3576  001F68  0E00               	movlw	0
  3577  001F6A  6E02               	movwf	(delayMicro@a+1)^0,c
  3578  001F6C  0E50               	movlw	80
  3579  001F6E  6E01               	movwf	delayMicro@a^0,c
  3580  001F70  ECE9  F00F         	call	_delayMicro	;wreg free
  3581  001F74  0012               	return		;funcret
  3582  001F76                     __end_of_lcdChar:
  3583                           	callstack 0
  3584                           
  3585 ;; *************** function _lcdPosition *****************
  3586 ;; Defined at:
  3587 ;;		line 44 in file "lcd.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  line            2   14[COMRAM] int 
  3590 ;;  col             2   16[COMRAM] int 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, status,2, status,0, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3602 ;;      Params:         4       0       0       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0
  3605 ;;      Totals:         4       0       0       0       0       0       0
  3606 ;;Total ram usage:        4 bytes
  3607 ;; Hardware stack levels used: 1
  3608 ;; Hardware stack levels required when called: 5
  3609 ;; This function calls:
  3610 ;;		_lcdCommand
  3611 ;; This function is called by:
  3612 ;;		_LeTeclado
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text20
  3617  001DA6                     __ptext20:
  3618                           	callstack 0
  3619  001DA6                     _lcdPosition:
  3620                           	callstack 24
  3621  001DA6                     
  3622                           ;lcd.c: 45:  if (line == 0) {
  3623  001DA6  500F               	movf	lcdPosition@line^0,w,c
  3624  001DA8  1010               	iorwf	(lcdPosition@line+1)^0,w,c
  3625  001DAA  A4D8               	btfss	status,2,c
  3626  001DAC  EFDA  F00E         	goto	u1681
  3627  001DB0  EFDC  F00E         	goto	u1680
  3628  001DB4                     u1681:
  3629  001DB4  EFE1  F00E         	goto	l2108
  3630  001DB8                     u1680:
  3631  001DB8                     
  3632                           ;lcd.c: 46:   lcdCommand(0x80 + (col % 16));
  3633  001DB8  5011               	movf	lcdPosition@col^0,w,c
  3634  001DBA  0B0F               	andlw	15
  3635  001DBC  0F80               	addlw	128
  3636  001DBE  ECBB  F00F         	call	_lcdCommand
  3637  001DC2                     l2108:
  3638                           
  3639                           ;lcd.c: 48:  if (line == 1) {
  3640  001DC2  040F               	decf	lcdPosition@line^0,w,c
  3641  001DC4  1010               	iorwf	(lcdPosition@line+1)^0,w,c
  3642  001DC6  A4D8               	btfss	status,2,c
  3643  001DC8  EFE8  F00E         	goto	u1691
  3644  001DCC  EFEA  F00E         	goto	u1690
  3645  001DD0                     u1691:
  3646  001DD0  EFEF  F00E         	goto	l264
  3647  001DD4                     u1690:
  3648  001DD4                     
  3649                           ;lcd.c: 49:   lcdCommand(0xC0 + (col % 16));
  3650  001DD4  5011               	movf	lcdPosition@col^0,w,c
  3651  001DD6  0B0F               	andlw	15
  3652  001DD8  0FC0               	addlw	192
  3653  001DDA  ECBB  F00F         	call	_lcdCommand
  3654  001DDE                     l264:
  3655  001DDE  0012               	return		;funcret
  3656  001DE0                     __end_of_lcdPosition:
  3657                           	callstack 0
  3658                           
  3659 ;; *************** function _lcdCommand *****************
  3660 ;; Defined at:
  3661 ;;		line 40 in file "lcd.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  value           1    wreg     unsigned char 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  value           1   13[COMRAM] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0, cstack
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3675 ;;      Params:         0       0       0       0       0       0       0
  3676 ;;      Locals:         1       0       0       0       0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0
  3678 ;;      Totals:         1       0       0       0       0       0       0
  3679 ;;Total ram usage:        1 bytes
  3680 ;; Hardware stack levels used: 1
  3681 ;; Hardware stack levels required when called: 4
  3682 ;; This function calls:
  3683 ;;		_delayMili
  3684 ;;		_pushByte
  3685 ;; This function is called by:
  3686 ;;		_LeTeclado
  3687 ;;		_main
  3688 ;;		_lcdPosition
  3689 ;;		_lcdInit
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text21
  3694  001F76                     __ptext21:
  3695                           	callstack 0
  3696  001F76                     _lcdCommand:
  3697                           	callstack 25
  3698                           
  3699                           ;incstack = 0
  3700                           ;lcdCommand@value stored from wreg
  3701  001F76  6E0E               	movwf	lcdCommand@value^0,c
  3702  001F78                     
  3703                           ;lcd.c: 41:  pushByte(value, 0);
  3704  001F78  0E00               	movlw	0
  3705  001F7A  6E0B               	movwf	(pushByte@rs+1)^0,c
  3706  001F7C  0E00               	movlw	0
  3707  001F7E  6E0A               	movwf	pushByte@rs^0,c
  3708  001F80  500E               	movf	lcdCommand@value^0,w,c
  3709  001F82  EC9D  F00D         	call	_pushByte
  3710                           
  3711                           ;lcd.c: 42:  delayMili(2);
  3712  001F86  0E00               	movlw	0
  3713  001F88  6E02               	movwf	(delayMili@a+1)^0,c
  3714  001F8A  0E02               	movlw	2
  3715  001F8C  6E01               	movwf	delayMili@a^0,c
  3716  001F8E  EC09  F00F         	call	_delayMili	;wreg free
  3717  001F92  0012               	return		;funcret
  3718  001F94                     __end_of_lcdCommand:
  3719                           	callstack 0
  3720                           
  3721 ;; *************** function _pushByte *****************
  3722 ;; Defined at:
  3723 ;;		line 31 in file "lcd.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  value           1    wreg     unsigned char 
  3726 ;;  rs              2    9[COMRAM] int 
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  value           1   12[COMRAM] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3738 ;;      Params:         2       0       0       0       0       0       0
  3739 ;;      Locals:         1       0       0       0       0       0       0
  3740 ;;      Temps:          1       0       0       0       0       0       0
  3741 ;;      Totals:         4       0       0       0       0       0       0
  3742 ;;Total ram usage:        4 bytes
  3743 ;; Hardware stack levels used: 1
  3744 ;; Hardware stack levels required when called: 3
  3745 ;; This function calls:
  3746 ;;		_digitalWrite
  3747 ;;		_pulseEnablePin
  3748 ;;		_soWrite
  3749 ;; This function is called by:
  3750 ;;		_lcdCommand
  3751 ;;		_lcdChar
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text22
  3756  001B3A                     __ptext22:
  3757                           	callstack 0
  3758  001B3A                     _pushByte:
  3759                           	callstack 25
  3760                           
  3761                           ;incstack = 0
  3762                           ;pushByte@value stored from wreg
  3763  001B3A  6E0D               	movwf	pushByte@value^0,c
  3764  001B3C                     
  3765                           ;lcd.c: 32:  soWrite(value >> 4);
  3766  001B3C  C00D  F00C         	movff	pushByte@value,??_pushByte
  3767  001B40  3A0C               	swapf	??_pushByte^0,f,c
  3768  001B42  0E0F               	movlw	15
  3769  001B44  160C               	andwf	??_pushByte^0,f,c
  3770  001B46  500C               	movf	??_pushByte^0,w,c
  3771  001B48  6E07               	movwf	soWrite@value^0,c
  3772  001B4A  6A08               	clrf	(soWrite@value+1)^0,c
  3773  001B4C  EC48  F00E         	call	_soWrite	;wreg free
  3774                           
  3775                           ;lcd.c: 33:  digitalWrite(PIN_D5, rs);
  3776  001B50  0E00               	movlw	0
  3777  001B52  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3778  001B54  0E1D               	movlw	29
  3779  001B56  6E01               	movwf	digitalWrite@pin^0,c
  3780  001B58  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  3781  001B5C  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  3782  001B60  EC73  F008         	call	_digitalWrite	;wreg free
  3783                           
  3784                           ;lcd.c: 34:  pulseEnablePin();
  3785  001B64  EC93  F00E         	call	_pulseEnablePin	;wreg free
  3786                           
  3787                           ;lcd.c: 36:  soWrite(value & 0x0F);
  3788  001B68  C00D  F00C         	movff	pushByte@value,??_pushByte
  3789  001B6C  0E0F               	movlw	15
  3790  001B6E  160C               	andwf	??_pushByte^0,f,c
  3791  001B70  500C               	movf	??_pushByte^0,w,c
  3792  001B72  6E07               	movwf	soWrite@value^0,c
  3793  001B74  6A08               	clrf	(soWrite@value+1)^0,c
  3794  001B76  EC48  F00E         	call	_soWrite	;wreg free
  3795                           
  3796                           ;lcd.c: 37:  digitalWrite(PIN_D5, rs);
  3797  001B7A  0E00               	movlw	0
  3798  001B7C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3799  001B7E  0E1D               	movlw	29
  3800  001B80  6E01               	movwf	digitalWrite@pin^0,c
  3801  001B82  C00A  F003         	movff	pushByte@rs,digitalWrite@value
  3802  001B86  C00B  F004         	movff	pushByte@rs+1,digitalWrite@value+1
  3803  001B8A  EC73  F008         	call	_digitalWrite	;wreg free
  3804                           
  3805                           ;lcd.c: 38:  pulseEnablePin();
  3806  001B8E  EC93  F00E         	call	_pulseEnablePin	;wreg free
  3807  001B92  0012               	return		;funcret
  3808  001B94                     __end_of_pushByte:
  3809                           	callstack 0
  3810                           
  3811 ;; *************** function _pulseEnablePin *****************
  3812 ;; Defined at:
  3813 ;;		line 18 in file "lcd.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3827 ;;      Params:         0       0       0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0
  3830 ;;      Totals:         0       0       0       0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used: 1
  3833 ;; Hardware stack levels required when called: 1
  3834 ;; This function calls:
  3835 ;;		_delayMicro
  3836 ;;		_digitalWrite
  3837 ;; This function is called by:
  3838 ;;		_pushNibble
  3839 ;;		_pushByte
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text23
  3844  001D26                     __ptext23:
  3845                           	callstack 0
  3846  001D26                     _pulseEnablePin:
  3847                           	callstack 26
  3848  001D26                     
  3849                           ;lcd.c: 19:  digitalWrite(PIN_D4, 1);
  3850  001D26  0E00               	movlw	0
  3851  001D28  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3852  001D2A  0E1C               	movlw	28
  3853  001D2C  6E01               	movwf	digitalWrite@pin^0,c
  3854  001D2E  0E00               	movlw	0
  3855  001D30  6E04               	movwf	(digitalWrite@value+1)^0,c
  3856  001D32  0E01               	movlw	1
  3857  001D34  6E03               	movwf	digitalWrite@value^0,c
  3858  001D36  EC73  F008         	call	_digitalWrite	;wreg free
  3859  001D3A                     
  3860                           ;lcd.c: 20:  delayMicro(5);
  3861  001D3A  0E00               	movlw	0
  3862  001D3C  6E02               	movwf	(delayMicro@a+1)^0,c
  3863  001D3E  0E05               	movlw	5
  3864  001D40  6E01               	movwf	delayMicro@a^0,c
  3865  001D42  ECE9  F00F         	call	_delayMicro	;wreg free
  3866  001D46                     
  3867                           ;lcd.c: 21:  digitalWrite(PIN_D4, 0);
  3868  001D46  0E00               	movlw	0
  3869  001D48  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3870  001D4A  0E1C               	movlw	28
  3871  001D4C  6E01               	movwf	digitalWrite@pin^0,c
  3872  001D4E  0E00               	movlw	0
  3873  001D50  6E04               	movwf	(digitalWrite@value+1)^0,c
  3874  001D52  0E00               	movlw	0
  3875  001D54  6E03               	movwf	digitalWrite@value^0,c
  3876  001D56  EC73  F008         	call	_digitalWrite	;wreg free
  3877                           
  3878                           ;lcd.c: 22:  delayMicro(5);
  3879  001D5A  0E00               	movlw	0
  3880  001D5C  6E02               	movwf	(delayMicro@a+1)^0,c
  3881  001D5E  0E05               	movlw	5
  3882  001D60  6E01               	movwf	delayMicro@a^0,c
  3883  001D62  ECE9  F00F         	call	_delayMicro	;wreg free
  3884  001D66  0012               	return		;funcret
  3885  001D68                     __end_of_pulseEnablePin:
  3886                           	callstack 0
  3887                           
  3888 ;; *************** function _delayMicro *****************
  3889 ;; Defined at:
  3890 ;;		line 5 in file "lcd.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  a               2    0[COMRAM] int 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  i               2    0        volatile int 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		None
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3904 ;;      Params:         2       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0
  3907 ;;      Totals:         2       0       0       0       0       0       0
  3908 ;;Total ram usage:        2 bytes
  3909 ;; Hardware stack levels used: 1
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_pulseEnablePin
  3914 ;;		_lcdChar
  3915 ;;		_lcdInit
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text24
  3920  001FD2                     __ptext24:
  3921                           	callstack 0
  3922  001FD2                     _delayMicro:
  3923                           	callstack 26
  3924  001FD2  0012               	return		;funcret
  3925  001FD4                     __end_of_delayMicro:
  3926                           	callstack 0
  3927                           
  3928 ;; *************** function _delayMili *****************
  3929 ;; Defined at:
  3930 ;;		line 10 in file "lcd.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  a               2    0[COMRAM] int 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  i               2    3[COMRAM] volatile int 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3944 ;;      Params:         2       0       0       0       0       0       0
  3945 ;;      Locals:         2       0       0       0       0       0       0
  3946 ;;      Temps:          1       0       0       0       0       0       0
  3947 ;;      Totals:         5       0       0       0       0       0       0
  3948 ;;Total ram usage:        5 bytes
  3949 ;; Hardware stack levels used: 1
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_lcdCommand
  3954 ;;		_lcdInit
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text25
  3959  001E12                     __ptext25:
  3960                           	callstack 0
  3961  001E12                     _delayMili:
  3962                           	callstack 28
  3963  001E12                     
  3964                           ;lcd.c: 11:  volatile int i;;lcd.c: 12:  for (i = 0; i < a; i++) {
  3965  001E12  0E00               	movlw	0
  3966  001E14  6E05               	movwf	(delayMili@i+1)^0,c	;volatile
  3967  001E16  0E00               	movlw	0
  3968  001E18  6E04               	movwf	delayMili@i^0,c	;volatile
  3969  001E1A  EF11  F00F         	goto	l1918
  3970  001E1E                     l1916:
  3971                           
  3972                           ;lcd.c: 15:  }
  3973  001E1E  4A04               	infsnz	delayMili@i^0,f,c	;volatile
  3974  001E20  2A05               	incf	(delayMili@i+1)^0,f,c	;volatile
  3975  001E22                     l1918:
  3976  001E22  5001               	movf	delayMili@a^0,w,c
  3977  001E24  5C04               	subwf	delayMili@i^0,w,c	;volatile
  3978  001E26  5005               	movf	(delayMili@i+1)^0,w,c	;volatile
  3979  001E28  0A80               	xorlw	128
  3980  001E2A  6E03               	movwf	??_delayMili^0,c
  3981  001E2C  5002               	movf	(delayMili@a+1)^0,w,c
  3982  001E2E  0A80               	xorlw	128
  3983  001E30  5803               	subwfb	??_delayMili^0,w,c
  3984  001E32  A0D8               	btfss	status,0,c
  3985  001E34  EF1E  F00F         	goto	u1421
  3986  001E38  EF20  F00F         	goto	u1420
  3987  001E3C                     u1421:
  3988  001E3C  EF0F  F00F         	goto	l1916
  3989  001E40                     u1420:
  3990  001E40  0012               	return		;funcret
  3991  001E42                     __end_of_delayMili:
  3992                           	callstack 0
  3993                           
  3994 ;; *************** function _kpReadKey *****************
  3995 ;; Defined at:
  3996 ;;		line 17 in file "keypad.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  i               2    3[COMRAM] int 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      unsigned char 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4010 ;;      Params:         0       0       0       0       0       0       0
  4011 ;;      Locals:         2       0       0       0       0       0       0
  4012 ;;      Temps:          3       0       0       0       0       0       0
  4013 ;;      Totals:         5       0       0       0       0       0       0
  4014 ;;Total ram usage:        5 bytes
  4015 ;; Hardware stack levels used: 1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_LeTeclado
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text26
  4025  00197E                     __ptext26:
  4026                           	callstack 0
  4027  00197E                     _kpReadKey:
  4028                           	callstack 30
  4029  00197E                     
  4030                           ;keypad.c: 18:  int i;;keypad.c: 19:  for(i=0;i<10;i++){
  4031  00197E  0E00               	movlw	0
  4032  001980  6E05               	movwf	(kpReadKey@i+1)^0,c
  4033  001982  0E00               	movlw	0
  4034  001984  6E04               	movwf	kpReadKey@i^0,c
  4035  001986                     l1418:
  4036                           
  4037                           ;keypad.c: 20:   if (((keys) & (1<<(i)))){
  4038  001986  C004  F001         	movff	kpReadKey@i,??_kpReadKey
  4039  00198A  0E01               	movlw	1
  4040  00198C  6E02               	movwf	(??_kpReadKey+1)^0,c
  4041  00198E  0E00               	movlw	0
  4042  001990  6E03               	movwf	(??_kpReadKey+2)^0,c
  4043  001992  2A01               	incf	??_kpReadKey^0,f,c
  4044  001994  EFCF  F00C         	goto	u784
  4045  001998                     u785:
  4046  001998  90D8               	bcf	status,0,c
  4047  00199A  3602               	rlcf	(??_kpReadKey+1)^0,f,c
  4048  00199C  3603               	rlcf	(??_kpReadKey+2)^0,f,c
  4049  00199E                     u784:
  4050  00199E  2E01               	decfsz	??_kpReadKey^0,f,c
  4051  0019A0  EFCC  F00C         	goto	u785
  4052  0019A4  5024               	movf	_keys^0,w,c
  4053  0019A6  1602               	andwf	(??_kpReadKey+1)^0,f,c
  4054  0019A8  5025               	movf	(_keys+1)^0,w,c
  4055  0019AA  1603               	andwf	(??_kpReadKey+2)^0,f,c
  4056  0019AC  5002               	movf	(??_kpReadKey+1)^0,w,c
  4057  0019AE  1003               	iorwf	(??_kpReadKey+2)^0,w,c
  4058  0019B0  B4D8               	btfsc	status,2,c
  4059  0019B2  EFDD  F00C         	goto	u791
  4060  0019B6  EFDF  F00C         	goto	u790
  4061  0019BA                     u791:
  4062  0019BA  EFE9  F00C         	goto	l1424
  4063  0019BE                     u790:
  4064  0019BE                     
  4065                           ;keypad.c: 21:    return charKey[i];
  4066  0019BE  0E11               	movlw	low _charKey
  4067  0019C0  2404               	addwf	kpReadKey@i^0,w,c
  4068  0019C2  6EF6               	movwf	tblptrl,c
  4069  0019C4  0E06               	movlw	high _charKey
  4070  0019C6  2005               	addwfc	(kpReadKey@i+1)^0,w,c
  4071  0019C8  6EF7               	movwf	tblptrh,c
  4072  0019CA                     	if	0	;There are less than 3 active tblptr bytes
  4073  0019CA                     	endif
  4074  0019CA  0008               	tblrd		*
  4075  0019CC  50F5               	movf	tablat,w,c
  4076  0019CE  EFFA  F00C         	goto	l211
  4077  0019D2                     l1424:
  4078                           
  4079                           ;keypad.c: 23:  }
  4080  0019D2  4A04               	infsnz	kpReadKey@i^0,f,c
  4081  0019D4  2A05               	incf	(kpReadKey@i+1)^0,f,c
  4082  0019D6  BE05               	btfsc	(kpReadKey@i+1)^0,7,c
  4083  0019D8  EFF7  F00C         	goto	u801
  4084  0019DC  5005               	movf	(kpReadKey@i+1)^0,w,c
  4085  0019DE  E109               	bnz	u800
  4086  0019E0  0E0A               	movlw	10
  4087  0019E2  5C04               	subwf	kpReadKey@i^0,w,c
  4088  0019E4  A0D8               	btfss	status,0,c
  4089  0019E6  EFF7  F00C         	goto	u801
  4090  0019EA  EFF9  F00C         	goto	u800
  4091  0019EE                     u801:
  4092  0019EE  EFC3  F00C         	goto	l1418
  4093  0019F2                     u800:
  4094  0019F2                     
  4095                           ;keypad.c: 25:  return 0;
  4096  0019F2  0E00               	movlw	0
  4097  0019F4                     l211:
  4098  0019F4  0012               	return		;funcret
  4099  0019F6                     __end_of_kpReadKey:
  4100                           	callstack 0
  4101                           
  4102 ;; *************** function _kpRead *****************
  4103 ;; Defined at:
  4104 ;;		line 14 in file "keypad.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;		None
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  2    0[COMRAM] unsigned int 
  4111 ;; Registers used:
  4112 ;;		None
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4118 ;;      Params:         2       0       0       0       0       0       0
  4119 ;;      Locals:         0       0       0       0       0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0
  4121 ;;      Totals:         2       0       0       0       0       0       0
  4122 ;;Total ram usage:        2 bytes
  4123 ;; Hardware stack levels used: 1
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_LeTeclado
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text27
  4132  001FBE                     __ptext27:
  4133                           	callstack 0
  4134  001FBE                     _kpRead:
  4135                           	callstack 29
  4136  001FBE                     
  4137                           ;keypad.c: 15:     return keys;
  4138  001FBE  C024  F001         	movff	_keys,?_kpRead
  4139  001FC2  C025  F002         	movff	_keys+1,?_kpRead+1
  4140  001FC6  0012               	return		;funcret
  4141  001FC8                     __end_of_kpRead:
  4142                           	callstack 0
  4143                           
  4144 ;; *************** function _kpDebounce *****************
  4145 ;; Defined at:
  4146 ;;		line 27 in file "keypad.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  i               2   12[COMRAM] int 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4160 ;;      Params:         0       0       0       0       0       0       0
  4161 ;;      Locals:         2       0       0       0       0       0       0
  4162 ;;      Temps:          3       0       0       0       0       0       0
  4163 ;;      Totals:         5       0       0       0       0       0       0
  4164 ;;Total ram usage:        5 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; Hardware stack levels required when called: 3
  4167 ;; This function calls:
  4168 ;;		_digitalRead
  4169 ;;		_soWrite
  4170 ;; This function is called by:
  4171 ;;		_LeTeclado
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text28
  4177  00149E                     __ptext28:
  4178                           	callstack 0
  4179  00149E                     _kpDebounce:
  4180                           	callstack 27
  4181  00149E                     
  4182                           ;keypad.c: 28:     int i;;keypad.c: 29:     static unsigned char tempo;;keypad.c: 30:   
      +                            static unsigned int newRead;;keypad.c: 31:     static unsigned int oldRead;;keypad.c: 
      +                          32:     newRead = 0;
  4183  00149E  0E00               	movlw	0
  4184  0014A0  6E23               	movwf	(kpDebounce@newRead+1)^0,c
  4185  0014A2  0E00               	movlw	0
  4186  0014A4  6E22               	movwf	kpDebounce@newRead^0,c
  4187                           
  4188                           ;keypad.c: 33:     for(i = 0; i<5; i++){
  4189  0014A6  0E00               	movlw	0
  4190  0014A8  6E0E               	movwf	(kpDebounce@i+1)^0,c
  4191  0014AA  0E00               	movlw	0
  4192  0014AC  6E0D               	movwf	kpDebounce@i^0,c
  4193  0014AE                     l2114:
  4194  0014AE  BE0E               	btfsc	(kpDebounce@i+1)^0,7,c
  4195  0014B0  EF63  F00A         	goto	u1701
  4196  0014B4  500E               	movf	(kpDebounce@i+1)^0,w,c
  4197  0014B6  E109               	bnz	u1700
  4198  0014B8  0E05               	movlw	5
  4199  0014BA  5C0D               	subwf	kpDebounce@i^0,w,c
  4200  0014BC  A0D8               	btfss	status,0,c
  4201  0014BE  EF63  F00A         	goto	u1701
  4202  0014C2  EF65  F00A         	goto	u1700
  4203  0014C6                     u1701:
  4204  0014C6  EF67  F00A         	goto	l2118
  4205  0014CA                     u1700:
  4206  0014CA  EFC8  F00A         	goto	l2130
  4207  0014CE                     l2118:
  4208                           
  4209                           ;keypad.c: 35:       soWrite(1<<(i+3));
  4210  0014CE  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  4211  0014D2  0E03               	movlw	3
  4212  0014D4  260A               	addwf	??_kpDebounce^0,f,c
  4213  0014D6  0E01               	movlw	1
  4214  0014D8  6E0B               	movwf	(??_kpDebounce+1)^0,c
  4215  0014DA  0E00               	movlw	0
  4216  0014DC  6E0C               	movwf	(??_kpDebounce+2)^0,c
  4217  0014DE  2A0A               	incf	??_kpDebounce^0,f,c
  4218  0014E0  EF75  F00A         	goto	u1714
  4219  0014E4                     u1715:
  4220  0014E4  90D8               	bcf	status,0,c
  4221  0014E6  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  4222  0014E8  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  4223  0014EA                     u1714:
  4224  0014EA  2E0A               	decfsz	??_kpDebounce^0,f,c
  4225  0014EC  EF72  F00A         	goto	u1715
  4226  0014F0  C00B  F007         	movff	??_kpDebounce+1,soWrite@value
  4227  0014F4  C00C  F008         	movff	??_kpDebounce+2,soWrite@value+1
  4228  0014F8  EC48  F00E         	call	_soWrite	;wreg free
  4229                           
  4230                           ;keypad.c: 36:       if(digitalRead(PIN_B2)){
  4231  0014FC  0E00               	movlw	0
  4232  0014FE  6E02               	movwf	(digitalRead@pin+1)^0,c
  4233  001500  0E0A               	movlw	10
  4234  001502  6E01               	movwf	digitalRead@pin^0,c
  4235  001504  EC9A  F009         	call	_digitalRead	;wreg free
  4236  001508  5001               	movf	?_digitalRead^0,w,c
  4237  00150A  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4238  00150C  B4D8               	btfsc	status,2,c
  4239  00150E  EF8B  F00A         	goto	u1721
  4240  001512  EF8D  F00A         	goto	u1720
  4241  001516                     u1721:
  4242  001516  EFA0  F00A         	goto	l2122
  4243  00151A                     u1720:
  4244  00151A                     
  4245                           ;keypad.c: 37:         ((newRead) |= (1<<(i)));
  4246  00151A  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  4247  00151E  0E01               	movlw	1
  4248  001520  6E0B               	movwf	(??_kpDebounce+1)^0,c
  4249  001522  0E00               	movlw	0
  4250  001524  6E0C               	movwf	(??_kpDebounce+2)^0,c
  4251  001526  2A0A               	incf	??_kpDebounce^0,f,c
  4252  001528  EF99  F00A         	goto	u1734
  4253  00152C                     u1735:
  4254  00152C  90D8               	bcf	status,0,c
  4255  00152E  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  4256  001530  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  4257  001532                     u1734:
  4258  001532  2E0A               	decfsz	??_kpDebounce^0,f,c
  4259  001534  EF96  F00A         	goto	u1735
  4260  001538  500B               	movf	(??_kpDebounce+1)^0,w,c
  4261  00153A  1222               	iorwf	kpDebounce@newRead^0,f,c
  4262  00153C  500C               	movf	(??_kpDebounce+2)^0,w,c
  4263  00153E  1223               	iorwf	(kpDebounce@newRead+1)^0,f,c
  4264  001540                     l2122:
  4265                           
  4266                           ;keypad.c: 39:       if(digitalRead(PIN_B1)){
  4267  001540  0E00               	movlw	0
  4268  001542  6E02               	movwf	(digitalRead@pin+1)^0,c
  4269  001544  0E09               	movlw	9
  4270  001546  6E01               	movwf	digitalRead@pin^0,c
  4271  001548  EC9A  F009         	call	_digitalRead	;wreg free
  4272  00154C  5001               	movf	?_digitalRead^0,w,c
  4273  00154E  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4274  001550  B4D8               	btfsc	status,2,c
  4275  001552  EFAD  F00A         	goto	u1741
  4276  001556  EFAF  F00A         	goto	u1740
  4277  00155A                     u1741:
  4278  00155A  EFC4  F00A         	goto	l2126
  4279  00155E                     u1740:
  4280  00155E                     
  4281                           ;keypad.c: 40:         ((newRead) |= (1<<((i+5))));
  4282  00155E  C00D  F00A         	movff	kpDebounce@i,??_kpDebounce
  4283  001562  0E05               	movlw	5
  4284  001564  260A               	addwf	??_kpDebounce^0,f,c
  4285  001566  0E01               	movlw	1
  4286  001568  6E0B               	movwf	(??_kpDebounce+1)^0,c
  4287  00156A  0E00               	movlw	0
  4288  00156C  6E0C               	movwf	(??_kpDebounce+2)^0,c
  4289  00156E  2A0A               	incf	??_kpDebounce^0,f,c
  4290  001570  EFBD  F00A         	goto	u1754
  4291  001574                     u1755:
  4292  001574  90D8               	bcf	status,0,c
  4293  001576  360B               	rlcf	(??_kpDebounce+1)^0,f,c
  4294  001578  360C               	rlcf	(??_kpDebounce+2)^0,f,c
  4295  00157A                     u1754:
  4296  00157A  2E0A               	decfsz	??_kpDebounce^0,f,c
  4297  00157C  EFBA  F00A         	goto	u1755
  4298  001580  500B               	movf	(??_kpDebounce+1)^0,w,c
  4299  001582  1222               	iorwf	kpDebounce@newRead^0,f,c
  4300  001584  500C               	movf	(??_kpDebounce+2)^0,w,c
  4301  001586  1223               	iorwf	(kpDebounce@newRead+1)^0,f,c
  4302  001588                     l2126:
  4303                           
  4304                           ;keypad.c: 42:     }
  4305  001588  4A0D               	infsnz	kpDebounce@i^0,f,c
  4306  00158A  2A0E               	incf	(kpDebounce@i+1)^0,f,c
  4307  00158C  EF57  F00A         	goto	l2114
  4308  001590                     l2130:
  4309                           
  4310                           ;keypad.c: 43:     if (oldRead == newRead) {
  4311  001590  5022               	movf	kpDebounce@newRead^0,w,c
  4312  001592  1820               	xorwf	kpDebounce@oldRead^0,w,c
  4313  001594  E107               	bnz	u1761
  4314  001596  5023               	movf	(kpDebounce@newRead+1)^0,w,c
  4315  001598  1821               	xorwf	(kpDebounce@oldRead+1)^0,w,c
  4316  00159A  A4D8               	btfss	status,2,c
  4317  00159C  EFD2  F00A         	goto	u1761
  4318  0015A0  EFD4  F00A         	goto	u1760
  4319  0015A4                     u1761:
  4320  0015A4  EFD7  F00A         	goto	l2134
  4321  0015A8                     u1760:
  4322  0015A8                     
  4323                           ;keypad.c: 44:         tempo--;
  4324  0015A8  0631               	decf	kpDebounce@tempo^0,f,c
  4325                           
  4326                           ;keypad.c: 45:     } else {
  4327  0015AA  EFDD  F00A         	goto	l225
  4328  0015AE                     l2134:
  4329                           
  4330                           ;keypad.c: 46:         tempo = 1;
  4331  0015AE  0E01               	movlw	1
  4332  0015B0  6E31               	movwf	kpDebounce@tempo^0,c
  4333  0015B2                     
  4334                           ;keypad.c: 47:         oldRead = newRead;
  4335  0015B2  C022  F020         	movff	kpDebounce@newRead,kpDebounce@oldRead
  4336  0015B6  C023  F021         	movff	kpDebounce@newRead+1,kpDebounce@oldRead+1
  4337  0015BA                     l225:
  4338                           
  4339                           ;keypad.c: 49:     if (tempo == 0) {
  4340  0015BA  5031               	movf	kpDebounce@tempo^0,w,c
  4341  0015BC  A4D8               	btfss	status,2,c
  4342  0015BE  EFE3  F00A         	goto	u1771
  4343  0015C2  EFE5  F00A         	goto	u1770
  4344  0015C6                     u1771:
  4345  0015C6  EFE9  F00A         	goto	l227
  4346  0015CA                     u1770:
  4347  0015CA                     
  4348                           ;keypad.c: 50:         keys = oldRead;
  4349  0015CA  C020  F024         	movff	kpDebounce@oldRead,_keys
  4350  0015CE  C021  F025         	movff	kpDebounce@oldRead+1,_keys+1
  4351  0015D2                     l227:
  4352  0015D2  0012               	return		;funcret
  4353  0015D4                     __end_of_kpDebounce:
  4354                           	callstack 0
  4355                           
  4356 ;; *************** function _soWrite *****************
  4357 ;; Defined at:
  4358 ;;		line 18 in file "so.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  value           2    6[COMRAM] int 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  i               1    8[COMRAM] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4372 ;;      Params:         2       0       0       0       0       0       0
  4373 ;;      Locals:         1       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0
  4375 ;;      Totals:         3       0       0       0       0       0       0
  4376 ;;Total ram usage:        3 bytes
  4377 ;; Hardware stack levels used: 1
  4378 ;; Hardware stack levels required when called: 2
  4379 ;; This function calls:
  4380 ;;		_PulseClockData
  4381 ;;		_PulseEnClock
  4382 ;;		_digitalWrite
  4383 ;; This function is called by:
  4384 ;;		_kpDebounce
  4385 ;;		_pushNibble
  4386 ;;		_pushByte
  4387 ;;		_ssdUpdate
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text29
  4392  001C90                     __ptext29:
  4393                           	callstack 0
  4394  001C90                     _soWrite:
  4395                           	callstack 25
  4396  001C90                     
  4397                           ;so.c: 19:  char i;;so.c: 20:  digitalWrite(PIN_B0, 0);
  4398  001C90  0E00               	movlw	0
  4399  001C92  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4400  001C94  0E08               	movlw	8
  4401  001C96  6E01               	movwf	digitalWrite@pin^0,c
  4402  001C98  0E00               	movlw	0
  4403  001C9A  6E04               	movwf	(digitalWrite@value+1)^0,c
  4404  001C9C  0E00               	movlw	0
  4405  001C9E  6E03               	movwf	digitalWrite@value^0,c
  4406  001CA0  EC73  F008         	call	_digitalWrite	;wreg free
  4407  001CA4                     
  4408                           ;so.c: 21:  for (i = 0; i < 8; i++) {
  4409  001CA4  0E00               	movlw	0
  4410  001CA6  6E09               	movwf	soWrite@i^0,c
  4411  001CA8                     l1858:
  4412                           
  4413                           ;so.c: 22:   digitalWrite(PIN_D6, value & 0x80);
  4414  001CA8  0E00               	movlw	0
  4415  001CAA  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4416  001CAC  0E1E               	movlw	30
  4417  001CAE  6E01               	movwf	digitalWrite@pin^0,c
  4418  001CB0  0E80               	movlw	128
  4419  001CB2  1407               	andwf	soWrite@value^0,w,c
  4420  001CB4  6E03               	movwf	digitalWrite@value^0,c
  4421  001CB6  6A04               	clrf	(digitalWrite@value+1)^0,c
  4422  001CB8  EC73  F008         	call	_digitalWrite	;wreg free
  4423                           
  4424                           ;so.c: 23:   PulseClockData();
  4425  001CBC  EC4D  F00F         	call	_PulseClockData	;wreg free
  4426  001CC0                     
  4427                           ;so.c: 24:   value <<= 1;
  4428  001CC0  90D8               	bcf	status,0,c
  4429  001CC2  3607               	rlcf	soWrite@value^0,f,c
  4430  001CC4  3608               	rlcf	(soWrite@value+1)^0,f,c
  4431  001CC6                     
  4432                           ;so.c: 25:  }
  4433  001CC6  2A09               	incf	soWrite@i^0,f,c
  4434  001CC8  0E07               	movlw	7
  4435  001CCA  6409               	cpfsgt	soWrite@i^0,c
  4436  001CCC  EF6A  F00E         	goto	u1211
  4437  001CD0  EF6C  F00E         	goto	u1210
  4438  001CD4                     u1211:
  4439  001CD4  EF54  F00E         	goto	l1858
  4440  001CD8                     u1210:
  4441  001CD8                     
  4442                           ;so.c: 26:  PulseEnClock();
  4443  001CD8  EC38  F00F         	call	_PulseEnClock	;wreg free
  4444  001CDC  0012               	return		;funcret
  4445  001CDE                     __end_of_soWrite:
  4446                           	callstack 0
  4447                           
  4448 ;; *************** function _PulseEnClock *****************
  4449 ;; Defined at:
  4450 ;;		line 9 in file "so.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4464 ;;      Params:         0       0       0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used: 1
  4470 ;; Hardware stack levels required when called: 1
  4471 ;; This function calls:
  4472 ;;		_digitalWrite
  4473 ;; This function is called by:
  4474 ;;		_soWrite
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text30
  4479  001E70                     __ptext30:
  4480                           	callstack 0
  4481  001E70                     _PulseEnClock:
  4482                           	callstack 25
  4483  001E70                     
  4484                           ;so.c: 10:  digitalWrite(PIN_D7, 1);
  4485  001E70  0E00               	movlw	0
  4486  001E72  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4487  001E74  0E1F               	movlw	31
  4488  001E76  6E01               	movwf	digitalWrite@pin^0,c
  4489  001E78  0E00               	movlw	0
  4490  001E7A  6E04               	movwf	(digitalWrite@value+1)^0,c
  4491  001E7C  0E01               	movlw	1
  4492  001E7E  6E03               	movwf	digitalWrite@value^0,c
  4493  001E80  EC73  F008         	call	_digitalWrite	;wreg free
  4494                           
  4495                           ;so.c: 11:  digitalWrite(PIN_D7, 0);
  4496  001E84  0E00               	movlw	0
  4497  001E86  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4498  001E88  0E1F               	movlw	31
  4499  001E8A  6E01               	movwf	digitalWrite@pin^0,c
  4500  001E8C  0E00               	movlw	0
  4501  001E8E  6E04               	movwf	(digitalWrite@value+1)^0,c
  4502  001E90  0E00               	movlw	0
  4503  001E92  6E03               	movwf	digitalWrite@value^0,c
  4504  001E94  EC73  F008         	call	_digitalWrite	;wreg free
  4505  001E98  0012               	return		;funcret
  4506  001E9A                     __end_of_PulseEnClock:
  4507                           	callstack 0
  4508                           
  4509 ;; *************** function _PulseClockData *****************
  4510 ;; Defined at:
  4511 ;;		line 14 in file "so.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2, status,0, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4525 ;;      Params:         0       0       0       0       0       0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used: 1
  4531 ;; Hardware stack levels required when called: 1
  4532 ;; This function calls:
  4533 ;;		_digitalWrite
  4534 ;; This function is called by:
  4535 ;;		_soWrite
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text31
  4540  001E9A                     __ptext31:
  4541                           	callstack 0
  4542  001E9A                     _PulseClockData:
  4543                           	callstack 25
  4544  001E9A                     
  4545                           ;so.c: 15:  digitalWrite(PIN_B0, 1);
  4546  001E9A  0E00               	movlw	0
  4547  001E9C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4548  001E9E  0E08               	movlw	8
  4549  001EA0  6E01               	movwf	digitalWrite@pin^0,c
  4550  001EA2  0E00               	movlw	0
  4551  001EA4  6E04               	movwf	(digitalWrite@value+1)^0,c
  4552  001EA6  0E01               	movlw	1
  4553  001EA8  6E03               	movwf	digitalWrite@value^0,c
  4554  001EAA  EC73  F008         	call	_digitalWrite	;wreg free
  4555                           
  4556                           ;so.c: 16:  digitalWrite(PIN_B0, 0);
  4557  001EAE  0E00               	movlw	0
  4558  001EB0  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4559  001EB2  0E08               	movlw	8
  4560  001EB4  6E01               	movwf	digitalWrite@pin^0,c
  4561  001EB6  0E00               	movlw	0
  4562  001EB8  6E04               	movwf	(digitalWrite@value+1)^0,c
  4563  001EBA  0E00               	movlw	0
  4564  001EBC  6E03               	movwf	digitalWrite@value^0,c
  4565  001EBE  EC73  F008         	call	_digitalWrite	;wreg free
  4566  001EC2  0012               	return		;funcret
  4567  001EC4                     __end_of_PulseClockData:
  4568                           	callstack 0
  4569                           
  4570 ;; *************** function _digitalWrite *****************
  4571 ;; Defined at:
  4572 ;;		line 14 in file "io.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  pin             2    0[COMRAM] int 
  4575 ;;  value           2    2[COMRAM] int 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;		None
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4587 ;;      Params:         4       0       0       0       0       0       0
  4588 ;;      Locals:         0       0       0       0       0       0       0
  4589 ;;      Temps:          2       0       0       0       0       0       0
  4590 ;;      Totals:         6       0       0       0       0       0       0
  4591 ;;Total ram usage:        6 bytes
  4592 ;; Hardware stack levels used: 1
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_pulseEnablePin
  4597 ;;		_pushNibble
  4598 ;;		_pushByte
  4599 ;;		_PulseEnClock
  4600 ;;		_PulseClockData
  4601 ;;		_soWrite
  4602 ;;		_ssdUpdate
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text32
  4607  0010E6                     __ptext32:
  4608                           	callstack 0
  4609  0010E6                     _digitalWrite:
  4610                           	callstack 26
  4611  0010E6                     
  4612                           ;io.c: 16:     if(pin <8){
  4613  0010E6  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4614  0010E8  EF81  F008         	goto	u1010
  4615  0010EC  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4616  0010EE  E107               	bnz	u1011
  4617  0010F0  0E08               	movlw	8
  4618  0010F2  5C01               	subwf	digitalWrite@pin^0,w,c
  4619  0010F4  B0D8               	btfsc	status,0,c
  4620  0010F6  EF7F  F008         	goto	u1011
  4621  0010FA  EF81  F008         	goto	u1010
  4622  0010FE                     u1011:
  4623  0010FE  EFAB  F008         	goto	l1814
  4624  001102                     u1010:
  4625  001102                     
  4626                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4627  001102  5003               	movf	digitalWrite@value^0,w,c
  4628  001104  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4629  001106  B4D8               	btfsc	status,2,c
  4630  001108  EF88  F008         	goto	u1021
  4631  00110C  EF8A  F008         	goto	u1020
  4632  001110                     u1021:
  4633  001110  EF9A  F008         	goto	l1812
  4634  001114                     u1020:
  4635  001114  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4636  001118  0E01               	movlw	1
  4637  00111A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4638  00111C  2A05               	incf	??_digitalWrite^0,f,c
  4639  00111E  EF93  F008         	goto	u1034
  4640  001122                     u1035:
  4641  001122  90D8               	bcf	status,0,c
  4642  001124  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4643  001126                     u1034:
  4644  001126  2E05               	decfsz	??_digitalWrite^0,f,c
  4645  001128  EF91  F008         	goto	u1035
  4646  00112C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4647  00112E  1280               	iorwf	128,f,c	;volatile
  4648  001130  EF99  F009         	goto	l154
  4649  001134                     l1812:
  4650  001134  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4651  001138  0E01               	movlw	1
  4652  00113A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4653  00113C  2A05               	incf	??_digitalWrite^0,f,c
  4654  00113E  EFA3  F008         	goto	u1044
  4655  001142                     u1045:
  4656  001142  90D8               	bcf	status,0,c
  4657  001144  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4658  001146                     u1044:
  4659  001146  2E05               	decfsz	??_digitalWrite^0,f,c
  4660  001148  EFA1  F008         	goto	u1045
  4661  00114C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4662  00114E  0AFF               	xorlw	255
  4663  001150  1680               	andwf	128,f,c	;volatile
  4664  001152  EF99  F009         	goto	l154
  4665  001156                     l1814:
  4666  001156  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4667  001158  EFB9  F008         	goto	u1050
  4668  00115C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4669  00115E  E107               	bnz	u1051
  4670  001160  0E10               	movlw	16
  4671  001162  5C01               	subwf	digitalWrite@pin^0,w,c
  4672  001164  B0D8               	btfsc	status,0,c
  4673  001166  EFB7  F008         	goto	u1051
  4674  00116A  EFB9  F008         	goto	u1050
  4675  00116E                     u1051:
  4676  00116E  EFE7  F008         	goto	l1822
  4677  001172                     u1050:
  4678  001172                     
  4679                           ;io.c: 20:         pin -=8;
  4680  001172  0EF8               	movlw	248
  4681  001174  2601               	addwf	digitalWrite@pin^0,f,c
  4682  001176  0EFF               	movlw	255
  4683  001178  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4684                           
  4685                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4686  00117A  5003               	movf	digitalWrite@value^0,w,c
  4687  00117C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4688  00117E  B4D8               	btfsc	status,2,c
  4689  001180  EFC4  F008         	goto	u1061
  4690  001184  EFC6  F008         	goto	u1060
  4691  001188                     u1061:
  4692  001188  EFD6  F008         	goto	l1820
  4693  00118C                     u1060:
  4694  00118C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4695  001190  0E01               	movlw	1
  4696  001192  6E06               	movwf	(??_digitalWrite+1)^0,c
  4697  001194  2A05               	incf	??_digitalWrite^0,f,c
  4698  001196  EFCF  F008         	goto	u1074
  4699  00119A                     u1075:
  4700  00119A  90D8               	bcf	status,0,c
  4701  00119C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4702  00119E                     u1074:
  4703  00119E  2E05               	decfsz	??_digitalWrite^0,f,c
  4704  0011A0  EFCD  F008         	goto	u1075
  4705  0011A4  5006               	movf	(??_digitalWrite+1)^0,w,c
  4706  0011A6  1281               	iorwf	129,f,c	;volatile
  4707  0011A8  EF99  F009         	goto	l154
  4708  0011AC                     l1820:
  4709  0011AC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4710  0011B0  0E01               	movlw	1
  4711  0011B2  6E06               	movwf	(??_digitalWrite+1)^0,c
  4712  0011B4  2A05               	incf	??_digitalWrite^0,f,c
  4713  0011B6  EFDF  F008         	goto	u1084
  4714  0011BA                     u1085:
  4715  0011BA  90D8               	bcf	status,0,c
  4716  0011BC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4717  0011BE                     u1084:
  4718  0011BE  2E05               	decfsz	??_digitalWrite^0,f,c
  4719  0011C0  EFDD  F008         	goto	u1085
  4720  0011C4  5006               	movf	(??_digitalWrite+1)^0,w,c
  4721  0011C6  0AFF               	xorlw	255
  4722  0011C8  1681               	andwf	129,f,c	;volatile
  4723  0011CA  EF99  F009         	goto	l154
  4724  0011CE                     l1822:
  4725  0011CE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4726  0011D0  EFF5  F008         	goto	u1090
  4727  0011D4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4728  0011D6  E107               	bnz	u1091
  4729  0011D8  0E18               	movlw	24
  4730  0011DA  5C01               	subwf	digitalWrite@pin^0,w,c
  4731  0011DC  B0D8               	btfsc	status,0,c
  4732  0011DE  EFF3  F008         	goto	u1091
  4733  0011E2  EFF5  F008         	goto	u1090
  4734  0011E6                     u1091:
  4735  0011E6  EF23  F009         	goto	l1830
  4736  0011EA                     u1090:
  4737  0011EA                     
  4738                           ;io.c: 24:         pin -=16;
  4739  0011EA  0EF0               	movlw	240
  4740  0011EC  2601               	addwf	digitalWrite@pin^0,f,c
  4741  0011EE  0EFF               	movlw	255
  4742  0011F0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4743                           
  4744                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  4745  0011F2  5003               	movf	digitalWrite@value^0,w,c
  4746  0011F4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4747  0011F6  B4D8               	btfsc	status,2,c
  4748  0011F8  EF00  F009         	goto	u1101
  4749  0011FC  EF02  F009         	goto	u1100
  4750  001200                     u1101:
  4751  001200  EF12  F009         	goto	l1828
  4752  001204                     u1100:
  4753  001204  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4754  001208  0E01               	movlw	1
  4755  00120A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4756  00120C  2A05               	incf	??_digitalWrite^0,f,c
  4757  00120E  EF0B  F009         	goto	u1114
  4758  001212                     u1115:
  4759  001212  90D8               	bcf	status,0,c
  4760  001214  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4761  001216                     u1114:
  4762  001216  2E05               	decfsz	??_digitalWrite^0,f,c
  4763  001218  EF09  F009         	goto	u1115
  4764  00121C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4765  00121E  1282               	iorwf	130,f,c	;volatile
  4766  001220  EF99  F009         	goto	l154
  4767  001224                     l1828:
  4768  001224  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4769  001228  0E01               	movlw	1
  4770  00122A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4771  00122C  2A05               	incf	??_digitalWrite^0,f,c
  4772  00122E  EF1B  F009         	goto	u1124
  4773  001232                     u1125:
  4774  001232  90D8               	bcf	status,0,c
  4775  001234  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4776  001236                     u1124:
  4777  001236  2E05               	decfsz	??_digitalWrite^0,f,c
  4778  001238  EF19  F009         	goto	u1125
  4779  00123C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4780  00123E  0AFF               	xorlw	255
  4781  001240  1682               	andwf	130,f,c	;volatile
  4782  001242  EF99  F009         	goto	l154
  4783  001246                     l1830:
  4784  001246  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4785  001248  EF31  F009         	goto	u1130
  4786  00124C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4787  00124E  E107               	bnz	u1131
  4788  001250  0E20               	movlw	32
  4789  001252  5C01               	subwf	digitalWrite@pin^0,w,c
  4790  001254  B0D8               	btfsc	status,0,c
  4791  001256  EF2F  F009         	goto	u1131
  4792  00125A  EF31  F009         	goto	u1130
  4793  00125E                     u1131:
  4794  00125E  EF5F  F009         	goto	l1838
  4795  001262                     u1130:
  4796  001262                     
  4797                           ;io.c: 28:         pin -=24;
  4798  001262  0EE8               	movlw	232
  4799  001264  2601               	addwf	digitalWrite@pin^0,f,c
  4800  001266  0EFF               	movlw	255
  4801  001268  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4802                           
  4803                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  4804  00126A  5003               	movf	digitalWrite@value^0,w,c
  4805  00126C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4806  00126E  B4D8               	btfsc	status,2,c
  4807  001270  EF3C  F009         	goto	u1141
  4808  001274  EF3E  F009         	goto	u1140
  4809  001278                     u1141:
  4810  001278  EF4E  F009         	goto	l1836
  4811  00127C                     u1140:
  4812  00127C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4813  001280  0E01               	movlw	1
  4814  001282  6E06               	movwf	(??_digitalWrite+1)^0,c
  4815  001284  2A05               	incf	??_digitalWrite^0,f,c
  4816  001286  EF47  F009         	goto	u1154
  4817  00128A                     u1155:
  4818  00128A  90D8               	bcf	status,0,c
  4819  00128C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4820  00128E                     u1154:
  4821  00128E  2E05               	decfsz	??_digitalWrite^0,f,c
  4822  001290  EF45  F009         	goto	u1155
  4823  001294  5006               	movf	(??_digitalWrite+1)^0,w,c
  4824  001296  1283               	iorwf	131,f,c	;volatile
  4825  001298  EF99  F009         	goto	l154
  4826  00129C                     l1836:
  4827  00129C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4828  0012A0  0E01               	movlw	1
  4829  0012A2  6E06               	movwf	(??_digitalWrite+1)^0,c
  4830  0012A4  2A05               	incf	??_digitalWrite^0,f,c
  4831  0012A6  EF57  F009         	goto	u1164
  4832  0012AA                     u1165:
  4833  0012AA  90D8               	bcf	status,0,c
  4834  0012AC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4835  0012AE                     u1164:
  4836  0012AE  2E05               	decfsz	??_digitalWrite^0,f,c
  4837  0012B0  EF55  F009         	goto	u1165
  4838  0012B4  5006               	movf	(??_digitalWrite+1)^0,w,c
  4839  0012B6  0AFF               	xorlw	255
  4840  0012B8  1683               	andwf	131,f,c	;volatile
  4841  0012BA  EF99  F009         	goto	l154
  4842  0012BE                     l1838:
  4843  0012BE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4844  0012C0  EF6D  F009         	goto	u1170
  4845  0012C4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4846  0012C6  E107               	bnz	u1171
  4847  0012C8  0E28               	movlw	40
  4848  0012CA  5C01               	subwf	digitalWrite@pin^0,w,c
  4849  0012CC  B0D8               	btfsc	status,0,c
  4850  0012CE  EF6B  F009         	goto	u1171
  4851  0012D2  EF6D  F009         	goto	u1170
  4852  0012D6                     u1171:
  4853  0012D6  EF99  F009         	goto	l154
  4854  0012DA                     u1170:
  4855  0012DA                     
  4856                           ;io.c: 32:         pin -=32;
  4857  0012DA  0EE0               	movlw	224
  4858  0012DC  2601               	addwf	digitalWrite@pin^0,f,c
  4859  0012DE  0EFF               	movlw	255
  4860  0012E0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4861                           
  4862                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  4863  0012E2  5003               	movf	digitalWrite@value^0,w,c
  4864  0012E4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4865  0012E6  B4D8               	btfsc	status,2,c
  4866  0012E8  EF78  F009         	goto	u1181
  4867  0012EC  EF7A  F009         	goto	u1180
  4868  0012F0                     u1181:
  4869  0012F0  EF8A  F009         	goto	l1844
  4870  0012F4                     u1180:
  4871  0012F4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4872  0012F8  0E01               	movlw	1
  4873  0012FA  6E06               	movwf	(??_digitalWrite+1)^0,c
  4874  0012FC  2A05               	incf	??_digitalWrite^0,f,c
  4875  0012FE  EF83  F009         	goto	u1194
  4876  001302                     u1195:
  4877  001302  90D8               	bcf	status,0,c
  4878  001304  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4879  001306                     u1194:
  4880  001306  2E05               	decfsz	??_digitalWrite^0,f,c
  4881  001308  EF81  F009         	goto	u1195
  4882  00130C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4883  00130E  1284               	iorwf	132,f,c	;volatile
  4884  001310  EF99  F009         	goto	l154
  4885  001314                     l1844:
  4886  001314  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4887  001318  0E01               	movlw	1
  4888  00131A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4889  00131C  2A05               	incf	??_digitalWrite^0,f,c
  4890  00131E  EF93  F009         	goto	u1204
  4891  001322                     u1205:
  4892  001322  90D8               	bcf	status,0,c
  4893  001324  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4894  001326                     u1204:
  4895  001326  2E05               	decfsz	??_digitalWrite^0,f,c
  4896  001328  EF91  F009         	goto	u1205
  4897  00132C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4898  00132E  0AFF               	xorlw	255
  4899  001330  1684               	andwf	132,f,c	;volatile
  4900  001332                     l154:
  4901  001332  0012               	return		;funcret
  4902  001334                     __end_of_digitalWrite:
  4903                           	callstack 0
  4904                           
  4905 ;; *************** function _digitalRead *****************
  4906 ;; Defined at:
  4907 ;;		line 39 in file "io.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  pin             2    0[COMRAM] int 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;		None
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  2    0[COMRAM] int 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4921 ;;      Params:         2       0       0       0       0       0       0
  4922 ;;      Locals:         0       0       0       0       0       0       0
  4923 ;;      Temps:          3       0       0       0       0       0       0
  4924 ;;      Totals:         5       0       0       0       0       0       0
  4925 ;;Total ram usage:        5 bytes
  4926 ;; Hardware stack levels used: 1
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_kpDebounce
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text33
  4935  001334                     __ptext33:
  4936                           	callstack 0
  4937  001334                     _digitalRead:
  4938                           	callstack 29
  4939  001334                     
  4940                           ;io.c: 40:     if(pin <8){
  4941  001334  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4942  001336  EFA8  F009         	goto	u1490
  4943  00133A  5002               	movf	(digitalRead@pin+1)^0,w,c
  4944  00133C  E107               	bnz	u1491
  4945  00133E  0E08               	movlw	8
  4946  001340  5C01               	subwf	digitalRead@pin^0,w,c
  4947  001342  B0D8               	btfsc	status,0,c
  4948  001344  EFA6  F009         	goto	u1491
  4949  001348  EFA8  F009         	goto	u1490
  4950  00134C                     u1491:
  4951  00134C  EFBC  F009         	goto	l1980
  4952  001350                     u1490:
  4953  001350                     
  4954                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4955  001350  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4956  001354  0E01               	movlw	1
  4957  001356  6E04               	movwf	(??_digitalRead+1)^0,c
  4958  001358  2A03               	incf	??_digitalRead^0,f,c
  4959  00135A  EFB1  F009         	goto	u1504
  4960  00135E                     u1505:
  4961  00135E  90D8               	bcf	status,0,c
  4962  001360  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4963  001362                     u1504:
  4964  001362  2E03               	decfsz	??_digitalRead^0,f,c
  4965  001364  EFAF  F009         	goto	u1505
  4966  001368  5004               	movf	(??_digitalRead+1)^0,w,c
  4967  00136A  1480               	andwf	128,w,c	;volatile
  4968  00136C  6E05               	movwf	(??_digitalRead+2)^0,c
  4969  00136E  5005               	movf	(??_digitalRead+2)^0,w,c
  4970  001370  6E01               	movwf	?_digitalRead^0,c
  4971  001372  6A02               	clrf	(?_digitalRead+1)^0,c
  4972  001374  EF4E  F00A         	goto	l158
  4973  001378                     l1980:
  4974  001378  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4975  00137A  EFCA  F009         	goto	u1510
  4976  00137E  5002               	movf	(digitalRead@pin+1)^0,w,c
  4977  001380  E107               	bnz	u1511
  4978  001382  0E10               	movlw	16
  4979  001384  5C01               	subwf	digitalRead@pin^0,w,c
  4980  001386  B0D8               	btfsc	status,0,c
  4981  001388  EFC8  F009         	goto	u1511
  4982  00138C  EFCA  F009         	goto	u1510
  4983  001390                     u1511:
  4984  001390  EFE0  F009         	goto	l1988
  4985  001394                     u1510:
  4986  001394                     
  4987                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4988  001394  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4989  001398  0EF8               	movlw	-8
  4990  00139A  2603               	addwf	??_digitalRead^0,f,c
  4991  00139C  0E01               	movlw	1
  4992  00139E  6E04               	movwf	(??_digitalRead+1)^0,c
  4993  0013A0  2A03               	incf	??_digitalRead^0,f,c
  4994  0013A2  EFD5  F009         	goto	u1524
  4995  0013A6                     u1525:
  4996  0013A6  90D8               	bcf	status,0,c
  4997  0013A8  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4998  0013AA                     u1524:
  4999  0013AA  2E03               	decfsz	??_digitalRead^0,f,c
  5000  0013AC  EFD3  F009         	goto	u1525
  5001  0013B0  5004               	movf	(??_digitalRead+1)^0,w,c
  5002  0013B2  1481               	andwf	129,w,c	;volatile
  5003  0013B4  6E05               	movwf	(??_digitalRead+2)^0,c
  5004  0013B6  5005               	movf	(??_digitalRead+2)^0,w,c
  5005  0013B8  6E01               	movwf	?_digitalRead^0,c
  5006  0013BA  6A02               	clrf	(?_digitalRead+1)^0,c
  5007  0013BC  EF4E  F00A         	goto	l158
  5008  0013C0                     l1988:
  5009  0013C0  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5010  0013C2  EFEE  F009         	goto	u1530
  5011  0013C6  5002               	movf	(digitalRead@pin+1)^0,w,c
  5012  0013C8  E107               	bnz	u1531
  5013  0013CA  0E18               	movlw	24
  5014  0013CC  5C01               	subwf	digitalRead@pin^0,w,c
  5015  0013CE  B0D8               	btfsc	status,0,c
  5016  0013D0  EFEC  F009         	goto	u1531
  5017  0013D4  EFEE  F009         	goto	u1530
  5018  0013D8                     u1531:
  5019  0013D8  EF04  F00A         	goto	l1996
  5020  0013DC                     u1530:
  5021  0013DC                     
  5022                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  5023  0013DC  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5024  0013E0  0EF0               	movlw	-16
  5025  0013E2  2603               	addwf	??_digitalRead^0,f,c
  5026  0013E4  0E01               	movlw	1
  5027  0013E6  6E04               	movwf	(??_digitalRead+1)^0,c
  5028  0013E8  2A03               	incf	??_digitalRead^0,f,c
  5029  0013EA  EFF9  F009         	goto	u1544
  5030  0013EE                     u1545:
  5031  0013EE  90D8               	bcf	status,0,c
  5032  0013F0  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5033  0013F2                     u1544:
  5034  0013F2  2E03               	decfsz	??_digitalRead^0,f,c
  5035  0013F4  EFF7  F009         	goto	u1545
  5036  0013F8  5004               	movf	(??_digitalRead+1)^0,w,c
  5037  0013FA  1482               	andwf	130,w,c	;volatile
  5038  0013FC  6E05               	movwf	(??_digitalRead+2)^0,c
  5039  0013FE  5005               	movf	(??_digitalRead+2)^0,w,c
  5040  001400  6E01               	movwf	?_digitalRead^0,c
  5041  001402  6A02               	clrf	(?_digitalRead+1)^0,c
  5042  001404  EF4E  F00A         	goto	l158
  5043  001408                     l1996:
  5044  001408  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5045  00140A  EF12  F00A         	goto	u1550
  5046  00140E  5002               	movf	(digitalRead@pin+1)^0,w,c
  5047  001410  E107               	bnz	u1551
  5048  001412  0E20               	movlw	32
  5049  001414  5C01               	subwf	digitalRead@pin^0,w,c
  5050  001416  B0D8               	btfsc	status,0,c
  5051  001418  EF10  F00A         	goto	u1551
  5052  00141C  EF12  F00A         	goto	u1550
  5053  001420                     u1551:
  5054  001420  EF28  F00A         	goto	l2004
  5055  001424                     u1550:
  5056  001424                     
  5057                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  5058  001424  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5059  001428  0EE8               	movlw	-24
  5060  00142A  2603               	addwf	??_digitalRead^0,f,c
  5061  00142C  0E01               	movlw	1
  5062  00142E  6E04               	movwf	(??_digitalRead+1)^0,c
  5063  001430  2A03               	incf	??_digitalRead^0,f,c
  5064  001432  EF1D  F00A         	goto	u1564
  5065  001436                     u1565:
  5066  001436  90D8               	bcf	status,0,c
  5067  001438  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5068  00143A                     u1564:
  5069  00143A  2E03               	decfsz	??_digitalRead^0,f,c
  5070  00143C  EF1B  F00A         	goto	u1565
  5071  001440  5004               	movf	(??_digitalRead+1)^0,w,c
  5072  001442  1483               	andwf	131,w,c	;volatile
  5073  001444  6E05               	movwf	(??_digitalRead+2)^0,c
  5074  001446  5005               	movf	(??_digitalRead+2)^0,w,c
  5075  001448  6E01               	movwf	?_digitalRead^0,c
  5076  00144A  6A02               	clrf	(?_digitalRead+1)^0,c
  5077  00144C  EF4E  F00A         	goto	l158
  5078  001450                     l2004:
  5079  001450  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5080  001452  EF36  F00A         	goto	u1570
  5081  001456  5002               	movf	(digitalRead@pin+1)^0,w,c
  5082  001458  E107               	bnz	u1571
  5083  00145A  0E28               	movlw	40
  5084  00145C  5C01               	subwf	digitalRead@pin^0,w,c
  5085  00145E  B0D8               	btfsc	status,0,c
  5086  001460  EF34  F00A         	goto	u1571
  5087  001464  EF36  F00A         	goto	u1570
  5088  001468                     u1571:
  5089  001468  EF4C  F00A         	goto	l163
  5090  00146C                     u1570:
  5091  00146C                     
  5092                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  5093  00146C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5094  001470  0EE0               	movlw	-32
  5095  001472  2603               	addwf	??_digitalRead^0,f,c
  5096  001474  0E01               	movlw	1
  5097  001476  6E04               	movwf	(??_digitalRead+1)^0,c
  5098  001478  2A03               	incf	??_digitalRead^0,f,c
  5099  00147A  EF41  F00A         	goto	u1584
  5100  00147E                     u1585:
  5101  00147E  90D8               	bcf	status,0,c
  5102  001480  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5103  001482                     u1584:
  5104  001482  2E03               	decfsz	??_digitalRead^0,f,c
  5105  001484  EF3F  F00A         	goto	u1585
  5106  001488  5004               	movf	(??_digitalRead+1)^0,w,c
  5107  00148A  1484               	andwf	132,w,c	;volatile
  5108  00148C  6E05               	movwf	(??_digitalRead+2)^0,c
  5109  00148E  5005               	movf	(??_digitalRead+2)^0,w,c
  5110  001490  6E01               	movwf	?_digitalRead^0,c
  5111  001492  6A02               	clrf	(?_digitalRead+1)^0,c
  5112  001494  EF4E  F00A         	goto	l158
  5113  001498                     l163:
  5114  001498                     
  5115                           ;io.c: 51:     return -1;
  5116  001498  6801               	setf	?_digitalRead^0,c
  5117  00149A  6802               	setf	(?_digitalRead+1)^0,c
  5118  00149C                     l158:
  5119  00149C  0012               	return		;funcret
  5120  00149E                     __end_of_digitalRead:
  5121                           	callstack 0
  5122                           
  5123 ;; *************** function _atraso_ms *****************
  5124 ;; Defined at:
  5125 ;;		line 2 in file "atraso.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  num             2    0[COMRAM] unsigned int 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  i               2    2[COMRAM] int 
  5130 ;;  k               1    5[COMRAM] volatile unsigned char 
  5131 ;;  j               1    4[COMRAM] volatile unsigned char 
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  1    wreg      void 
  5134 ;; Registers used:
  5135 ;;		wreg, status,2, status,0
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5141 ;;      Params:         2       0       0       0       0       0       0
  5142 ;;      Locals:         4       0       0       0       0       0       0
  5143 ;;      Temps:          0       0       0       0       0       0       0
  5144 ;;      Totals:         6       0       0       0       0       0       0
  5145 ;;Total ram usage:        6 bytes
  5146 ;; Hardware stack levels used: 1
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_LeTeclado
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text34
  5155  001AD6                     __ptext34:
  5156                           	callstack 0
  5157  001AD6                     _atraso_ms:
  5158                           	callstack 29
  5159  001AD6                     
  5160                           ;atraso.c: 3:     volatile unsigned char j, k;;atraso.c: 4:     for (int i = 0; i < num;
      +                           i++) {
  5161  001AD6  0E00               	movlw	0
  5162  001AD8  6E04               	movwf	(atraso_ms@i+1)^0,c
  5163  001ADA  0E00               	movlw	0
  5164  001ADC  6E03               	movwf	atraso_ms@i^0,c
  5165  001ADE  EF91  F00D         	goto	l2088
  5166  001AE2                     l2066:
  5167                           
  5168                           ;atraso.c: 5:         for (j = 0; j < 41; j++) {
  5169  001AE2  0E00               	movlw	0
  5170  001AE4  6E05               	movwf	atraso_ms@j^0,c	;volatile
  5171  001AE6                     l2068:
  5172  001AE6  0E28               	movlw	40
  5173  001AE8  6405               	cpfsgt	atraso_ms@j^0,c	;volatile
  5174  001AEA  EF79  F00D         	goto	u1631
  5175  001AEE  EF7B  F00D         	goto	u1630
  5176  001AF2                     u1631:
  5177  001AF2  EF7D  F00D         	goto	l2072
  5178  001AF6                     u1630:
  5179  001AF6  EF8F  F00D         	goto	l2086
  5180  001AFA                     l2072:
  5181                           
  5182                           ;atraso.c: 6:             for (k = 0; k < 3; k++);
  5183  001AFA  0E00               	movlw	0
  5184  001AFC  6E06               	movwf	atraso_ms@k^0,c	;volatile
  5185  001AFE                     l2074:
  5186  001AFE  0E02               	movlw	2
  5187  001B00  6406               	cpfsgt	atraso_ms@k^0,c	;volatile
  5188  001B02  EF85  F00D         	goto	u1641
  5189  001B06  EF87  F00D         	goto	u1640
  5190  001B0A                     u1641:
  5191  001B0A  EF89  F00D         	goto	l2078
  5192  001B0E                     u1640:
  5193  001B0E  EF8C  F00D         	goto	l2082
  5194  001B12                     l2078:
  5195  001B12  2A06               	incf	atraso_ms@k^0,f,c	;volatile
  5196  001B14  EF7F  F00D         	goto	l2074
  5197  001B18                     l2082:
  5198                           
  5199                           ;atraso.c: 7:         }
  5200  001B18  2A05               	incf	atraso_ms@j^0,f,c	;volatile
  5201  001B1A  EF73  F00D         	goto	l2068
  5202  001B1E                     l2086:
  5203                           
  5204                           ;atraso.c: 9:     }
  5205  001B1E  4A03               	infsnz	atraso_ms@i^0,f,c
  5206  001B20  2A04               	incf	(atraso_ms@i+1)^0,f,c
  5207  001B22                     l2088:
  5208  001B22  5001               	movf	atraso_ms@num^0,w,c
  5209  001B24  5C03               	subwf	atraso_ms@i^0,w,c
  5210  001B26  5002               	movf	(atraso_ms@num+1)^0,w,c
  5211  001B28  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  5212  001B2A  A0D8               	btfss	status,0,c
  5213  001B2C  EF9A  F00D         	goto	u1651
  5214  001B30  EF9C  F00D         	goto	u1650
  5215  001B34                     u1651:
  5216  001B34  EF71  F00D         	goto	l2066
  5217  001B38                     u1650:
  5218  001B38  0012               	return		;funcret
  5219  001B3A                     __end_of_atraso_ms:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function _adcRead *****************
  5223 ;; Defined at:
  5224 ;;		line 38 in file "adc.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  channel         2    0[COMRAM] unsigned int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  ADvalor         2    2[COMRAM] unsigned int 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    0[COMRAM] int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5238 ;;      Params:         2       0       0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0
  5241 ;;      Totals:         4       0       0       0       0       0       0
  5242 ;;Total ram usage:        4 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_LeTeclado
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text35
  5252  001C40                     __ptext35:
  5253                           	callstack 0
  5254  001C40                     _adcRead:
  5255                           	callstack 29
  5256  001C40                     
  5257                           ;adc.c: 39:     unsigned int ADvalor;;adc.c: 40:     ADCON0 &= 0b11000011;
  5258  001C40  0EC3               	movlw	195
  5259  001C42  16C2               	andwf	194,f,c	;volatile
  5260                           
  5261                           ;adc.c: 41:     if (channel < 3) {
  5262  001C44  5002               	movf	(adcRead@channel+1)^0,w,c
  5263  001C46  E107               	bnz	u1661
  5264  001C48  0E03               	movlw	3
  5265  001C4A  5C01               	subwf	adcRead@channel^0,w,c
  5266  001C4C  B0D8               	btfsc	status,0,c
  5267  001C4E  EF2B  F00E         	goto	u1661
  5268  001C52  EF2D  F00E         	goto	u1660
  5269  001C56                     u1661:
  5270  001C56  EF31  F00E         	goto	l2094
  5271  001C5A                     u1660:
  5272  001C5A                     
  5273                           ;adc.c: 42:         ADCON0 |= channel << 2;
  5274  001C5A  4401               	rlncf	adcRead@channel^0,w,c	;volatile
  5275  001C5C  46E8               	rlncf	wreg,f,c
  5276  001C5E  0BFC               	andlw	252
  5277  001C60  12C2               	iorwf	194,f,c	;volatile
  5278  001C62                     l2094:
  5279                           
  5280                           ;adc.c: 45:     ADCON0 |= 0b00000010;
  5281  001C62  82C2               	bsf	194,1,c	;volatile
  5282  001C64                     l109:
  5283  001C64  B2C2               	btfsc	194,1,c	;volatile
  5284  001C66  EF37  F00E         	goto	u1671
  5285  001C6A  EF39  F00E         	goto	u1670
  5286  001C6E                     u1671:
  5287  001C6E  EF32  F00E         	goto	l109
  5288  001C72                     u1670:
  5289  001C72                     
  5290                           ;adc.c: 49:     ADvalor = ADRESH;
  5291  001C72  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  5292  001C76  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  5293  001C78                     
  5294                           ;adc.c: 50:     ADvalor <<= 8;
  5295  001C78  5003               	movf	adcRead@ADvalor^0,w,c
  5296  001C7A  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  5297  001C7C  6A03               	clrf	adcRead@ADvalor^0,c
  5298  001C7E                     
  5299                           ;adc.c: 51:     ADvalor += ADRESL;
  5300  001C7E  50C3               	movf	195,w,c	;volatile
  5301  001C80  2603               	addwf	adcRead@ADvalor^0,f,c
  5302  001C82  0E00               	movlw	0
  5303  001C84  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  5304  001C86                     
  5305                           ;adc.c: 52:     return ADvalor;
  5306  001C86  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  5307  001C8A  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  5308  001C8E  0012               	return		;funcret
  5309  001C90                     __end_of_adcRead:
  5310                           	callstack 0
  5311                           
  5312 ;; *************** function ___llmod *****************
  5313 ;; Defined at:
  5314 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\llmod.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  dividend        4   13[COMRAM] unsigned long 
  5317 ;;  divisor         4   17[COMRAM] unsigned long 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  counter         1   21[COMRAM] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  4   13[COMRAM] unsigned long 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5329 ;;      Params:         8       0       0       0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0
  5332 ;;      Totals:         9       0       0       0       0       0       0
  5333 ;;Total ram usage:        9 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_LeTeclado
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text36
  5343  0018F6                     __ptext36:
  5344                           	callstack 0
  5345  0018F6                     ___llmod:
  5346                           	callstack 29
  5347  0018F6  5012               	movf	___llmod@divisor^0,w,c
  5348  0018F8  1013               	iorwf	(___llmod@divisor+1)^0,w,c
  5349  0018FA  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  5350  0018FC  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  5351  0018FE  B4D8               	btfsc	status,2,c
  5352  001900  EF84  F00C         	goto	u1811
  5353  001904  EF86  F00C         	goto	u1810
  5354  001908                     u1811:
  5355  001908  EFB6  F00C         	goto	l815
  5356  00190C                     u1810:
  5357  00190C  0E01               	movlw	1
  5358  00190E  6E16               	movwf	___llmod@counter^0,c
  5359  001910  EF90  F00C         	goto	l2180
  5360  001914                     l2178:
  5361  001914  90D8               	bcf	status,0,c
  5362  001916  3612               	rlcf	___llmod@divisor^0,f,c
  5363  001918  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  5364  00191A  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  5365  00191C  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  5366  00191E  2A16               	incf	___llmod@counter^0,f,c
  5367  001920                     l2180:
  5368  001920  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  5369  001922  EF95  F00C         	goto	u1821
  5370  001926  EF97  F00C         	goto	u1820
  5371  00192A                     u1821:
  5372  00192A  EF8A  F00C         	goto	l2178
  5373  00192E                     u1820:
  5374  00192E                     l2182:
  5375  00192E  5012               	movf	___llmod@divisor^0,w,c
  5376  001930  5C0E               	subwf	___llmod@dividend^0,w,c
  5377  001932  5013               	movf	(___llmod@divisor+1)^0,w,c
  5378  001934  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  5379  001936  5014               	movf	(___llmod@divisor+2)^0,w,c
  5380  001938  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  5381  00193A  5015               	movf	(___llmod@divisor+3)^0,w,c
  5382  00193C  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  5383  00193E  A0D8               	btfss	status,0,c
  5384  001940  EFA4  F00C         	goto	u1831
  5385  001944  EFA6  F00C         	goto	u1830
  5386  001948                     u1831:
  5387  001948  EFAE  F00C         	goto	l2186
  5388  00194C                     u1830:
  5389  00194C  5012               	movf	___llmod@divisor^0,w,c
  5390  00194E  5E0E               	subwf	___llmod@dividend^0,f,c
  5391  001950  5013               	movf	(___llmod@divisor+1)^0,w,c
  5392  001952  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  5393  001954  5014               	movf	(___llmod@divisor+2)^0,w,c
  5394  001956  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  5395  001958  5015               	movf	(___llmod@divisor+3)^0,w,c
  5396  00195A  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  5397  00195C                     l2186:
  5398  00195C  90D8               	bcf	status,0,c
  5399  00195E  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  5400  001960  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  5401  001962  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  5402  001964  3212               	rrcf	___llmod@divisor^0,f,c
  5403  001966  2E16               	decfsz	___llmod@counter^0,f,c
  5404  001968  EF97  F00C         	goto	l2182
  5405  00196C                     l815:
  5406  00196C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5407  001970  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5408  001974  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5409  001978  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5410  00197C  0012               	return		;funcret
  5411  00197E                     __end_of___llmod:
  5412                           	callstack 0
  5413                           
  5414 ;; *************** function ___lldiv *****************
  5415 ;; Defined at:
  5416 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  dividend        4    0[COMRAM] unsigned long 
  5419 ;;  divisor         4    4[COMRAM] unsigned long 
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  quotient        4    8[COMRAM] unsigned long 
  5422 ;;  counter         1   12[COMRAM] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  4    0[COMRAM] unsigned long 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5432 ;;      Params:         8       0       0       0       0       0       0
  5433 ;;      Locals:         5       0       0       0       0       0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0
  5435 ;;      Totals:        13       0       0       0       0       0       0
  5436 ;;Total ram usage:       13 bytes
  5437 ;; Hardware stack levels used: 1
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_LeTeclado
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           	psect	text37
  5446  001852                     __ptext37:
  5447                           	callstack 0
  5448  001852                     ___lldiv:
  5449                           	callstack 29
  5450  001852  0E00               	movlw	0
  5451  001854  6E09               	movwf	___lldiv@quotient^0,c
  5452  001856  0E00               	movlw	0
  5453  001858  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  5454  00185A  0E00               	movlw	0
  5455  00185C  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  5456  00185E  0E00               	movlw	0
  5457  001860  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  5458  001862  5005               	movf	___lldiv@divisor^0,w,c
  5459  001864  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  5460  001866  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  5461  001868  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  5462  00186A  B4D8               	btfsc	status,2,c
  5463  00186C  EF3A  F00C         	goto	u1781
  5464  001870  EF3C  F00C         	goto	u1780
  5465  001874                     u1781:
  5466  001874  EF72  F00C         	goto	l422
  5467  001878                     u1780:
  5468  001878  0E01               	movlw	1
  5469  00187A  6E0D               	movwf	___lldiv@counter^0,c
  5470  00187C  EF46  F00C         	goto	l2160
  5471  001880                     l2158:
  5472  001880  90D8               	bcf	status,0,c
  5473  001882  3605               	rlcf	___lldiv@divisor^0,f,c
  5474  001884  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  5475  001886  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  5476  001888  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  5477  00188A  2A0D               	incf	___lldiv@counter^0,f,c
  5478  00188C                     l2160:
  5479  00188C  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  5480  00188E  EF4B  F00C         	goto	u1791
  5481  001892  EF4D  F00C         	goto	u1790
  5482  001896                     u1791:
  5483  001896  EF40  F00C         	goto	l2158
  5484  00189A                     u1790:
  5485  00189A                     l2162:
  5486  00189A  90D8               	bcf	status,0,c
  5487  00189C  3609               	rlcf	___lldiv@quotient^0,f,c
  5488  00189E  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  5489  0018A0  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  5490  0018A2  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  5491  0018A4  5005               	movf	___lldiv@divisor^0,w,c
  5492  0018A6  5C01               	subwf	___lldiv@dividend^0,w,c
  5493  0018A8  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5494  0018AA  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  5495  0018AC  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5496  0018AE  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  5497  0018B0  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5498  0018B2  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  5499  0018B4  A0D8               	btfss	status,0,c
  5500  0018B6  EF5F  F00C         	goto	u1801
  5501  0018BA  EF61  F00C         	goto	u1800
  5502  0018BE                     u1801:
  5503  0018BE  EF6A  F00C         	goto	l2170
  5504  0018C2                     u1800:
  5505  0018C2  5005               	movf	___lldiv@divisor^0,w,c
  5506  0018C4  5E01               	subwf	___lldiv@dividend^0,f,c
  5507  0018C6  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5508  0018C8  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  5509  0018CA  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5510  0018CC  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  5511  0018CE  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5512  0018D0  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  5513  0018D2  8009               	bsf	___lldiv@quotient^0,0,c
  5514  0018D4                     l2170:
  5515  0018D4  90D8               	bcf	status,0,c
  5516  0018D6  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  5517  0018D8  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  5518  0018DA  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  5519  0018DC  3205               	rrcf	___lldiv@divisor^0,f,c
  5520  0018DE  2E0D               	decfsz	___lldiv@counter^0,f,c
  5521  0018E0  EF4D  F00C         	goto	l2162
  5522  0018E4                     l422:
  5523  0018E4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5524  0018E8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5525  0018EC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5526  0018F0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5527  0018F4  0012               	return		;funcret
  5528  0018F6                     __end_of___lldiv:
  5529                           	callstack 0
  5530                           
  5531                           	psect	rparam
  5532  0000                     
  5533                           	psect	idloc
  5534                           
  5535                           ;Config register IDLOC0 @ 0x200000
  5536                           ;	unspecified, using default values
  5537  200000                     	org	2097152
  5538  200000  FF                 	db	255
  5539                           
  5540                           ;Config register IDLOC1 @ 0x200001
  5541                           ;	unspecified, using default values
  5542  200001                     	org	2097153
  5543  200001  FF                 	db	255
  5544                           
  5545                           ;Config register IDLOC2 @ 0x200002
  5546                           ;	unspecified, using default values
  5547  200002                     	org	2097154
  5548  200002  FF                 	db	255
  5549                           
  5550                           ;Config register IDLOC3 @ 0x200003
  5551                           ;	unspecified, using default values
  5552  200003                     	org	2097155
  5553  200003  FF                 	db	255
  5554                           
  5555                           ;Config register IDLOC4 @ 0x200004
  5556                           ;	unspecified, using default values
  5557  200004                     	org	2097156
  5558  200004  FF                 	db	255
  5559                           
  5560                           ;Config register IDLOC5 @ 0x200005
  5561                           ;	unspecified, using default values
  5562  200005                     	org	2097157
  5563  200005  FF                 	db	255
  5564                           
  5565                           ;Config register IDLOC6 @ 0x200006
  5566                           ;	unspecified, using default values
  5567  200006                     	org	2097158
  5568  200006  FF                 	db	255
  5569                           
  5570                           ;Config register IDLOC7 @ 0x200007
  5571                           ;	unspecified, using default values
  5572  200007                     	org	2097159
  5573  200007  FF                 	db	255
  5574                           
  5575                           	psect	config
  5576                           
  5577                           ; Padding undefined space
  5578  300000                     	org	3145728
  5579  300000  FF                 	db	255
  5580                           
  5581                           ;Config register CONFIG1H @ 0x300001
  5582                           ;	Oscillator Selection bits
  5583                           ;	OSC = HS, HS oscillator
  5584                           ;	Fail-Safe Clock Monitor Enable bit
  5585                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5586                           ;	Internal/External Oscillator Switchover bit
  5587                           ;	IESO = OFF, Oscillator Switchover mode disabled
  5588  300001                     	org	3145729
  5589  300001  02                 	db	2
  5590                           
  5591                           ;Config register CONFIG2L @ 0x300002
  5592                           ;	Power-up Timer Enable bit
  5593                           ;	PWRT = OFF, PWRT disabled
  5594                           ;	Brown-out Reset Enable bits
  5595                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  5596                           ;	Brown Out Reset Voltage bits
  5597                           ;	BORV = 0x2E, user specified literal
  5598  300002                     	org	3145730
  5599  300002  71                 	db	369
  5600                           
  5601                           ;Config register CONFIG2H @ 0x300003
  5602                           ;	Watchdog Timer Enable bit
  5603                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5604                           ;	Watchdog Timer Postscale Select bits
  5605                           ;	WDTPS = 1, 1:1
  5606  300003                     	org	3145731
  5607  300003  00                 	db	0
  5608                           
  5609                           ; Padding undefined space
  5610  300004                     	org	3145732
  5611  300004  FF                 	db	255
  5612                           
  5613                           ;Config register CONFIG3H @ 0x300005
  5614                           ;	CCP2 MUX bit
  5615                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  5616                           ;	PORTB A/D Enable bit
  5617                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  5618                           ;	Low-Power Timer1 Oscillator Enable bit
  5619                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5620                           ;	MCLR Pin Enable bit
  5621                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  5622  300005                     	org	3145733
  5623  300005  83                 	db	131
  5624                           
  5625                           ;Config register CONFIG4L @ 0x300006
  5626                           ;	Stack Full/Underflow Reset Enable bit
  5627                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  5628                           ;	Single-Supply ICSP Enable bit
  5629                           ;	LVP = OFF, Single-Supply ICSP disabled
  5630                           ;	Extended Instruction Set Enable bit
  5631                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5632                           ;	Background Debugger Enable bit
  5633                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5634  300006                     	org	3145734
  5635  300006  80                 	db	128
  5636                           
  5637                           ; Padding undefined space
  5638  300007                     	org	3145735
  5639  300007  FF                 	db	255
  5640                           
  5641                           ;Config register CONFIG5L @ 0x300008
  5642                           ;	Code Protection bit
  5643                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  5644                           ;	Code Protection bit
  5645                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  5646                           ;	Code Protection bit
  5647                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  5648                           ;	Code Protection bit
  5649                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  5650  300008                     	org	3145736
  5651  300008  0F                 	db	15
  5652                           
  5653                           ;Config register CONFIG5H @ 0x300009
  5654                           ;	Boot Block Code Protection bit
  5655                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5656                           ;	Data EEPROM Code Protection bit
  5657                           ;	CPD = OFF, Data EEPROM not code-protected
  5658  300009                     	org	3145737
  5659  300009  C0                 	db	192
  5660                           
  5661                           ;Config register CONFIG6L @ 0x30000A
  5662                           ;	Write Protection bit
  5663                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  5664                           ;	Write Protection bit
  5665                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  5666                           ;	Write Protection bit
  5667                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  5668                           ;	Write Protection bit
  5669                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  5670  30000A                     	org	3145738
  5671  30000A  0F                 	db	15
  5672                           
  5673                           ;Config register CONFIG6H @ 0x30000B
  5674                           ;	Configuration Register Write Protection bit
  5675                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5676                           ;	Boot Block Write Protection bit
  5677                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  5678                           ;	Data EEPROM Write Protection bit
  5679                           ;	WRTD = OFF, Data EEPROM not write-protected
  5680  30000B                     	org	3145739
  5681  30000B  E0                 	db	224
  5682                           
  5683                           ;Config register CONFIG7L @ 0x30000C
  5684                           ;	Table Read Protection bit
  5685                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  5686                           ;	Table Read Protection bit
  5687                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  5688                           ;	Table Read Protection bit
  5689                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  5690                           ;	Table Read Protection bit
  5691                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  5692  30000C                     	org	3145740
  5693  30000C  0F                 	db	15
  5694                           
  5695                           ;Config register CONFIG7H @ 0x30000D
  5696                           ;	Boot Block Table Read Protection bit
  5697                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5698  30000D                     	org	3145741
  5699  30000D  40                 	db	64
  5700                           tosu	equ	0xFFF
  5701                           tosh	equ	0xFFE
  5702                           tosl	equ	0xFFD
  5703                           stkptr	equ	0xFFC
  5704                           pclatu	equ	0xFFB
  5705                           pclath	equ	0xFFA
  5706                           pcl	equ	0xFF9
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           indf0	equ	0xFEF
  5714                           postinc0	equ	0xFEE
  5715                           postdec0	equ	0xFED
  5716                           preinc0	equ	0xFEC
  5717                           plusw0	equ	0xFEB
  5718                           fsr0h	equ	0xFEA
  5719                           fsr0l	equ	0xFE9
  5720                           wreg	equ	0xFE8
  5721                           indf1	equ	0xFE7
  5722                           postinc1	equ	0xFE6
  5723                           postdec1	equ	0xFE5
  5724                           preinc1	equ	0xFE4
  5725                           plusw1	equ	0xFE3
  5726                           fsr1h	equ	0xFE2
  5727                           fsr1l	equ	0xFE1
  5728                           bsr	equ	0xFE0
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           preinc2	equ	0xFDC
  5733                           plusw2	equ	0xFDB
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8

Data Sizes:
    Strings     127
    Constant    26
    Data        2
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      52
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcdString@msg	PTR unsigned char  size(2) Largest target is 16
		 -> STR_23(CODE[10]), STR_22(CODE[11]), STR_21(CODE[11]), STR_20(CODE[9]), 
		 -> STR_19(CODE[16]), STR_18(CODE[14]), STR_17(CODE[3]), STR_16(CODE[16]), 
		 -> STR_15(CODE[7]), STR_14(CODE[11]), STR_13(CODE[9]), STR_12(CODE[16]), 
		 -> STR_11(CODE[14]), STR_10(CODE[3]), STR_9(CODE[16]), STR_8(CODE[7]), 
		 -> STR_7(CODE[11]), STR_6(CODE[9]), STR_5(CODE[16]), STR_4(CODE[14]), 
		 -> STR_3(CODE[3]), STR_2(CODE[14]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_LeTeclado
    _lcdInit->_lcdCommand
    _pushNibble->_soWrite
    _kpInit->_pinMode
    _adcInit->_pinMode
    _LeTeclado->___llmod
    _ssdInit->_pinMode
    _soInit->_pinMode
    _pwmSet->___lwdiv
    _pwmInit->_pwmFrequency
    _pwmFrequency->___aldiv
    _lcdString->_lcdChar
    _lcdChar->_pushByte
    _lcdPosition->_lcdCommand
    _lcdCommand->_pushByte
    _pushByte->_soWrite
    _pulseEnablePin->_digitalWrite
    _kpDebounce->_soWrite
    _soWrite->_digitalWrite
    _PulseEnClock->_digitalWrite
    _PulseClockData->_digitalWrite
    ___llmod->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  205267
                                             24 COMRAM     3     3      0
                          _LeTeclado
                            _adcInit
                         _kpDebounce
                             _kpInit
                          _kpReadKey
                         _lcdCommand
                            _lcdInit
                          _lcdString
                            _pwmInit
                            _ssdInit
                          _timerInit
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           4     2      2     167
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0   42412
                         _delayMicro
                          _delayMili
                         _lcdCommand
                            _pinMode
                         _pushNibble
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _pushNibble                                           3     1      2   18141
                                              9 COMRAM     3     1      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0    5136
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0    2568
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _LeTeclado                                            2     2      0   99301
                                             22 COMRAM     2     2      0
                            ___lldiv
                            ___llmod
                            _adcRead
                          _atraso_ms
                         _kpDebounce
                             _kpRead
                          _kpReadKey
                            _lcdChar
                         _lcdCommand
                        _lcdPosition
                          _lcdString
                            _pwmInit
                             _pwmSet
                            _ssdInit
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0    5136
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (2) _soInit                                               0     0      0    2568
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              6     2      4    2568
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _pwmSet                                               5     5      0     716
                                              7 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0     550
                       _pwmFrequency
 ---------------------------------------------------------------------------------
 (2) _pwmFrequency                                         2     0      2     550
                                             14 COMRAM     2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _lcdString                                            6     4      2   20273
                                             14 COMRAM     6     4      2
                            _lcdChar
 ---------------------------------------------------------------------------------
 (2) _lcdChar                                              1     1      0   18435
                                             13 COMRAM     1     1      0
                         _delayMicro
                           _pushByte
 ---------------------------------------------------------------------------------
 (2) _lcdPosition                                          4     0      4   19405
                                             14 COMRAM     4     0      4
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _lcdCommand                                           1     1      0   18405
                                             13 COMRAM     1     1      0
                          _delayMili
                           _pushByte
 ---------------------------------------------------------------------------------
 (3) _pushByte                                             4     2      2   18033
                                              9 COMRAM     4     2      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (4) _pulseEnablePin                                       0     0      0    3712
                         _delayMicro
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _delayMicro                                           4     2      2     380
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _delayMili                                            5     3      2     350
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _kpReadKey                                            5     5      0      60
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _kpRead                                               2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           5     5      0   11233
                                              9 COMRAM     5     5      0
                        _digitalRead
                            _soWrite
 ---------------------------------------------------------------------------------
 (4) _soWrite                                              3     1      2   10749
                                              6 COMRAM     3     1      2
                     _PulseClockData
                       _PulseEnClock
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _PulseEnClock                                         0     0      0    3332
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _PulseClockData                                       0     0      0    3332
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _digitalWrite                                         6     2      4    3332
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            6     4      2    1278
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _adcRead                                              4     2      2     297
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1983
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1530
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LeTeclado
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _adcRead
     _atraso_ms
     _kpDebounce
       _digitalRead
       _soWrite
         _PulseClockData
           _digitalWrite
         _PulseEnClock
           _digitalWrite
         _digitalWrite
     _kpRead
     _kpReadKey
     _lcdChar
       _delayMicro
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
     _lcdCommand
       _delayMili
       _pushByte
     _lcdPosition
       _lcdCommand
     _lcdString
       _lcdChar
     _pwmInit
       _pwmFrequency
         ___aldiv
     _pwmSet
       ___lwdiv
       ___wmul
     _ssdInit
       _pinMode
       _soInit
         _pinMode
   _adcInit
     _pinMode
   _kpDebounce
   _kpInit
     _pinMode
     _soInit
   _kpReadKey
   _lcdCommand
   _lcdInit
     _delayMicro
     _delayMili
     _lcdCommand
     _pinMode
     _pushNibble
       _digitalWrite
       _pulseEnablePin
       _soWrite
     _soInit
   _lcdString
   _pwmInit
   _ssdInit
   _timerInit
   _timerReset
   _timerWait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      34       1       40.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      34      15        0.0%
DATA                 0      0      34       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Dec 17 16:44:42 2021

                      _v 001C           _pulseEnablePin 1D26             lcdString@msg 000F  
                     l64 0992                       l80 1724                       l58 0712  
                     l75 0E96                       l69 0C18                       _v0 002F  
                     _v1 002E                       _v2 002D                       _v3 002C  
    ___wmul@multiplicand 0003                      l111 1C72                      l112 1C8E  
                    l105 1D24                      l211 19F4                      l109 1C64  
                    l205 1FC6                      l301 1FAC                      l230 1E10  
                    l311 1E98                      l225 15BA                      l241 1FD2  
                    l154 1332                      l314 1EC2                      l250 1D66  
                    l163 1498                      l227 15D2                      l308 1DA4  
                    l253 1EE8                      l422 18E4                      l158 149C  
                    l159 1498                      l319 1CDC                      l247 1E40  
                    l256 1B92                      l264 1DDE                      l273 1C3E  
                    l282 1850                      l259 1F92                      l267 1F74  
                    l188 10E4                      l429 18F4                      l373 1FAE  
                    l382 1FCE                      l295 1AD4                      l359 1BE8  
                    l392 1B38                      l376 1FBC                      l474 16DE  
                    l298 1F34                      l395 1F0E                      l379 1F56  
                    l822 197C                      l815 196C                      l893 1A68  
                    l886 1A60                      _LED 0034                      _PR2 000FCB  
                    u800 19F2                      u801 19EE                      u940 1FBC  
                    u941 1FB8                      u790 19BE                      u791 19BA  
                    u784 199E                      u785 1998                      wreg 000FE8  
                   l2010 1D68                     l2100 1C86                     l2004 1450  
                   l2012 1F10                     l2020 19F6                     l2006 146C  
                   l2110 1DD4                     l2030 1A2E                     l2022 19FE  
                   l2014 1EEA                     l2120 151A                     l2112 149E  
                   l2104 1DA6                     l2040 1A5A                     l2032 1A34  
                   l2024 1A10                     l2016 1F06                     l2200 06D6  
                   l2122 1540                     l2130 1590                     l2114 14AE  
                   l2042 1FBE                     l2106 1DB8                     l2050 1F9C  
                   l2034 1A4A                     l2026 1A18                     l2210 0742  
                   l2202 06E2                     l2132 15A8                     l2124 155E  
                   l1420 19BE                     l1412 197E                     l2108 1DC2  
                   l2060 1C12                     l2052 1FA0                     l2044 1F94  
                   l2036 1A52                     l2028 1A20                     l2140 1A6C  
                   l2300 0BA4                     l2220 0872                     l2212 0792  
                   l2204 06EE                     l2134 15AE                     l2126 1588  
                   l2118 14CE                     l2062 1C16                     l2046 1F96  
                   l2038 1A54                     l2142 1A8A                     l2054 1B94  
                   l2310 0BCA                     l2302 0BA8                     l2230 08B6  
                   l2222 0894                     l2214 07E2                     l2206 06F4  
                   l2150 1EC6                     l2160 188C                     l2152 1852  
                   l2072 1AFA                     l2064 1AD6                     l2136 15B2  
                   l1424 19D2                     l2056 1BEA                     l2048 1F9A  
                   l2144 1AA6                     l2320 0C3C                     l2312 0BD6  
                   l2304 0BAE                     l2240 08F8                     l2232 08BC  
                   l2224 089C                     l2216 0832                     l2208 0736  
                   l2400 1844                     l2170 18D4                     l2162 189A  
                   l2154 1862                     l2090 1C40                     l2082 1B18  
                   l2074 1AFE                     l2066 1AE2                     l2138 15CA  
                   l1426 19D6                     l1418 1986                     l2058 1BF6  
                   l2146 1AAE                     l2330 0D64                     l2322 0C48  
                   l2314 0BE2                     l2306 0BBA                     l2250 093A  
                   l2242 0904                     l2234 08C8                     l2218 085E  
                   l2402 184A                     l2410 1F4C                     l2172 18DE  
                   l2164 18A4                     l2156 1878                     l2180 1920  
                   l2092 1C5A                     l2068 1AE6                     l1428 19F2  
                   l2148 1AC6                     l2500 0E70                     l2340 0DB4  
                   l2332 0D78                     l2324 0C98                     l2316 0BEE  
                   l2308 0BC0                     l2260 096E                     l2252 0940  
                   l2244 0924                     l2236 08D4                     l2228 08AE  
                   l2412 1F50                     l2404 1F36                     l2420 1706  
                   l2166 18C2                     l2158 1880                     l2182 192E  
                   l2174 18F6                     l2094 1C62                     l2078 1B12  
                   l2086 1B1E                     l2350 0DE0                     l2342 0DBC  
                   l2334 0D9A                     l2326 0CE8                     l2318 0BF4  
                   l2270 0A62                     l2262 0974                     l2254 094A  
                   l2246 0928                     l2238 08DA                     l2190 069C  
                   l2414 1F54                     l2406 1F40                     l1702 1FAE  
                   l2430 1754                     l2422 1712                     l2168 18D2  
                   l2184 194C                     l2176 190C                     l2096 1C78  
                   l2088 1B22                     l2360 0E34                     l2352 0DFE  
                   l2344 0DC2                     l2336 0DA2                     l2328 0D38  
                   l2280 0B1C                     l2272 0AB2                     l2264 09B6  
                   l2256 0956                     l2248 092E                     l2192 06B8  
                   l2408 1F44                     l2432 1758                     l2440 1768  
                   l2424 1738                     l2416 16E0                     l2186 195C  
                   l2178 1914                     l2098 1C7E                     l1810 1114  
                   l2362 0E40                     l2354 0E0A                     l2346 0DCE  
                   l2290 0B48                     l2274 0ADE                     l2266 09C2  
                   l2258 0962                     l2370 0E5A                     l2194 06C4  
                   l2442 1792                     l2426 1748                     l2418 16FC  
                   l2188 1966                     l1820 11AC                     l1812 1134  
                   l1900 1014                     l2364 0E46                     l2356 0E2A  
                   l2348 0DDA                     l2292 0B54                     l2284 0B2E  
                   l2276 0AF2                     l2268 0A12                     l2196 06C8  
                   l2380 1CDE                     l2436 1760                     l2428 174C  
                   l1830 1246                     l1822 11CE                     l1814 1156  
                   l1806 10E6                     l1910 109E                     l1902 1026  
                   l2366 0E50                     l2358 0E2E                     l2294 0B5A  
                   l2286 0B36                     l2278 0B14                     l2198 06D0  
                   l2382 1D1A                     l2390 17FE                     l1840 12DA  
                   l1832 1262                     l1824 11EA                     l1816 1172  
                   l1808 1102                     l1920 1B3C                     l1912 10C2  
                   l1904 104A                     l2296 0B78                     l2288 0B3C  
                   l2384 1D1C                     l2376 1DE0                     l2392 180A  
                   l1842 12F4                     l1834 127C                     l1826 1204  
                   l1818 118C                     l1850 1C90                     l1914 1E12  
                   l1930 15FA                     l1922 15D4                     l1906 1070  
                   l2298 0B84                     l2386 1D20                     l2378 1E0C  
                   l2394 1824                     l1844 1314                     l1836 129C  
                   l1828 1224                     l1860 1CC0                     l1852 1CA4  
                   l1916 1E1E                     l1940 1642                     l1932 1608  
                   l1924 15D8                     l1908 108C                     l2396 1832  
                   l2388 179E                     l1838 12BE                     l1846 1E70  
                   l1862 1CC6                     l1918 1E22                     l1870 1D3A  
                   l1950 168C                     l1942 164A                     l1934 1618  
                   l1926 15E6                     l2398 183E                     l1686 1FC8  
                   l1848 1E9A                     l1864 1CC8                     l1872 1D46  
                   l1960 16BE                     l1952 169C                     l1944 1656  
                   l1936 161C                     l1928 15F6                     l1880 0EE6  
                   l1688 1FCC                     l1866 1CD8                     l1858 1CA8  
                   l1970 1F68                     l1962 16CE                     l1954 169E  
                   l1946 1664                     l1938 162C                     l1890 0F80  
                   l1882 0F08                     l1874 0E98                     l2498 177C  
                   l1980 1378                     l1972 1334                     l1868 1D26  
                   l1956 16A8                     l1948 166E                     l1892 0F9C  
                   l1884 0F24                     l1876 0EB4                     l1990 13DC  
                   l1982 1394                     l1974 1350                     l1966 1F78  
                   l1958 16AE                     l1894 0FAE                     l1886 0F36  
                   l1878 0EC6                     l1968 1F5A                     l1896 0FD2  
                   l1888 0F5A                     l1898 0FF8                     l1996 1408  
                   l1988 13C0                     l1998 1424                     STR_1 0680  
                   STR_2 0649                     STR_3 0697                     STR_4 063B  
                   STR_5 061B                     STR_6 0677                     STR_7 0657  
                   STR_8 0690                     STR_9 062B                     u1010 1102  
                   u1011 10FE                     u1100 1204                     u1020 1114  
                   u1101 1200                     u1021 1110                     u1130 1262  
                   u1114 1216                     u1050 1172                     u1034 1126  
                   u1210 1CD8                     u1131 125E                     u1115 1212  
                   u1051 116E                     u1035 1122                     u1211 1CD4  
                   u1204 1326                     u1140 127C                     u1124 1236  
                   u1060 118C                     u1044 1146                     u1300 0F9C  
                   u1220 0EB4                     u1205 1322                     u1141 1278  
                   u1125 1232                     u1061 1188                     u1045 1142  
                   u1301 0F98                     u1221 0EB0                     u1310 0FAE  
                   u1230 0EC6                     u1311 0FAA                     u1231 0EC2  
                   u1170 12DA                     u1154 128E                     u1090 11EA  
                   u1074 119E                     u1171 12D6                     u1155 128A  
                   u1091 11E6                     u1075 119A                     u1180 12F4  
                   u1164 12AE                     u1084 11BE                     u1420 1E40  
                   u1404 10B4                     u1340 1014                     u1324 0FC4  
                   u1260 0F24                     u1244 0ED8                     u1181 12F0  
                   u1165 12AA                     u1085 11BA                     u1421 1E3C  
                   u1405 10B0                     u1341 1010                     u1325 0FC0  
                   u1261 0F20                     u1245 0ED4                     u1510 1394  
                   u1430 15E6                     u1414 10D8                     u1350 1026  
                   u1334 0FE8                     u1270 0F36                     u1254 0EF8  
                   u1511 1390                     u1431 15E2                     u1415 10D4  
                   u1351 1022                     u1335 0FE4                     u1271 0F32  
                   u1255 0EF4                     u1504 1362                     u1440 1608  
                   u1600 1A2E                     u1505 135E                     u1441 1604  
                   u1601 1A2A                     u1530 13DC                     u1194 1306  
                   u1450 1642                     u1610 1A4A                     u1531 13D8  
                   u1195 1302                     u1451 163E                     u1611 1A46  
                   u1524 13AA                     u1700 14CA                     u1620 1C3E  
                   u1460 1664                     u1380 108C                     u1364 103C  
                   u1284 0F4C                     u1525 13A6                     u1701 14C6  
                   u1621 1C3A                     u1461 1660                     u1381 1088  
                   u1365 1038                     u1285 0F48                     u1630 1AF6  
                   u1550 1424                     u1470 168C                     u1390 109E  
                   u1374 1060                     u1294 0F70                     u1631 1AF2  
                   u1551 1420                     u1471 1688                     u1391 109A  
                   u1375 105C                     u1295 0F6C                     u1800 18C2  
                   u1640 1B0E                     u1544 13F2                     u1720 151A  
                   u1480 16BE                     u1801 18BE                     u1641 1B0A  
                   u1545 13EE                     u1721 1516                     u1481 16BA  
                   u1810 190C                     u1650 1B38                     u1570 146C  
                   u1490 1350                     u1714 14EA                     u1811 1908  
                   u1651 1B34                     u1571 1468                     u1491 134C  
                   u1715 14E4                     u1820 192E                     u1660 1C5A  
                   u1564 143A                     u1740 155E                     u1900 0DB0  
                   u1821 192A                     u1661 1C56                     u1565 1436  
                   u1741 155A                     u1901 0DAC                     u1830 194C  
                   u1670 1C72                     u1734 1532                     u1590 1A10  
                   u1910 1738                     u1831 1948                     u1671 1C6E  
                   u1735 152C                     u1591 1A0C                     u1911 1734  
                   u1584 1482                     u1760 15A8                     u1680 1DB8  
                   u1840 06B8                     u1585 147E                     u1761 15A4  
                   u1681 1DB4                     u1841 06B4                     u1770 15CA  
                   u1754 157A                     u1690 1DD4                     u1850 0894  
                   u1771 15C6                     u1755 1574                     u1691 1DD0  
                   u1851 0890                     u1780 1878                     u1860 08AA  
                   u1781 1874                     u1861 08A6                     u1790 189A  
                   u1870 0B14                     u1791 1896                     u1871 0B10  
                   u1880 0B2A                     u1881 0B26                     u1890 0D9A  
                   u1891 0D96                     _Flag 0033                     _con1 0026  
                   _main 16E0                     _keys 0024         ??_PulseClockData 0007  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
        pushNibble@value 000C             ___param_bank 000000   __end_of_pulseEnablePin 1D68  
         pwmSet@porcento 000A          __end_of___aldiv 16E0                    ?_main 0001  
        __end_of_adcInit 1D26          __end_of_adcRead 1C90                    STR_10 0697  
                  STR_11 063B                    STR_20 0677                    STR_12 061B  
                  STR_13 0677                    STR_21 0657                    STR_14 0657  
                  STR_22 0662                    STR_15 0689                    STR_23 066D  
                  STR_16 062B                    STR_17 0697                    STR_18 063B  
                  STR_19 061B          __end_of___lldiv 18F6                    _T0CON 000FD5  
        __end_of___llmod 197E                    _T2CON 000FCA          __end_of___lwdiv 1A6A  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84          __end_of_charKey 061B                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcdChar 1F76          __end_of_lcdInit 1852  
                  _tecla 0032          __end_of_pinMode 10E6                    _valor 0601  
        __end_of_soWrite 1CDE                    tablat 000FF5          __end_of_ssdInit 1BEA  
        __end_of_pwmInit 1FAE                    status 000FD8             pushNibble@rs 000A  
   __end_of_digitalWrite 1334          __initialization 1E42          ?_pulseEnablePin 0001  
           __end_of_main 179E                   ??_main 0019       __size_of_LeTeclado 07FC  
          __activetblptr 000002     __size_of_digitalRead 016A                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0         ___llmod@dividend 000E  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR2L 000FBB  
           atraso_ms@num 0001                   _INTCON 000FF2     __size_of_lcdPosition 003A  
              ??___aldiv 0009                   ___wmul 1EEA                ??_adcInit 0007  
              ??_adcRead 0003                ??___lldiv 0009                ??___llmod 0016  
              ??___lwdiv 0005                   _kpInit 1DE0                   _kpRead 1FBE  
                 clear_0 1E60                   _soInit 1D68                ??_lcdChar 000E  
                 isa$std 000001                ??_lcdInit 000F                   _pwmSet 1A6A  
           __pdataCOMRAM 0033                ??_pinMode 0005             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_soWrite 0009                ??_ssdInit 0007                ??_pwmInit 0011  
       __end_of_pushByte 1B94               __accesstop 0080  __end_of__initialization 1E66  
      __end_of_LeTeclado 0E98            ___rparam_used 000001            pushByte@value 000D  
            pinMode@type 0003           __pcstackCOMRAM 0001            __end_of_valor 0611  
     __size_of_delayMili 0030       __size_of_lcdString 0056       __size_of_kpReadKey 0078  
     __size_of_atraso_ms 0064    __size_of_digitalWrite 024E               _delayMicro 1FD2  
             _lcdCommand 1F76                  ?___wmul 0001                  ?_kpInit 0001  
                ?_kpRead 0001                  _CCP2CON 000FBA                  ?_soInit 0001  
             _kpDebounce 149E                  ?_pwmSet 0001       __size_of_timerInit 0008  
     __size_of_timerWait 0010             _digitalWrite 10E6        __end_of_delayMili 1E42  
       ??_pulseEnablePin 0007                  _Leitura 002A                  __Hparam 0000  
                __Lparam 0000                  _ValorAD 0028        __end_of_lcdString 1C40  
        kpDebounce@tempo 0031                  ___aldiv 15D4        __end_of_kpReadKey 19F6  
                _adcInit 1CDE                  _adcRead 1C40                ?_pushByte 000A  
                ___lldiv 1852          __size_of___wmul 0026                  ___llmod 18F6  
                ___lwdiv 19F6        __end_of_atraso_ms 1B3A             __psmallconst 0600  
        __size_of_kpInit 0032          __size_of_kpRead 000A                  _charKey 0611  
                __pcinit 1E42                  _lcdChar 1F58                  __ramtop 0600  
        __size_of_soInit 003E                  _lcdInit 179E                  __ptext0 16E0  
                __ptext1 1FAE                  __ptext2 1F36                  __ptext3 1FC8  
                __ptext4 179E                  __ptext5 1EC4                  __ptext6 1DE0  
                __ptext7 1CDE                  __ptext8 069C                  __ptext9 1B94  
        __size_of_pwmSet 006C                  _display 0030                  _pinMode 0E98  
       ___aldiv@dividend 0001               delayMili@a 0001               delayMili@i 0004  
                _soWrite 1C90                  _ssdInit 1B94                  _pwmInit 1F94  
   end_of_initialization 1E66            ?_PulseEnClock 0001            __Lmediumconst 0000  
         digitalRead@pin 0001            ?_pwmFrequency 000F              ?_delayMicro 0001  
      __end_of_timerInit 1FD0          ___lldiv@divisor 0005        __end_of_timerWait 1FBE  
        ___lldiv@counter 000D         ___aldiv@quotient 000B              ?_lcdCommand 0001  
                postinc0 000FEE               ??_pushByte 000C  __size_of_PulseClockData 002A  
          ??_digitalRead 0003               _timerReset 1F36              ?_kpDebounce 0001  
             _pushNibble 1EC4               lcdString@i 0013            ??_lcdPosition 0013  
         ??_PulseEnClock 0007           ??_pwmFrequency 0011               kpReadKey@i 0004  
              _LeTeclado 069C               atraso_ms@i 0003               atraso_ms@j 0005  
             atraso_ms@k 0006           adcRead@ADvalor 0003           __end_of___wmul 1F10  
          __pidataCOMRAM 1FD0           __end_of_kpInit 1E12           __end_of_kpRead 1FC8  
         __end_of_soInit 1DA6           __end_of_pwmSet 1AD6      __size_of_delayMicro 0002  
    start_initialization 1E42      __end_of_digitalRead 149E      __size_of_lcdCommand 001E  
    __size_of_kpDebounce 0136          ___llmod@divisor 0012          ___llmod@counter 0016  
    __end_of_lcdPosition 1DE0           adcRead@channel 0001               ?_LeTeclado 0001  
      kpDebounce@oldRead 0020        kpDebounce@newRead 0022                 ??___wmul 0005  
               ??_kpInit 0007                 ??_kpRead 0003              ?_timerReset 0001  
               ??_soInit 0007                 ??_pwmSet 0008              __pbssCOMRAM 001C  
            ?_pushNibble 000A               pinMode@pin 0001                _delayMili 1E12  
       ___lwdiv@dividend 0001                 ?___aldiv 0001                 ?_adcInit 0001  
               ?_adcRead 0001                 ?___lldiv 0001                 ?___llmod 000E  
         _PulseClockData 1E9A                 ?___lwdiv 0001     __end_of_PulseEnClock 1E9A  
              _lcdString 1BEA              _digitalRead 1334                 ?_lcdChar 0001  
      __size_of_pushByte 005A                 ?_lcdInit 0001                _kpReadKey 197E  
   __end_of_pwmFrequency 1F36                _atraso_ms 1AD6              __smallconst 0600  
               ?_pinMode 0001                 ?_soWrite 0007                 ?_ssdInit 0001  
               ?_pwmInit 0001         ___lwdiv@quotient 0005              _lcdPosition 1DA6  
       pwmFrequency@freq 000F          ___aldiv@divisor 0005          ___aldiv@counter 0009  
    __size_of_timerReset 0022           ___wmul@product 0005             ??_delayMicro 0003  
             ?_delayMili 0001              ??_LeTeclado 0017   __end_of_PulseClockData 1EC4  
    __size_of_pushNibble 0026             ??_lcdCommand 000E                _timerInit 1FC8  
              _timerWait 1FAE               ?_lcdString 000F             ??_kpDebounce 000A  
             ?_kpReadKey 0001        ___wmul@multiplier 0001               ?_atraso_ms 0001  
        lcdCommand@value 000E       __end_of_delayMicro 1FD4         timerReset@ciclos 0003  
     __end_of_lcdCommand 1F94               pushByte@rs 000A             lcdChar@value 000E  
     __end_of_kpDebounce 15D4                 __Hrparam 0000                 __Lrparam 0000  
        lcdPosition@line 000F          ?_PulseClockData 0001               ?_timerInit 0001  
             ?_timerWait 0001         __size_of___aldiv 010C         __size_of_adcInit 0048  
       __size_of_adcRead 0050  __size_of_pulseEnablePin 0042         __size_of___lldiv 00A4  
       __size_of___llmod 0088         __size_of___lwdiv 0074         __size_of_lcdChar 001E  
       __size_of_lcdInit 00B4         __size_of_pinMode 024E          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 __ptext10 1D68                 __ptext11 0E98  
               __ptext20 1DA6                 __ptext12 1A6A                 __ptext21 1F76  
               __ptext13 1EEA                 __ptext30 1E70                 __ptext22 1B3A  
               __ptext14 19F6                 __ptext31 1E9A                 __ptext23 1D26  
               __ptext15 1F94                 __ptext32 10E6                 __ptext24 1FD2  
               __ptext16 1F10                 __ptext33 1334                 __ptext25 1E12  
               __ptext17 15D4                 __ptext34 1AD6                 __ptext26 197E  
               __ptext18 1BEA                 __ptext35 1C40                 __ptext27 1FBE  
               __ptext19 1F58                 __ptext36 18F6                 __ptext28 149E  
               __ptext37 1852                 __ptext29 1C90         __size_of_soWrite 004E  
       __size_of_ssdInit 0056         __size_of_pwmInit 001A            __size_of_main 00BE  
            ??_delayMili 0003    __size_of_PulseEnClock 002A              delayMicro@a 0001  
               isa$xinst 000000             soWrite@value 0007    __size_of_pwmFrequency 0026  
               _pushByte 1B3A                pwmSet@val 000B              ??_lcdString 0011  
           ??_timerReset 0003                 main@slot 001B              ??_kpReadKey 0001  
            ??_atraso_ms 0003          timerReset@tempo 0001             ??_pushNibble 000C  
         lcdPosition@col 0011            ?_digitalWrite 0001             _PulseEnClock 1E70  
      digitalWrite@value 0003         ___lldiv@dividend 0001       __end_of_timerReset 1F58  
           _pwmFrequency 1F10                 soWrite@i 0009              ??_timerInit 0001  
            ??_timerWait 0001       __end_of_pushNibble 1EEA             ?_digitalRead 0001  
       ___lldiv@quotient 0009              kpDebounce@i 000D           ??_digitalWrite 0005  
           ___aldiv@sign 000A             ?_lcdPosition 000F          digitalWrite@pin 0001  
